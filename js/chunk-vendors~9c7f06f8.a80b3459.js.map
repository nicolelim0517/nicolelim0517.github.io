{"version":3,"sources":["webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/x509.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/util.js"],"names":["forge","asn1","pki","module","exports","oids","_shortNames","publicKeyValidator","rsa","x509CertificateValidator","name","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","captureAsn1","CONTEXT_SPECIFIC","optional","INTEGER","capture","OID","UTCTIME","GENERALIZEDTIME","BITSTRING","captureBitStringValue","rsassaPssParameterValidator","certificationRequestInfoValidator","SET","certificationRequestValidator","_getAttribute","obj","options","shortName","attr","rval","i","attributes","length","RDNAttributesAsArray","rdn","md","set","si","derToOid","valueTagClass","update","push","CRIAttributesAsArray","seq","values","vi","extensionRequest","extensions","ei","certificateExtensionFromAsn1","_readSignatureParameters","oid","fillDefaults","params","hash","algorithmOid","mgf","saltLength","errors","validate","error","Error","undefined","hashOid","maskGenOid","maskGenHashOid","charCodeAt","_createSignatureDigest","signatureOid","sha1","create","md5","sha256","sha384","sha512","_verifySignature","scheme","cert","certificate","sha1WithRSAEncryption","sha1WithRSASignature","signatureParameters","pss","publicKey","verify","digest","getBytes","signature","_dnToAsn1","attrs","PRINTABLESTRING","UTF8","util","encodeUtf8","oidToDer","_fillMissingFields","attribute","valueConstructed","certificateExtensionToAsn1","_fillMissingExtensionFields","e","id","extension","unused","b2","b3","digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly","String","fromCharCode","cA","BOOLEAN","integerToDer","pathLenConstraint","key","indexOf","client","server","email","objsign","reserved","sslCA","emailCA","objCA","n","altNames","altName","ip","bytesFromIP","test","comment","IA5STRING","ski","generateSubjectKeyIdentifier","subjectKeyIdentifier","toHex","OCTETSTRING","keyIdentifier","authorityCertIssuer","issuer","serialNumber","hexToBytes","subSeq","fullNameGeneralNames","_signatureParametersToAsn1","parts","NULL","_CRIAttributesToAsn1","csr","certificateFromPem","pem","computeHash","strict","msg","decode","headerType","procType","fromDer","body","certificateFromAsn1","certificateToPem","maxline","toDer","certificateToAsn1","encode","publicKeyFromPem","publicKeyFromAsn1","publicKeyToPem","publicKeyToAsn1","publicKeyToRSAPublicKeyPem","publicKeyToRSAPublicKey","getPublicKeyFingerprint","bytes","start","encoding","hex","delimiter","match","join","certificationRequestFromPem","certificationRequestFromAsn1","certificationRequestToPem","certificationRequestToAsn1","createCertificate","siginfo","validity","notBefore","Date","notAfter","getField","sn","addField","subject","setSubject","uniqueId","setIssuer","setExtensions","exts","getExtension","ext","sign","algorithm","tbsCertificate","getTBSCertificate","child","issued","expectedIssuer","actualIssuer","isIssuer","parent","s","iattr","sattr","verifySubjectKeyIdentifier","publicKeyOid","rsaEncryption","version","certVersion","serial","createBuffer","certSerialNumber","certSignatureOid","certSignatureParams","certinfoSignatureOid","parameters","certinfoSignatureParams","certSignature","certValidity1UTCTime","utcTimeToDate","certValidity2GeneralizedTime","generalizedTimeToDate","certValidity3UTCTime","certValidity4GeneralizedTime","imd","ibytes","certIssuer","certIssuerUniqueId","smd","sbytes","certSubject","certSubjectUniqueId","certExtensions","certificateExtensionsFromAsn1","subjectPublicKeyInfo","extseq","critical","ev","derToInteger","gn","bytesToIP","bytesToHex","createCertificationRequest","csrVersion","csrSignatureOid","csrSignatureParams","csrSignature","certificationRequestInfo","certificationRequestInfoSubject","getAttribute","addAttribute","certificationRequestInfoAttributes","setAttributes","getCertificationRequestInfo","cri","jan_1_1950","jan_1_2050","_dateToAsn1","date","dateToUtcTime","dateToGeneralizedTime","tbs","certificateExtensionsToAsn1","distinguishedNameToAsn1","dn","createCaStore","certs","caStore","getBySubject","ensureSubjectHasHash","getIssuer","addCertificate","hasCertificate","tmp","isArray","der1","der2","listAllCertificates","certList","hasOwnProperty","removeCertificate","result","splice","certificateError","bad_certificate","unsupported_certificate","certificate_revoked","certificate_expired","certificate_unknown","unknown_ca","verifyCertificateChain","chain","slice","validityCheckDate","first","depth","shift","selfSigned","message","now","parents","verified","ex","se","keyUsage","basicConstraints","bcExt","keyUsageExt","pathLen","vfd","ret","baseN","_checkBitsParam","ByteStringBuffer","b","this","data","read","isArrayBuffer","isArrayBufferView","Buffer","toString","arr","Uint8Array","apply","putByte","_constructedStringLength","process","nextTick","browser","setImmediate","arguments","callback","setTimeout","window","postMessage","callbacks","handler","event","source","stopPropagation","copy","forEach","addEventListener","MutationObserver","div","document","createElement","observe","oldSetImmediate","setAttribute","isNodejs","versions","node","globalScope","global","self","Array","x","Object","prototype","call","ArrayBuffer","buffer","byteLength","ByteBuffer","_MAX_CONSTRUCTED_STRING_LENGTH","DataBuffer","readOffset","growSize","DataView","byteOffset","write","writeOffset","putBytes","_optimizeConstructedString","substr","isEmpty","fillWithByte","d","putString","str","putInt16","putInt24","putInt32","putInt16Le","putInt24Le","putInt32Le","putInt","putSignedInt","putBuffer","getByte","getInt16","getInt24","getInt32","getInt16Le","getInt24Le","getInt32Le","getInt","getSignedInt","max","count","Math","min","clear","at","setAt","last","c","compact","truncate","len","decodeUtf8","accommodate","amount","src","dst","setUint8","view","ceil","binary","base64","raw","Uint16Array","text","utf16","setInt16","setInt8","setInt32","getInt8","getUint8","utf8","input","fillString","xorBytes","s1","s2","s3","t","parseInt","int32ToBytes","_base64","_base64Idx","_base58","encode64","chr1","chr2","chr3","line","output","charAt","isNaN","decode64","replace","enc1","enc2","enc3","enc4","unescape","encodeURIComponent","decodeURIComponent","escape","base58","offset","out","j","subarray","k","deflate","api","flg","substring","inflate","_setStorageObject","removeItem","JSON","stringify","setItem","_getStorageObject","getItem","init","parse","_setItem","_getItem","_removeItem","empty","prop","_clearItems","_callStorageFunction","func","args","location","done","exception","idx","localStorage","clearItems","format","part","re","argi","exec","lastIndex","code","formatNumber","number","decimals","dec_point","thousands_sep","abs","toFixed","formatSize","size","bytesFromIPv4","bytesFromIPv6","split","num","blanks","filter","zeros","bytesToIPv4","bytesToIPv6","zeroGroups","zeroMaxGroup","end","group","unshift","estimateCores","cores","navigator","hardwareConcurrency","Worker","Blob","blobUrl","URL","createObjectURL","st","et","sample","samples","numWorkers","avg","floor","reduce","revokeObjectURL","map","err","results","workers","worker","terminate","overlaps","r1","overlap","r2"],"mappings":"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","file":"js/chunk-vendors~9c7f06f8.a80b3459.js","sourcesContent":["/**\n * Javascript implementation of X.509 and related components (such as\n * Certification Signing Requests) of a Public Key Infrastructure.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n *\n * The ASN.1 representation of an X.509v3 certificate is as follows\n * (see RFC 2459):\n *\n * Certificate ::= SEQUENCE {\n *   tbsCertificate       TBSCertificate,\n *   signatureAlgorithm   AlgorithmIdentifier,\n *   signatureValue       BIT STRING\n * }\n *\n * TBSCertificate ::= SEQUENCE {\n *   version         [0]  EXPLICIT Version DEFAULT v1,\n *   serialNumber         CertificateSerialNumber,\n *   signature            AlgorithmIdentifier,\n *   issuer               Name,\n *   validity             Validity,\n *   subject              Name,\n *   subjectPublicKeyInfo SubjectPublicKeyInfo,\n *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n *                        -- If present, version shall be v2 or v3\n *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n *                        -- If present, version shall be v2 or v3\n *   extensions      [3]  EXPLICIT Extensions OPTIONAL\n *                        -- If present, version shall be v3\n * }\n *\n * Version ::= INTEGER  { v1(0), v2(1), v3(2) }\n *\n * CertificateSerialNumber ::= INTEGER\n *\n * Name ::= CHOICE {\n *   // only one possible choice for now\n *   RDNSequence\n * }\n *\n * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n *\n * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue\n *\n * AttributeTypeAndValue ::= SEQUENCE {\n *   type     AttributeType,\n *   value    AttributeValue\n * }\n * AttributeType ::= OBJECT IDENTIFIER\n * AttributeValue ::= ANY DEFINED BY AttributeType\n *\n * Validity ::= SEQUENCE {\n *   notBefore      Time,\n *   notAfter       Time\n * }\n *\n * Time ::= CHOICE {\n *   utcTime        UTCTime,\n *   generalTime    GeneralizedTime\n * }\n *\n * UniqueIdentifier ::= BIT STRING\n *\n * SubjectPublicKeyInfo ::= SEQUENCE {\n *   algorithm            AlgorithmIdentifier,\n *   subjectPublicKey     BIT STRING\n * }\n *\n * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension\n *\n * Extension ::= SEQUENCE {\n *   extnID      OBJECT IDENTIFIER,\n *   critical    BOOLEAN DEFAULT FALSE,\n *   extnValue   OCTET STRING\n * }\n *\n * The only key algorithm currently supported for PKI is RSA.\n *\n * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.\n *\n * PKCS#10 v1.7 describes certificate signing requests:\n *\n * CertificationRequestInfo:\n *\n * CertificationRequestInfo ::= SEQUENCE {\n *   version       INTEGER { v1(0) } (v1,...),\n *   subject       Name,\n *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\n *   attributes    [0] Attributes{{ CRIAttributes }}\n * }\n *\n * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}\n *\n * CRIAttributes  ATTRIBUTE  ::= {\n *   ... -- add any locally defined attributes here -- }\n *\n * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\n *   type   ATTRIBUTE.&id({IOSet}),\n *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\n * }\n *\n * CertificationRequest ::= SEQUENCE {\n *   certificationRequestInfo CertificationRequestInfo,\n *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},\n *   signature          BIT STRING\n * }\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./md');\nrequire('./mgf');\nrequire('./oids');\nrequire('./pem');\nrequire('./pss');\nrequire('./rsa');\nrequire('./util');\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Public Key Infrastructure (PKI) implementation. */\nvar pki = module.exports = forge.pki = forge.pki || {};\nvar oids = pki.oids;\n\n// short name OID mappings\nvar _shortNames = {};\n_shortNames['CN'] = oids['commonName'];\n_shortNames['commonName'] = 'CN';\n_shortNames['C'] = oids['countryName'];\n_shortNames['countryName'] = 'C';\n_shortNames['L'] = oids['localityName'];\n_shortNames['localityName'] = 'L';\n_shortNames['ST'] = oids['stateOrProvinceName'];\n_shortNames['stateOrProvinceName'] = 'ST';\n_shortNames['O'] = oids['organizationName'];\n_shortNames['organizationName'] = 'O';\n_shortNames['OU'] = oids['organizationalUnitName'];\n_shortNames['organizationalUnitName'] = 'OU';\n_shortNames['E'] = oids['emailAddress'];\n_shortNames['emailAddress'] = 'E';\n\n// validator for an SubjectPublicKeyInfo structure\n// Note: Currently only works with an RSA public key\nvar publicKeyValidator = forge.pki.rsa.publicKeyValidator;\n\n// validator for an X.509v3 certificate\nvar x509CertificateValidator = {\n  name: 'Certificate',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'Certificate.TBSCertificate',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    captureAsn1: 'tbsCertificate',\n    value: [{\n      name: 'Certificate.TBSCertificate.version',\n      tagClass: asn1.Class.CONTEXT_SPECIFIC,\n      type: 0,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.version.integer',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'certVersion'\n      }]\n    }, {\n      name: 'Certificate.TBSCertificate.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'certSerialNumber'\n    }, {\n      name: 'Certificate.TBSCertificate.signature',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.signature.algorithm',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: 'certinfoSignatureOid'\n      }, {\n        name: 'Certificate.TBSCertificate.signature.parameters',\n        tagClass: asn1.Class.UNIVERSAL,\n        optional: true,\n        captureAsn1: 'certinfoSignatureParams'\n      }]\n    }, {\n      name: 'Certificate.TBSCertificate.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'certIssuer'\n    }, {\n      name: 'Certificate.TBSCertificate.validity',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      // Note: UTC and generalized times may both appear so the capture\n      // names are based on their detected order, the names used below\n      // are only for the common case, which validity time really means\n      // \"notBefore\" and which means \"notAfter\" will be determined by order\n      value: [{\n        // notBefore (Time) (UTC time case)\n        name: 'Certificate.TBSCertificate.validity.notBefore (utc)',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.UTCTIME,\n        constructed: false,\n        optional: true,\n        capture: 'certValidity1UTCTime'\n      }, {\n        // notBefore (Time) (generalized time case)\n        name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.GENERALIZEDTIME,\n        constructed: false,\n        optional: true,\n        capture: 'certValidity2GeneralizedTime'\n      }, {\n        // notAfter (Time) (only UTC time is supported)\n        name: 'Certificate.TBSCertificate.validity.notAfter (utc)',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.UTCTIME,\n        constructed: false,\n        optional: true,\n        capture: 'certValidity3UTCTime'\n      }, {\n        // notAfter (Time) (only UTC time is supported)\n        name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.GENERALIZEDTIME,\n        constructed: false,\n        optional: true,\n        capture: 'certValidity4GeneralizedTime'\n      }]\n    }, {\n      // Name (subject) (RDNSequence)\n      name: 'Certificate.TBSCertificate.subject',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'certSubject'\n    },\n    // SubjectPublicKeyInfo\n    publicKeyValidator,\n    {\n      // issuerUniqueID (optional)\n      name: 'Certificate.TBSCertificate.issuerUniqueID',\n      tagClass: asn1.Class.CONTEXT_SPECIFIC,\n      type: 1,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.issuerUniqueID.id',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.BITSTRING,\n        constructed: false,\n        // TODO: support arbitrary bit length ids\n        captureBitStringValue: 'certIssuerUniqueId'\n      }]\n    }, {\n      // subjectUniqueID (optional)\n      name: 'Certificate.TBSCertificate.subjectUniqueID',\n      tagClass: asn1.Class.CONTEXT_SPECIFIC,\n      type: 2,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.subjectUniqueID.id',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.BITSTRING,\n        constructed: false,\n        // TODO: support arbitrary bit length ids\n        captureBitStringValue: 'certSubjectUniqueId'\n      }]\n    }, {\n      // Extensions (optional)\n      name: 'Certificate.TBSCertificate.extensions',\n      tagClass: asn1.Class.CONTEXT_SPECIFIC,\n      type: 3,\n      constructed: true,\n      captureAsn1: 'certExtensions',\n      optional: true\n    }]\n  }, {\n    // AlgorithmIdentifier (signature algorithm)\n    name: 'Certificate.signatureAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // algorithm\n      name: 'Certificate.signatureAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'certSignatureOid'\n    }, {\n      name: 'Certificate.TBSCertificate.signature.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      optional: true,\n      captureAsn1: 'certSignatureParams'\n    }]\n  }, {\n    // SignatureValue\n    name: 'Certificate.signatureValue',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.BITSTRING,\n    constructed: false,\n    captureBitStringValue: 'certSignature'\n  }]\n};\n\nvar rsassaPssParameterValidator = {\n  name: 'rsapss',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'rsapss.hashAlgorithm',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    value: [{\n      name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Class.SEQUENCE,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: 'hashOid'\n        /* parameter block omitted, for SHA1 NULL anyhow. */\n      }]\n    }]\n  }, {\n    name: 'rsapss.maskGenAlgorithm',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    constructed: true,\n    value: [{\n      name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Class.SEQUENCE,\n      constructed: true,\n      optional: true,\n      value: [{\n        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: 'maskGenOid'\n      }, {\n        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'maskGenHashOid'\n          /* parameter block omitted, for SHA1 NULL anyhow. */\n        }]\n      }]\n    }]\n  }, {\n    name: 'rsapss.saltLength',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 2,\n    optional: true,\n    value: [{\n      name: 'rsapss.saltLength.saltLength',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Class.INTEGER,\n      constructed: false,\n      capture: 'saltLength'\n    }]\n  }, {\n    name: 'rsapss.trailerField',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 3,\n    optional: true,\n    value: [{\n      name: 'rsapss.trailer.trailer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Class.INTEGER,\n      constructed: false,\n      capture: 'trailer'\n    }]\n  }]\n};\n\n// validator for a CertificationRequestInfo structure\nvar certificationRequestInfoValidator = {\n  name: 'CertificationRequestInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  captureAsn1: 'certificationRequestInfo',\n  value: [{\n    name: 'CertificationRequestInfo.integer',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'certificationRequestInfoVersion'\n  }, {\n    // Name (subject) (RDNSequence)\n    name: 'CertificationRequestInfo.subject',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    captureAsn1: 'certificationRequestInfoSubject'\n  },\n  // SubjectPublicKeyInfo\n  publicKeyValidator,\n  {\n    name: 'CertificationRequestInfo.attributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    capture: 'certificationRequestInfoAttributes',\n    value: [{\n      name: 'CertificationRequestInfo.attributes',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'CertificationRequestInfo.attributes.type',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false\n      }, {\n        name: 'CertificationRequestInfo.attributes.value',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SET,\n        constructed: true\n      }]\n    }]\n  }]\n};\n\n// validator for a CertificationRequest structure\nvar certificationRequestValidator = {\n  name: 'CertificationRequest',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  captureAsn1: 'csr',\n  value: [\n    certificationRequestInfoValidator, {\n      // AlgorithmIdentifier (signature algorithm)\n      name: 'CertificationRequest.signatureAlgorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        // algorithm\n        name: 'CertificationRequest.signatureAlgorithm.algorithm',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: 'csrSignatureOid'\n      }, {\n        name: 'CertificationRequest.signatureAlgorithm.parameters',\n        tagClass: asn1.Class.UNIVERSAL,\n        optional: true,\n        captureAsn1: 'csrSignatureParams'\n      }]\n    }, {\n      // signature\n      name: 'CertificationRequest.signature',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.BITSTRING,\n      constructed: false,\n      captureBitStringValue: 'csrSignature'\n    }\n  ]\n};\n\n/**\n * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName\n * sets into an array with objects that have type and value properties.\n *\n * @param rdn the RDNSequence to convert.\n * @param md a message digest to append type and value to if provided.\n */\npki.RDNAttributesAsArray = function(rdn, md) {\n  var rval = [];\n\n  // each value in 'rdn' in is a SET of RelativeDistinguishedName\n  var set, attr, obj;\n  for(var si = 0; si < rdn.value.length; ++si) {\n    // get the RelativeDistinguishedName set\n    set = rdn.value[si];\n\n    // each value in the SET is an AttributeTypeAndValue sequence\n    // containing first a type (an OID) and second a value (defined by\n    // the OID)\n    for(var i = 0; i < set.value.length; ++i) {\n      obj = {};\n      attr = set.value[i];\n      obj.type = asn1.derToOid(attr.value[0].value);\n      obj.value = attr.value[1].value;\n      obj.valueTagClass = attr.value[1].type;\n      // if the OID is known, get its name and short name\n      if(obj.type in oids) {\n        obj.name = oids[obj.type];\n        if(obj.name in _shortNames) {\n          obj.shortName = _shortNames[obj.name];\n        }\n      }\n      if(md) {\n        md.update(obj.type);\n        md.update(obj.value);\n      }\n      rval.push(obj);\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Converts ASN.1 CRIAttributes into an array with objects that have type and\n * value properties.\n *\n * @param attributes the CRIAttributes to convert.\n */\npki.CRIAttributesAsArray = function(attributes) {\n  var rval = [];\n\n  // each value in 'attributes' in is a SEQUENCE with an OID and a SET\n  for(var si = 0; si < attributes.length; ++si) {\n    // get the attribute sequence\n    var seq = attributes[si];\n\n    // each value in the SEQUENCE containing first a type (an OID) and\n    // second a set of values (defined by the OID)\n    var type = asn1.derToOid(seq.value[0].value);\n    var values = seq.value[1].value;\n    for(var vi = 0; vi < values.length; ++vi) {\n      var obj = {};\n      obj.type = type;\n      obj.value = values[vi].value;\n      obj.valueTagClass = values[vi].type;\n      // if the OID is known, get its name and short name\n      if(obj.type in oids) {\n        obj.name = oids[obj.type];\n        if(obj.name in _shortNames) {\n          obj.shortName = _shortNames[obj.name];\n        }\n      }\n      // parse extensions\n      if(obj.type === oids.extensionRequest) {\n        obj.extensions = [];\n        for(var ei = 0; ei < obj.value.length; ++ei) {\n          obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));\n        }\n      }\n      rval.push(obj);\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Gets an issuer or subject attribute from its name, type, or short name.\n *\n * @param obj the issuer or subject object.\n * @param options a short name string or an object with:\n *          shortName the short name for the attribute.\n *          name the name for the attribute.\n *          type the type for the attribute.\n *\n * @return the attribute.\n */\nfunction _getAttribute(obj, options) {\n  if(typeof options === 'string') {\n    options = {shortName: options};\n  }\n\n  var rval = null;\n  var attr;\n  for(var i = 0; rval === null && i < obj.attributes.length; ++i) {\n    attr = obj.attributes[i];\n    if(options.type && options.type === attr.type) {\n      rval = attr;\n    } else if(options.name && options.name === attr.name) {\n      rval = attr;\n    } else if(options.shortName && options.shortName === attr.shortName) {\n      rval = attr;\n    }\n  }\n  return rval;\n}\n\n/**\n * Converts signature parameters from ASN.1 structure.\n *\n * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had\n * no parameters.\n *\n * RSASSA-PSS-params  ::=  SEQUENCE  {\n *   hashAlgorithm      [0] HashAlgorithm DEFAULT\n *                             sha1Identifier,\n *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT\n *                             mgf1SHA1Identifier,\n *   saltLength         [2] INTEGER DEFAULT 20,\n *   trailerField       [3] INTEGER DEFAULT 1\n * }\n *\n * HashAlgorithm  ::=  AlgorithmIdentifier\n *\n * MaskGenAlgorithm  ::=  AlgorithmIdentifier\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *   algorithm OBJECT IDENTIFIER,\n *   parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * @param oid The OID specifying the signature algorithm\n * @param obj The ASN.1 structure holding the parameters\n * @param fillDefaults Whether to use return default values where omitted\n * @return signature parameter object\n */\nvar _readSignatureParameters = function(oid, obj, fillDefaults) {\n  var params = {};\n\n  if(oid !== oids['RSASSA-PSS']) {\n    return params;\n  }\n\n  if(fillDefaults) {\n    params = {\n      hash: {\n        algorithmOid: oids['sha1']\n      },\n      mgf: {\n        algorithmOid: oids['mgf1'],\n        hash: {\n          algorithmOid: oids['sha1']\n        }\n      },\n      saltLength: 20\n    };\n  }\n\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {\n    var error = new Error('Cannot read RSASSA-PSS parameter block.');\n    error.errors = errors;\n    throw error;\n  }\n\n  if(capture.hashOid !== undefined) {\n    params.hash = params.hash || {};\n    params.hash.algorithmOid = asn1.derToOid(capture.hashOid);\n  }\n\n  if(capture.maskGenOid !== undefined) {\n    params.mgf = params.mgf || {};\n    params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);\n    params.mgf.hash = params.mgf.hash || {};\n    params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);\n  }\n\n  if(capture.saltLength !== undefined) {\n    params.saltLength = capture.saltLength.charCodeAt(0);\n  }\n\n  return params;\n};\n\n/**\n * Create signature digest for OID.\n *\n * @param options\n *   signatureOid: the OID specifying the signature algorithm.\n *   type: a human readable type for error messages\n * @return a created md instance. throws if unknown oid.\n */\nvar _createSignatureDigest = function(options) {\n  switch(oids[options.signatureOid]) {\n    case 'sha1WithRSAEncryption':\n    // deprecated alias\n    case 'sha1WithRSASignature':\n      return forge.md.sha1.create();\n    case 'md5WithRSAEncryption':\n      return forge.md.md5.create();\n    case 'sha256WithRSAEncryption':\n      return forge.md.sha256.create();\n    case 'sha384WithRSAEncryption':\n      return forge.md.sha384.create();\n    case 'sha512WithRSAEncryption':\n      return forge.md.sha512.create();\n    case 'RSASSA-PSS':\n      return forge.md.sha256.create();\n    default:\n      var error = new Error(\n        'Could not compute ' + options.type + ' digest. ' +\n        'Unknown signature OID.');\n      error.signatureOid = options.signatureOid;\n      throw error;\n  }\n};\n\n/**\n * Verify signature on certificate or CSR.\n *\n * @param options:\n *   certificate the certificate or CSR to verify.\n *   md the signature digest.\n *   signature the signature\n * @return a created md instance. throws if unknown oid.\n */\nvar _verifySignature = function(options) {\n  var cert = options.certificate;\n  var scheme;\n\n  switch(cert.signatureOid) {\n    case oids.sha1WithRSAEncryption:\n    // deprecated alias\n    case oids.sha1WithRSASignature:\n      /* use PKCS#1 v1.5 padding scheme */\n      break;\n    case oids['RSASSA-PSS']:\n      var hash, mgf;\n\n      /* initialize mgf */\n      hash = oids[cert.signatureParameters.mgf.hash.algorithmOid];\n      if(hash === undefined || forge.md[hash] === undefined) {\n        var error = new Error('Unsupported MGF hash function.');\n        error.oid = cert.signatureParameters.mgf.hash.algorithmOid;\n        error.name = hash;\n        throw error;\n      }\n\n      mgf = oids[cert.signatureParameters.mgf.algorithmOid];\n      if(mgf === undefined || forge.mgf[mgf] === undefined) {\n        var error = new Error('Unsupported MGF function.');\n        error.oid = cert.signatureParameters.mgf.algorithmOid;\n        error.name = mgf;\n        throw error;\n      }\n\n      mgf = forge.mgf[mgf].create(forge.md[hash].create());\n\n      /* initialize hash function */\n      hash = oids[cert.signatureParameters.hash.algorithmOid];\n      if(hash === undefined || forge.md[hash] === undefined) {\n        var error = new Error('Unsupported RSASSA-PSS hash function.');\n        error.oid = cert.signatureParameters.hash.algorithmOid;\n        error.name = hash;\n        throw error;\n      }\n\n      scheme = forge.pss.create(\n        forge.md[hash].create(), mgf, cert.signatureParameters.saltLength\n      );\n      break;\n  }\n\n  // verify signature on cert using public key\n  return cert.publicKey.verify(\n    options.md.digest().getBytes(), options.signature, scheme\n  );\n};\n\n/**\n * Converts an X.509 certificate from PEM format.\n *\n * Note: If the certificate is to be verified then compute hash should\n * be set to true. This will scan the TBSCertificate part of the ASN.1\n * object while it is converted so it doesn't need to be converted back\n * to ASN.1-DER-encoding later.\n *\n * @param pem the PEM-formatted certificate.\n * @param computeHash true to compute the hash for verification.\n * @param strict true to be strict when checking ASN.1 value lengths, false to\n *          allow truncated values (default: true).\n *\n * @return the certificate.\n */\npki.certificateFromPem = function(pem, computeHash, strict) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'CERTIFICATE' &&\n    msg.type !== 'X509 CERTIFICATE' &&\n    msg.type !== 'TRUSTED CERTIFICATE') {\n    var error = new Error(\n      'Could not convert certificate from PEM; PEM header type ' +\n      'is not \"CERTIFICATE\", \"X509 CERTIFICATE\", or \"TRUSTED CERTIFICATE\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error(\n      'Could not convert certificate from PEM; PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body, strict);\n\n  return pki.certificateFromAsn1(obj, computeHash);\n};\n\n/**\n * Converts an X.509 certificate to PEM format.\n *\n * @param cert the certificate.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted certificate.\n */\npki.certificateToPem = function(cert, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'CERTIFICATE',\n    body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts an RSA public key from PEM format.\n *\n * @param pem the PEM-formatted public key.\n *\n * @return the public key.\n */\npki.publicKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'PUBLIC KEY' && msg.type !== 'RSA PUBLIC KEY') {\n    var error = new Error('Could not convert public key from PEM; PEM header ' +\n      'type is not \"PUBLIC KEY\" or \"RSA PUBLIC KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert public key from PEM; PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body);\n\n  return pki.publicKeyFromAsn1(obj);\n};\n\n/**\n * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).\n *\n * @param key the public key.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted public key.\n */\npki.publicKeyToPem = function(key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'PUBLIC KEY',\n    body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts an RSA public key to PEM format (using an RSAPublicKey).\n *\n * @param key the public key.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted public key.\n */\npki.publicKeyToRSAPublicKeyPem = function(key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'RSA PUBLIC KEY',\n    body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Gets a fingerprint for the given public key.\n *\n * @param options the options to use.\n *          [md] the message digest object to use (defaults to forge.md.sha1).\n *          [type] the type of fingerprint, such as 'RSAPublicKey',\n *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').\n *          [encoding] an alternative output encoding, such as 'hex'\n *            (defaults to none, outputs a byte buffer).\n *          [delimiter] the delimiter to use between bytes for 'hex' encoded\n *            output, eg: ':' (defaults to none).\n *\n * @return the fingerprint as a byte buffer or other encoding based on options.\n */\npki.getPublicKeyFingerprint = function(key, options) {\n  options = options || {};\n  var md = options.md || forge.md.sha1.create();\n  var type = options.type || 'RSAPublicKey';\n\n  var bytes;\n  switch(type) {\n    case 'RSAPublicKey':\n      bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();\n      break;\n    case 'SubjectPublicKeyInfo':\n      bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();\n      break;\n    default:\n      throw new Error('Unknown fingerprint type \"' + options.type + '\".');\n  }\n\n  // hash public key bytes\n  md.start();\n  md.update(bytes);\n  var digest = md.digest();\n  if(options.encoding === 'hex') {\n    var hex = digest.toHex();\n    if(options.delimiter) {\n      return hex.match(/.{2}/g).join(options.delimiter);\n    }\n    return hex;\n  } else if(options.encoding === 'binary') {\n    return digest.getBytes();\n  } else if(options.encoding) {\n    throw new Error('Unknown encoding \"' + options.encoding + '\".');\n  }\n  return digest;\n};\n\n/**\n * Converts a PKCS#10 certification request (CSR) from PEM format.\n *\n * Note: If the certification request is to be verified then compute hash\n * should be set to true. This will scan the CertificationRequestInfo part of\n * the ASN.1 object while it is converted so it doesn't need to be converted\n * back to ASN.1-DER-encoding later.\n *\n * @param pem the PEM-formatted certificate.\n * @param computeHash true to compute the hash for verification.\n * @param strict true to be strict when checking ASN.1 value lengths, false to\n *          allow truncated values (default: true).\n *\n * @return the certification request (CSR).\n */\npki.certificationRequestFromPem = function(pem, computeHash, strict) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'CERTIFICATE REQUEST') {\n    var error = new Error('Could not convert certification request from PEM; ' +\n      'PEM header type is not \"CERTIFICATE REQUEST\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert certification request from PEM; ' +\n      'PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body, strict);\n\n  return pki.certificationRequestFromAsn1(obj, computeHash);\n};\n\n/**\n * Converts a PKCS#10 certification request (CSR) to PEM format.\n *\n * @param csr the certification request.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted certification request.\n */\npki.certificationRequestToPem = function(csr, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'CERTIFICATE REQUEST',\n    body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Creates an empty X.509v3 RSA certificate.\n *\n * @return the certificate.\n */\npki.createCertificate = function() {\n  var cert = {};\n  cert.version = 0x02;\n  cert.serialNumber = '00';\n  cert.signatureOid = null;\n  cert.signature = null;\n  cert.siginfo = {};\n  cert.siginfo.algorithmOid = null;\n  cert.validity = {};\n  cert.validity.notBefore = new Date();\n  cert.validity.notAfter = new Date();\n\n  cert.issuer = {};\n  cert.issuer.getField = function(sn) {\n    return _getAttribute(cert.issuer, sn);\n  };\n  cert.issuer.addField = function(attr) {\n    _fillMissingFields([attr]);\n    cert.issuer.attributes.push(attr);\n  };\n  cert.issuer.attributes = [];\n  cert.issuer.hash = null;\n\n  cert.subject = {};\n  cert.subject.getField = function(sn) {\n    return _getAttribute(cert.subject, sn);\n  };\n  cert.subject.addField = function(attr) {\n    _fillMissingFields([attr]);\n    cert.subject.attributes.push(attr);\n  };\n  cert.subject.attributes = [];\n  cert.subject.hash = null;\n\n  cert.extensions = [];\n  cert.publicKey = null;\n  cert.md = null;\n\n  /**\n   * Sets the subject of this certificate.\n   *\n   * @param attrs the array of subject attributes to use.\n   * @param uniqueId an optional a unique ID to use.\n   */\n  cert.setSubject = function(attrs, uniqueId) {\n    // set new attributes, clear hash\n    _fillMissingFields(attrs);\n    cert.subject.attributes = attrs;\n    delete cert.subject.uniqueId;\n    if(uniqueId) {\n      // TODO: support arbitrary bit length ids\n      cert.subject.uniqueId = uniqueId;\n    }\n    cert.subject.hash = null;\n  };\n\n  /**\n   * Sets the issuer of this certificate.\n   *\n   * @param attrs the array of issuer attributes to use.\n   * @param uniqueId an optional a unique ID to use.\n   */\n  cert.setIssuer = function(attrs, uniqueId) {\n    // set new attributes, clear hash\n    _fillMissingFields(attrs);\n    cert.issuer.attributes = attrs;\n    delete cert.issuer.uniqueId;\n    if(uniqueId) {\n      // TODO: support arbitrary bit length ids\n      cert.issuer.uniqueId = uniqueId;\n    }\n    cert.issuer.hash = null;\n  };\n\n  /**\n   * Sets the extensions of this certificate.\n   *\n   * @param exts the array of extensions to use.\n   */\n  cert.setExtensions = function(exts) {\n    for(var i = 0; i < exts.length; ++i) {\n      _fillMissingExtensionFields(exts[i], {cert: cert});\n    }\n    // set new extensions\n    cert.extensions = exts;\n  };\n\n  /**\n   * Gets an extension by its name or id.\n   *\n   * @param options the name to use or an object with:\n   *          name the name to use.\n   *          id the id to use.\n   *\n   * @return the extension or null if not found.\n   */\n  cert.getExtension = function(options) {\n    if(typeof options === 'string') {\n      options = {name: options};\n    }\n\n    var rval = null;\n    var ext;\n    for(var i = 0; rval === null && i < cert.extensions.length; ++i) {\n      ext = cert.extensions[i];\n      if(options.id && ext.id === options.id) {\n        rval = ext;\n      } else if(options.name && ext.name === options.name) {\n        rval = ext;\n      }\n    }\n    return rval;\n  };\n\n  /**\n   * Signs this certificate using the given private key.\n   *\n   * @param key the private key to sign with.\n   * @param md the message digest object to use (defaults to forge.md.sha1).\n   */\n  cert.sign = function(key, md) {\n    // TODO: get signature OID from private key\n    cert.md = md || forge.md.sha1.create();\n    var algorithmOid = oids[cert.md.algorithm + 'WithRSAEncryption'];\n    if(!algorithmOid) {\n      var error = new Error('Could not compute certificate digest. ' +\n        'Unknown message digest algorithm OID.');\n      error.algorithm = cert.md.algorithm;\n      throw error;\n    }\n    cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;\n\n    // get TBSCertificate, convert to DER\n    cert.tbsCertificate = pki.getTBSCertificate(cert);\n    var bytes = asn1.toDer(cert.tbsCertificate);\n\n    // digest and sign\n    cert.md.update(bytes.getBytes());\n    cert.signature = key.sign(cert.md);\n  };\n\n  /**\n   * Attempts verify the signature on the passed certificate using this\n   * certificate's public key.\n   *\n   * @param child the certificate to verify.\n   *\n   * @return true if verified, false if not.\n   */\n  cert.verify = function(child) {\n    var rval = false;\n\n    if(!cert.issued(child)) {\n      var issuer = child.issuer;\n      var subject = cert.subject;\n      var error = new Error(\n        'The parent certificate did not issue the given child ' +\n        'certificate; the child certificate\\'s issuer does not match the ' +\n        'parent\\'s subject.');\n      error.expectedIssuer = subject.attributes;\n      error.actualIssuer = issuer.attributes;\n      throw error;\n    }\n\n    var md = child.md;\n    if(md === null) {\n      // create digest for OID signature types\n      md = _createSignatureDigest({\n        signatureOid: child.signatureOid,\n        type: 'certificate'\n      });\n\n      // produce DER formatted TBSCertificate and digest it\n      var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);\n      var bytes = asn1.toDer(tbsCertificate);\n      md.update(bytes.getBytes());\n    }\n\n    if(md !== null) {\n      rval = _verifySignature({\n        certificate: cert, md: md, signature: child.signature\n      });\n    }\n\n    return rval;\n  };\n\n  /**\n   * Returns true if this certificate's issuer matches the passed\n   * certificate's subject. Note that no signature check is performed.\n   *\n   * @param parent the certificate to check.\n   *\n   * @return true if this certificate's issuer matches the passed certificate's\n   *         subject.\n   */\n  cert.isIssuer = function(parent) {\n    var rval = false;\n\n    var i = cert.issuer;\n    var s = parent.subject;\n\n    // compare hashes if present\n    if(i.hash && s.hash) {\n      rval = (i.hash === s.hash);\n    } else if(i.attributes.length === s.attributes.length) {\n      // all attributes are the same so issuer matches subject\n      rval = true;\n      var iattr, sattr;\n      for(var n = 0; rval && n < i.attributes.length; ++n) {\n        iattr = i.attributes[n];\n        sattr = s.attributes[n];\n        if(iattr.type !== sattr.type || iattr.value !== sattr.value) {\n          // attribute mismatch\n          rval = false;\n        }\n      }\n    }\n\n    return rval;\n  };\n\n  /**\n   * Returns true if this certificate's subject matches the issuer of the\n   * given certificate). Note that not signature check is performed.\n   *\n   * @param child the certificate to check.\n   *\n   * @return true if this certificate's subject matches the passed\n   *         certificate's issuer.\n   */\n  cert.issued = function(child) {\n    return child.isIssuer(cert);\n  };\n\n  /**\n   * Generates the subjectKeyIdentifier for this certificate as byte buffer.\n   *\n   * @return the subjectKeyIdentifier for this certificate as byte buffer.\n   */\n  cert.generateSubjectKeyIdentifier = function() {\n    /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:\n\n      (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the\n        value of the BIT STRING subjectPublicKey (excluding the tag,\n        length, and number of unused bits).\n\n      (2) The keyIdentifier is composed of a four bit type field with\n        the value 0100 followed by the least significant 60 bits of the\n        SHA-1 hash of the value of the BIT STRING subjectPublicKey\n        (excluding the tag, length, and number of unused bit string bits).\n    */\n\n    // skipping the tag, length, and number of unused bits is the same\n    // as just using the RSAPublicKey (for RSA keys, which are the\n    // only ones supported)\n    return pki.getPublicKeyFingerprint(cert.publicKey, {type: 'RSAPublicKey'});\n  };\n\n  /**\n   * Verifies the subjectKeyIdentifier extension value for this certificate\n   * against its public key. If no extension is found, false will be\n   * returned.\n   *\n   * @return true if verified, false if not.\n   */\n  cert.verifySubjectKeyIdentifier = function() {\n    var oid = oids['subjectKeyIdentifier'];\n    for(var i = 0; i < cert.extensions.length; ++i) {\n      var ext = cert.extensions[i];\n      if(ext.id === oid) {\n        var ski = cert.generateSubjectKeyIdentifier().getBytes();\n        return (forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski);\n      }\n    }\n    return false;\n  };\n\n  return cert;\n};\n\n/**\n * Converts an X.509v3 RSA certificate from an ASN.1 object.\n *\n * Note: If the certificate is to be verified then compute hash should\n * be set to true. There is currently no implementation for converting\n * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1\n * object needs to be scanned before the cert object is created.\n *\n * @param obj the asn1 representation of an X.509v3 RSA certificate.\n * @param computeHash true to compute the hash for verification.\n *\n * @return the certificate.\n */\npki.certificateFromAsn1 = function(obj, computeHash) {\n  // validate certificate and capture data\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, x509CertificateValidator, capture, errors)) {\n    var error = new Error('Cannot read X.509 certificate. ' +\n      'ASN.1 object is not an X509v3 Certificate.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get oid\n  var oid = asn1.derToOid(capture.publicKeyOid);\n  if(oid !== pki.oids.rsaEncryption) {\n    throw new Error('Cannot read public key. OID is not RSA.');\n  }\n\n  // create certificate\n  var cert = pki.createCertificate();\n  cert.version = capture.certVersion ?\n    capture.certVersion.charCodeAt(0) : 0;\n  var serial = forge.util.createBuffer(capture.certSerialNumber);\n  cert.serialNumber = serial.toHex();\n  cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);\n  cert.signatureParameters = _readSignatureParameters(\n    cert.signatureOid, capture.certSignatureParams, true);\n  cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);\n  cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid,\n    capture.certinfoSignatureParams, false);\n  cert.signature = capture.certSignature;\n\n  var validity = [];\n  if(capture.certValidity1UTCTime !== undefined) {\n    validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));\n  }\n  if(capture.certValidity2GeneralizedTime !== undefined) {\n    validity.push(asn1.generalizedTimeToDate(\n      capture.certValidity2GeneralizedTime));\n  }\n  if(capture.certValidity3UTCTime !== undefined) {\n    validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));\n  }\n  if(capture.certValidity4GeneralizedTime !== undefined) {\n    validity.push(asn1.generalizedTimeToDate(\n      capture.certValidity4GeneralizedTime));\n  }\n  if(validity.length > 2) {\n    throw new Error('Cannot read notBefore/notAfter validity times; more ' +\n      'than two times were provided in the certificate.');\n  }\n  if(validity.length < 2) {\n    throw new Error('Cannot read notBefore/notAfter validity times; they ' +\n      'were not provided as either UTCTime or GeneralizedTime.');\n  }\n  cert.validity.notBefore = validity[0];\n  cert.validity.notAfter = validity[1];\n\n  // keep TBSCertificate to preserve signature when exporting\n  cert.tbsCertificate = capture.tbsCertificate;\n\n  if(computeHash) {\n    // create digest for OID signature type\n    cert.md = _createSignatureDigest({\n      signatureOid: cert.signatureOid,\n      type: 'certificate'\n    });\n\n    // produce DER formatted TBSCertificate and digest it\n    var bytes = asn1.toDer(cert.tbsCertificate);\n    cert.md.update(bytes.getBytes());\n  }\n\n  // handle issuer, build issuer message digest\n  var imd = forge.md.sha1.create();\n  var ibytes = asn1.toDer(capture.certIssuer);\n  imd.update(ibytes.getBytes());\n  cert.issuer.getField = function(sn) {\n    return _getAttribute(cert.issuer, sn);\n  };\n  cert.issuer.addField = function(attr) {\n    _fillMissingFields([attr]);\n    cert.issuer.attributes.push(attr);\n  };\n  cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer);\n  if(capture.certIssuerUniqueId) {\n    cert.issuer.uniqueId = capture.certIssuerUniqueId;\n  }\n  cert.issuer.hash = imd.digest().toHex();\n\n  // handle subject, build subject message digest\n  var smd = forge.md.sha1.create();\n  var sbytes = asn1.toDer(capture.certSubject);\n  smd.update(sbytes.getBytes());\n  cert.subject.getField = function(sn) {\n    return _getAttribute(cert.subject, sn);\n  };\n  cert.subject.addField = function(attr) {\n    _fillMissingFields([attr]);\n    cert.subject.attributes.push(attr);\n  };\n  cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject);\n  if(capture.certSubjectUniqueId) {\n    cert.subject.uniqueId = capture.certSubjectUniqueId;\n  }\n  cert.subject.hash = smd.digest().toHex();\n\n  // handle extensions\n  if(capture.certExtensions) {\n    cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);\n  } else {\n    cert.extensions = [];\n  }\n\n  // convert RSA public key from ASN.1\n  cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);\n\n  return cert;\n};\n\n/**\n * Converts an ASN.1 extensions object (with extension sequences as its\n * values) into an array of extension objects with types and values.\n *\n * Supported extensions:\n *\n * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }\n * KeyUsage ::= BIT STRING {\n *   digitalSignature        (0),\n *   nonRepudiation          (1),\n *   keyEncipherment         (2),\n *   dataEncipherment        (3),\n *   keyAgreement            (4),\n *   keyCertSign             (5),\n *   cRLSign                 (6),\n *   encipherOnly            (7),\n *   decipherOnly            (8)\n * }\n *\n * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }\n * BasicConstraints ::= SEQUENCE {\n *   cA                      BOOLEAN DEFAULT FALSE,\n *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL\n * }\n *\n * subjectAltName EXTENSION ::= {\n *   SYNTAX GeneralNames\n *   IDENTIFIED BY id-ce-subjectAltName\n * }\n *\n * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\n *\n * GeneralName ::= CHOICE {\n *   otherName      [0] INSTANCE OF OTHER-NAME,\n *   rfc822Name     [1] IA5String,\n *   dNSName        [2] IA5String,\n *   x400Address    [3] ORAddress,\n *   directoryName  [4] Name,\n *   ediPartyName   [5] EDIPartyName,\n *   uniformResourceIdentifier [6] IA5String,\n *   IPAddress      [7] OCTET STRING,\n *   registeredID   [8] OBJECT IDENTIFIER\n * }\n *\n * OTHER-NAME ::= TYPE-IDENTIFIER\n *\n * EDIPartyName ::= SEQUENCE {\n *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,\n *   partyName    [1] DirectoryString {ub-name}\n * }\n *\n * @param exts the extensions ASN.1 with extension sequences to parse.\n *\n * @return the array.\n */\npki.certificateExtensionsFromAsn1 = function(exts) {\n  var rval = [];\n  for(var i = 0; i < exts.value.length; ++i) {\n    // get extension sequence\n    var extseq = exts.value[i];\n    for(var ei = 0; ei < extseq.value.length; ++ei) {\n      rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Parses a single certificate extension from ASN.1.\n *\n * @param ext the extension in ASN.1 format.\n *\n * @return the parsed extension as an object.\n */\npki.certificateExtensionFromAsn1 = function(ext) {\n  // an extension has:\n  // [0] extnID      OBJECT IDENTIFIER\n  // [1] critical    BOOLEAN DEFAULT FALSE\n  // [2] extnValue   OCTET STRING\n  var e = {};\n  e.id = asn1.derToOid(ext.value[0].value);\n  e.critical = false;\n  if(ext.value[1].type === asn1.Type.BOOLEAN) {\n    e.critical = (ext.value[1].value.charCodeAt(0) !== 0x00);\n    e.value = ext.value[2].value;\n  } else {\n    e.value = ext.value[1].value;\n  }\n  // if the oid is known, get its name\n  if(e.id in oids) {\n    e.name = oids[e.id];\n\n    // handle key usage\n    if(e.name === 'keyUsage') {\n      // get value as BIT STRING\n      var ev = asn1.fromDer(e.value);\n      var b2 = 0x00;\n      var b3 = 0x00;\n      if(ev.value.length > 1) {\n        // skip first byte, just indicates unused bits which\n        // will be padded with 0s anyway\n        // get bytes with flag bits\n        b2 = ev.value.charCodeAt(1);\n        b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;\n      }\n      // set flags\n      e.digitalSignature = (b2 & 0x80) === 0x80;\n      e.nonRepudiation = (b2 & 0x40) === 0x40;\n      e.keyEncipherment = (b2 & 0x20) === 0x20;\n      e.dataEncipherment = (b2 & 0x10) === 0x10;\n      e.keyAgreement = (b2 & 0x08) === 0x08;\n      e.keyCertSign = (b2 & 0x04) === 0x04;\n      e.cRLSign = (b2 & 0x02) === 0x02;\n      e.encipherOnly = (b2 & 0x01) === 0x01;\n      e.decipherOnly = (b3 & 0x80) === 0x80;\n    } else if(e.name === 'basicConstraints') {\n      // handle basic constraints\n      // get value as SEQUENCE\n      var ev = asn1.fromDer(e.value);\n      // get cA BOOLEAN flag (defaults to false)\n      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {\n        e.cA = (ev.value[0].value.charCodeAt(0) !== 0x00);\n      } else {\n        e.cA = false;\n      }\n      // get path length constraint\n      var value = null;\n      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {\n        value = ev.value[0].value;\n      } else if(ev.value.length > 1) {\n        value = ev.value[1].value;\n      }\n      if(value !== null) {\n        e.pathLenConstraint = asn1.derToInteger(value);\n      }\n    } else if(e.name === 'extKeyUsage') {\n      // handle extKeyUsage\n      // value is a SEQUENCE of OIDs\n      var ev = asn1.fromDer(e.value);\n      for(var vi = 0; vi < ev.value.length; ++vi) {\n        var oid = asn1.derToOid(ev.value[vi].value);\n        if(oid in oids) {\n          e[oids[oid]] = true;\n        } else {\n          e[oid] = true;\n        }\n      }\n    } else if(e.name === 'nsCertType') {\n      // handle nsCertType\n      // get value as BIT STRING\n      var ev = asn1.fromDer(e.value);\n      var b2 = 0x00;\n      if(ev.value.length > 1) {\n        // skip first byte, just indicates unused bits which\n        // will be padded with 0s anyway\n        // get bytes with flag bits\n        b2 = ev.value.charCodeAt(1);\n      }\n      // set flags\n      e.client = (b2 & 0x80) === 0x80;\n      e.server = (b2 & 0x40) === 0x40;\n      e.email = (b2 & 0x20) === 0x20;\n      e.objsign = (b2 & 0x10) === 0x10;\n      e.reserved = (b2 & 0x08) === 0x08;\n      e.sslCA = (b2 & 0x04) === 0x04;\n      e.emailCA = (b2 & 0x02) === 0x02;\n      e.objCA = (b2 & 0x01) === 0x01;\n    } else if(\n      e.name === 'subjectAltName' ||\n      e.name === 'issuerAltName') {\n      // handle subjectAltName/issuerAltName\n      e.altNames = [];\n\n      // ev is a SYNTAX SEQUENCE\n      var gn;\n      var ev = asn1.fromDer(e.value);\n      for(var n = 0; n < ev.value.length; ++n) {\n        // get GeneralName\n        gn = ev.value[n];\n\n        var altName = {\n          type: gn.type,\n          value: gn.value\n        };\n        e.altNames.push(altName);\n\n        // Note: Support for types 1,2,6,7,8\n        switch(gn.type) {\n          // rfc822Name\n          case 1:\n          // dNSName\n          case 2:\n          // uniformResourceIdentifier (URI)\n          case 6:\n            break;\n          // IPAddress\n          case 7:\n            // convert to IPv4/IPv6 string representation\n            altName.ip = forge.util.bytesToIP(gn.value);\n            break;\n          // registeredID\n          case 8:\n            altName.oid = asn1.derToOid(gn.value);\n            break;\n          default:\n            // unsupported\n        }\n      }\n    } else if(e.name === 'subjectKeyIdentifier') {\n      // value is an OCTETSTRING w/the hash of the key-type specific\n      // public key structure (eg: RSAPublicKey)\n      var ev = asn1.fromDer(e.value);\n      e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);\n    }\n  }\n  return e;\n};\n\n/**\n * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.\n *\n * Note: If the certification request is to be verified then compute hash\n * should be set to true. There is currently no implementation for converting\n * a certificate back to ASN.1 so the CertificationRequestInfo part of the\n * ASN.1 object needs to be scanned before the csr object is created.\n *\n * @param obj the asn1 representation of a PKCS#10 certification request (CSR).\n * @param computeHash true to compute the hash for verification.\n *\n * @return the certification request (CSR).\n */\npki.certificationRequestFromAsn1 = function(obj, computeHash) {\n  // validate certification request and capture data\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, certificationRequestValidator, capture, errors)) {\n    var error = new Error('Cannot read PKCS#10 certificate request. ' +\n      'ASN.1 object is not a PKCS#10 CertificationRequest.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get oid\n  var oid = asn1.derToOid(capture.publicKeyOid);\n  if(oid !== pki.oids.rsaEncryption) {\n    throw new Error('Cannot read public key. OID is not RSA.');\n  }\n\n  // create certification request\n  var csr = pki.createCertificationRequest();\n  csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;\n  csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);\n  csr.signatureParameters = _readSignatureParameters(\n    csr.signatureOid, capture.csrSignatureParams, true);\n  csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);\n  csr.siginfo.parameters = _readSignatureParameters(\n    csr.siginfo.algorithmOid, capture.csrSignatureParams, false);\n  csr.signature = capture.csrSignature;\n\n  // keep CertificationRequestInfo to preserve signature when exporting\n  csr.certificationRequestInfo = capture.certificationRequestInfo;\n\n  if(computeHash) {\n    // create digest for OID signature type\n    csr.md = _createSignatureDigest({\n      signatureOid: csr.signatureOid,\n      type: 'certification request'\n    });\n\n    // produce DER formatted CertificationRequestInfo and digest it\n    var bytes = asn1.toDer(csr.certificationRequestInfo);\n    csr.md.update(bytes.getBytes());\n  }\n\n  // handle subject, build subject message digest\n  var smd = forge.md.sha1.create();\n  csr.subject.getField = function(sn) {\n    return _getAttribute(csr.subject, sn);\n  };\n  csr.subject.addField = function(attr) {\n    _fillMissingFields([attr]);\n    csr.subject.attributes.push(attr);\n  };\n  csr.subject.attributes = pki.RDNAttributesAsArray(\n    capture.certificationRequestInfoSubject, smd);\n  csr.subject.hash = smd.digest().toHex();\n\n  // convert RSA public key from ASN.1\n  csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);\n\n  // convert attributes from ASN.1\n  csr.getAttribute = function(sn) {\n    return _getAttribute(csr, sn);\n  };\n  csr.addAttribute = function(attr) {\n    _fillMissingFields([attr]);\n    csr.attributes.push(attr);\n  };\n  csr.attributes = pki.CRIAttributesAsArray(\n    capture.certificationRequestInfoAttributes || []);\n\n  return csr;\n};\n\n/**\n * Creates an empty certification request (a CSR or certificate signing\n * request). Once created, its public key and attributes can be set and then\n * it can be signed.\n *\n * @return the empty certification request.\n */\npki.createCertificationRequest = function() {\n  var csr = {};\n  csr.version = 0x00;\n  csr.signatureOid = null;\n  csr.signature = null;\n  csr.siginfo = {};\n  csr.siginfo.algorithmOid = null;\n\n  csr.subject = {};\n  csr.subject.getField = function(sn) {\n    return _getAttribute(csr.subject, sn);\n  };\n  csr.subject.addField = function(attr) {\n    _fillMissingFields([attr]);\n    csr.subject.attributes.push(attr);\n  };\n  csr.subject.attributes = [];\n  csr.subject.hash = null;\n\n  csr.publicKey = null;\n  csr.attributes = [];\n  csr.getAttribute = function(sn) {\n    return _getAttribute(csr, sn);\n  };\n  csr.addAttribute = function(attr) {\n    _fillMissingFields([attr]);\n    csr.attributes.push(attr);\n  };\n  csr.md = null;\n\n  /**\n   * Sets the subject of this certification request.\n   *\n   * @param attrs the array of subject attributes to use.\n   */\n  csr.setSubject = function(attrs) {\n    // set new attributes\n    _fillMissingFields(attrs);\n    csr.subject.attributes = attrs;\n    csr.subject.hash = null;\n  };\n\n  /**\n   * Sets the attributes of this certification request.\n   *\n   * @param attrs the array of attributes to use.\n   */\n  csr.setAttributes = function(attrs) {\n    // set new attributes\n    _fillMissingFields(attrs);\n    csr.attributes = attrs;\n  };\n\n  /**\n   * Signs this certification request using the given private key.\n   *\n   * @param key the private key to sign with.\n   * @param md the message digest object to use (defaults to forge.md.sha1).\n   */\n  csr.sign = function(key, md) {\n    // TODO: get signature OID from private key\n    csr.md = md || forge.md.sha1.create();\n    var algorithmOid = oids[csr.md.algorithm + 'WithRSAEncryption'];\n    if(!algorithmOid) {\n      var error = new Error('Could not compute certification request digest. ' +\n        'Unknown message digest algorithm OID.');\n      error.algorithm = csr.md.algorithm;\n      throw error;\n    }\n    csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;\n\n    // get CertificationRequestInfo, convert to DER\n    csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);\n    var bytes = asn1.toDer(csr.certificationRequestInfo);\n\n    // digest and sign\n    csr.md.update(bytes.getBytes());\n    csr.signature = key.sign(csr.md);\n  };\n\n  /**\n   * Attempts verify the signature on the passed certification request using\n   * its public key.\n   *\n   * A CSR that has been exported to a file in PEM format can be verified using\n   * OpenSSL using this command:\n   *\n   * openssl req -in <the-csr-pem-file> -verify -noout -text\n   *\n   * @return true if verified, false if not.\n   */\n  csr.verify = function() {\n    var rval = false;\n\n    var md = csr.md;\n    if(md === null) {\n      md = _createSignatureDigest({\n        signatureOid: csr.signatureOid,\n        type: 'certification request'\n      });\n\n      // produce DER formatted CertificationRequestInfo and digest it\n      var cri = csr.certificationRequestInfo ||\n        pki.getCertificationRequestInfo(csr);\n      var bytes = asn1.toDer(cri);\n      md.update(bytes.getBytes());\n    }\n\n    if(md !== null) {\n      rval = _verifySignature({\n        certificate: csr, md: md, signature: csr.signature\n      });\n    }\n\n    return rval;\n  };\n\n  return csr;\n};\n\n/**\n * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.\n *\n * @param obj the subject or issuer (distinguished name).\n *\n * @return the ASN.1 RDNSequence.\n */\nfunction _dnToAsn1(obj) {\n  // create an empty RDNSequence\n  var rval = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n\n  // iterate over attributes\n  var attr, set;\n  var attrs = obj.attributes;\n  for(var i = 0; i < attrs.length; ++i) {\n    attr = attrs[i];\n    var value = attr.value;\n\n    // reuse tag class for attribute value if available\n    var valueTagClass = asn1.Type.PRINTABLESTRING;\n    if('valueTagClass' in attr) {\n      valueTagClass = attr.valueTagClass;\n\n      if(valueTagClass === asn1.Type.UTF8) {\n        value = forge.util.encodeUtf8(value);\n      }\n      // FIXME: handle more encodings\n    }\n\n    // create a RelativeDistinguishedName set\n    // each value in the set is an AttributeTypeAndValue first\n    // containing the type (an OID) and second the value\n    set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // AttributeType\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(attr.type).getBytes()),\n        // AttributeValue\n        asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)\n      ])\n    ]);\n    rval.value.push(set);\n  }\n\n  return rval;\n}\n\n/**\n * Gets all printable attributes (typically of an issuer or subject) in a\n * simplified JSON format for display.\n *\n * @param attrs the attributes.\n *\n * @return the JSON for display.\n */\nfunction _getAttributesAsJson(attrs) {\n  var rval = {};\n  for(var i = 0; i < attrs.length; ++i) {\n    var attr = attrs[i];\n    if(attr.shortName && (\n      attr.valueTagClass === asn1.Type.UTF8 ||\n      attr.valueTagClass === asn1.Type.PRINTABLESTRING ||\n      attr.valueTagClass === asn1.Type.IA5STRING)) {\n      var value = attr.value;\n      if(attr.valueTagClass === asn1.Type.UTF8) {\n        value = forge.util.encodeUtf8(attr.value);\n      }\n      if(!(attr.shortName in rval)) {\n        rval[attr.shortName] = value;\n      } else if(forge.util.isArray(rval[attr.shortName])) {\n        rval[attr.shortName].push(value);\n      } else {\n        rval[attr.shortName] = [rval[attr.shortName], value];\n      }\n    }\n  }\n  return rval;\n}\n\n/**\n * Fills in missing fields in attributes.\n *\n * @param attrs the attributes to fill missing fields in.\n */\nfunction _fillMissingFields(attrs) {\n  var attr;\n  for(var i = 0; i < attrs.length; ++i) {\n    attr = attrs[i];\n\n    // populate missing name\n    if(typeof attr.name === 'undefined') {\n      if(attr.type && attr.type in pki.oids) {\n        attr.name = pki.oids[attr.type];\n      } else if(attr.shortName && attr.shortName in _shortNames) {\n        attr.name = pki.oids[_shortNames[attr.shortName]];\n      }\n    }\n\n    // populate missing type (OID)\n    if(typeof attr.type === 'undefined') {\n      if(attr.name && attr.name in pki.oids) {\n        attr.type = pki.oids[attr.name];\n      } else {\n        var error = new Error('Attribute type not specified.');\n        error.attribute = attr;\n        throw error;\n      }\n    }\n\n    // populate missing shortname\n    if(typeof attr.shortName === 'undefined') {\n      if(attr.name && attr.name in _shortNames) {\n        attr.shortName = _shortNames[attr.name];\n      }\n    }\n\n    // convert extensions to value\n    if(attr.type === oids.extensionRequest) {\n      attr.valueConstructed = true;\n      attr.valueTagClass = asn1.Type.SEQUENCE;\n      if(!attr.value && attr.extensions) {\n        attr.value = [];\n        for(var ei = 0; ei < attr.extensions.length; ++ei) {\n          attr.value.push(pki.certificateExtensionToAsn1(\n            _fillMissingExtensionFields(attr.extensions[ei])));\n        }\n      }\n    }\n\n    if(typeof attr.value === 'undefined') {\n      var error = new Error('Attribute value not specified.');\n      error.attribute = attr;\n      throw error;\n    }\n  }\n}\n\n/**\n * Fills in missing fields in certificate extensions.\n *\n * @param e the extension.\n * @param [options] the options to use.\n *          [cert] the certificate the extensions are for.\n *\n * @return the extension.\n */\nfunction _fillMissingExtensionFields(e, options) {\n  options = options || {};\n\n  // populate missing name\n  if(typeof e.name === 'undefined') {\n    if(e.id && e.id in pki.oids) {\n      e.name = pki.oids[e.id];\n    }\n  }\n\n  // populate missing id\n  if(typeof e.id === 'undefined') {\n    if(e.name && e.name in pki.oids) {\n      e.id = pki.oids[e.name];\n    } else {\n      var error = new Error('Extension ID not specified.');\n      error.extension = e;\n      throw error;\n    }\n  }\n\n  if(typeof e.value !== 'undefined') {\n    return e;\n  }\n\n  // handle missing value:\n\n  // value is a BIT STRING\n  if(e.name === 'keyUsage') {\n    // build flags\n    var unused = 0;\n    var b2 = 0x00;\n    var b3 = 0x00;\n    if(e.digitalSignature) {\n      b2 |= 0x80;\n      unused = 7;\n    }\n    if(e.nonRepudiation) {\n      b2 |= 0x40;\n      unused = 6;\n    }\n    if(e.keyEncipherment) {\n      b2 |= 0x20;\n      unused = 5;\n    }\n    if(e.dataEncipherment) {\n      b2 |= 0x10;\n      unused = 4;\n    }\n    if(e.keyAgreement) {\n      b2 |= 0x08;\n      unused = 3;\n    }\n    if(e.keyCertSign) {\n      b2 |= 0x04;\n      unused = 2;\n    }\n    if(e.cRLSign) {\n      b2 |= 0x02;\n      unused = 1;\n    }\n    if(e.encipherOnly) {\n      b2 |= 0x01;\n      unused = 0;\n    }\n    if(e.decipherOnly) {\n      b3 |= 0x80;\n      unused = 7;\n    }\n\n    // create bit string\n    var value = String.fromCharCode(unused);\n    if(b3 !== 0) {\n      value += String.fromCharCode(b2) + String.fromCharCode(b3);\n    } else if(b2 !== 0) {\n      value += String.fromCharCode(b2);\n    }\n    e.value = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);\n  } else if(e.name === 'basicConstraints') {\n    // basicConstraints is a SEQUENCE\n    e.value = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n    // cA BOOLEAN flag defaults to false\n    if(e.cA) {\n      e.value.value.push(asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,\n        String.fromCharCode(0xFF)));\n    }\n    if('pathLenConstraint' in e) {\n      e.value.value.push(asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        asn1.integerToDer(e.pathLenConstraint).getBytes()));\n    }\n  } else if(e.name === 'extKeyUsage') {\n    // extKeyUsage is a SEQUENCE of OIDs\n    e.value = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n    var seq = e.value.value;\n    for(var key in e) {\n      if(e[key] !== true) {\n        continue;\n      }\n      // key is name in OID map\n      if(key in oids) {\n        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,\n          false, asn1.oidToDer(oids[key]).getBytes()));\n      } else if(key.indexOf('.') !== -1) {\n        // assume key is an OID\n        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,\n          false, asn1.oidToDer(key).getBytes()));\n      }\n    }\n  } else if(e.name === 'nsCertType') {\n    // nsCertType is a BIT STRING\n    // build flags\n    var unused = 0;\n    var b2 = 0x00;\n\n    if(e.client) {\n      b2 |= 0x80;\n      unused = 7;\n    }\n    if(e.server) {\n      b2 |= 0x40;\n      unused = 6;\n    }\n    if(e.email) {\n      b2 |= 0x20;\n      unused = 5;\n    }\n    if(e.objsign) {\n      b2 |= 0x10;\n      unused = 4;\n    }\n    if(e.reserved) {\n      b2 |= 0x08;\n      unused = 3;\n    }\n    if(e.sslCA) {\n      b2 |= 0x04;\n      unused = 2;\n    }\n    if(e.emailCA) {\n      b2 |= 0x02;\n      unused = 1;\n    }\n    if(e.objCA) {\n      b2 |= 0x01;\n      unused = 0;\n    }\n\n    // create bit string\n    var value = String.fromCharCode(unused);\n    if(b2 !== 0) {\n      value += String.fromCharCode(b2);\n    }\n    e.value = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);\n  } else if(e.name === 'subjectAltName' || e.name === 'issuerAltName') {\n    // SYNTAX SEQUENCE\n    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n\n    var altName;\n    for(var n = 0; n < e.altNames.length; ++n) {\n      altName = e.altNames[n];\n      var value = altName.value;\n      // handle IP\n      if(altName.type === 7 && altName.ip) {\n        value = forge.util.bytesFromIP(altName.ip);\n        if(value === null) {\n          var error = new Error(\n            'Extension \"ip\" value is not a valid IPv4 or IPv6 address.');\n          error.extension = e;\n          throw error;\n        }\n      } else if(altName.type === 8) {\n        // handle OID\n        if(altName.oid) {\n          value = asn1.oidToDer(asn1.oidToDer(altName.oid));\n        } else {\n          // deprecated ... convert value to OID\n          value = asn1.oidToDer(value);\n        }\n      }\n      e.value.value.push(asn1.create(\n        asn1.Class.CONTEXT_SPECIFIC, altName.type, false,\n        value));\n    }\n  } else if(e.name === 'nsComment' && options.cert) {\n    // sanity check value is ASCII (req'd) and not too big\n    if(!(/^[\\x00-\\x7F]*$/.test(e.comment)) ||\n      (e.comment.length < 1) || (e.comment.length > 128)) {\n      throw new Error('Invalid \"nsComment\" content.');\n    }\n    // IA5STRING opaque comment\n    e.value = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.IA5STRING, false, e.comment);\n  } else if(e.name === 'subjectKeyIdentifier' && options.cert) {\n    var ski = options.cert.generateSubjectKeyIdentifier();\n    e.subjectKeyIdentifier = ski.toHex();\n    // OCTETSTRING w/digest\n    e.value = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ski.getBytes());\n  } else if(e.name === 'authorityKeyIdentifier' && options.cert) {\n    // SYNTAX SEQUENCE\n    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n    var seq = e.value.value;\n\n    if(e.keyIdentifier) {\n      var keyIdentifier = (e.keyIdentifier === true ?\n        options.cert.generateSubjectKeyIdentifier().getBytes() :\n        e.keyIdentifier);\n      seq.push(\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier));\n    }\n\n    if(e.authorityCertIssuer) {\n      var authorityCertIssuer = [\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [\n          _dnToAsn1(e.authorityCertIssuer === true ?\n            options.cert.issuer : e.authorityCertIssuer)\n        ])\n      ];\n      seq.push(\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer));\n    }\n\n    if(e.serialNumber) {\n      var serialNumber = forge.util.hexToBytes(e.serialNumber === true ?\n        options.cert.serialNumber : e.serialNumber);\n      seq.push(\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber));\n    }\n  } else if(e.name === 'cRLDistributionPoints') {\n    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n    var seq = e.value.value;\n\n    // Create sub SEQUENCE of DistributionPointName\n    var subSeq = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n\n    // Create fullName CHOICE\n    var fullNameGeneralNames = asn1.create(\n      asn1.Class.CONTEXT_SPECIFIC, 0, true, []);\n    var altName;\n    for(var n = 0; n < e.altNames.length; ++n) {\n      altName = e.altNames[n];\n      var value = altName.value;\n      // handle IP\n      if(altName.type === 7 && altName.ip) {\n        value = forge.util.bytesFromIP(altName.ip);\n        if(value === null) {\n          var error = new Error(\n            'Extension \"ip\" value is not a valid IPv4 or IPv6 address.');\n          error.extension = e;\n          throw error;\n        }\n      } else if(altName.type === 8) {\n        // handle OID\n        if(altName.oid) {\n          value = asn1.oidToDer(asn1.oidToDer(altName.oid));\n        } else {\n          // deprecated ... convert value to OID\n          value = asn1.oidToDer(value);\n        }\n      }\n      fullNameGeneralNames.value.push(asn1.create(\n        asn1.Class.CONTEXT_SPECIFIC, altName.type, false,\n        value));\n    }\n\n    // Add to the parent SEQUENCE\n    subSeq.value.push(asn1.create(\n      asn1.Class.CONTEXT_SPECIFIC, 0, true, [fullNameGeneralNames]));\n    seq.push(subSeq);\n  }\n\n  // ensure value has been defined by now\n  if(typeof e.value === 'undefined') {\n    var error = new Error('Extension value not specified.');\n    error.extension = e;\n    throw error;\n  }\n\n  return e;\n}\n\n/**\n * Convert signature parameters object to ASN.1\n *\n * @param {String} oid Signature algorithm OID\n * @param params The signature parametrs object\n * @return ASN.1 object representing signature parameters\n */\nfunction _signatureParametersToAsn1(oid, params) {\n  switch(oid) {\n    case oids['RSASSA-PSS']:\n      var parts = [];\n\n      if(params.hash.algorithmOid !== undefined) {\n        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n              asn1.oidToDer(params.hash.algorithmOid).getBytes()),\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n          ])\n        ]));\n      }\n\n      if(params.mgf.algorithmOid !== undefined) {\n        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n              asn1.oidToDer(params.mgf.algorithmOid).getBytes()),\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n                asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()),\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n            ])\n          ])\n        ]));\n      }\n\n      if(params.saltLength !== undefined) {\n        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n            asn1.integerToDer(params.saltLength).getBytes())\n        ]));\n      }\n\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);\n\n    default:\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '');\n  }\n}\n\n/**\n * Converts a certification request's attributes to an ASN.1 set of\n * CRIAttributes.\n *\n * @param csr certification request.\n *\n * @return the ASN.1 set of CRIAttributes.\n */\nfunction _CRIAttributesToAsn1(csr) {\n  // create an empty context-specific container\n  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);\n\n  // no attributes, return empty container\n  if(csr.attributes.length === 0) {\n    return rval;\n  }\n\n  // each attribute has a sequence with a type and a set of values\n  var attrs = csr.attributes;\n  for(var i = 0; i < attrs.length; ++i) {\n    var attr = attrs[i];\n    var value = attr.value;\n\n    // reuse tag class for attribute value if available\n    var valueTagClass = asn1.Type.UTF8;\n    if('valueTagClass' in attr) {\n      valueTagClass = attr.valueTagClass;\n    }\n    if(valueTagClass === asn1.Type.UTF8) {\n      value = forge.util.encodeUtf8(value);\n    }\n    var valueConstructed = false;\n    if('valueConstructed' in attr) {\n      valueConstructed = attr.valueConstructed;\n    }\n    // FIXME: handle more encodings\n\n    // create a RelativeDistinguishedName set\n    // each value in the set is an AttributeTypeAndValue first\n    // containing the type (an OID) and second the value\n    var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // AttributeType\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(attr.type).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n        // AttributeValue\n        asn1.create(\n          asn1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)\n      ])\n    ]);\n    rval.value.push(seq);\n  }\n\n  return rval;\n}\n\nvar jan_1_1950 = new Date('1950-01-01T00:00:00Z');\nvar jan_1_2050 = new Date('2050-01-01T00:00:00Z');\n\n/**\n * Converts a Date object to ASN.1\n * Handles the different format before and after 1st January 2050\n *\n * @param date date object.\n *\n * @return the ASN.1 object representing the date.\n */\nfunction _dateToAsn1(date) {\n  if(date >= jan_1_1950 && date < jan_1_2050) {\n    return asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,\n      asn1.dateToUtcTime(date));\n  } else {\n    return asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false,\n      asn1.dateToGeneralizedTime(date));\n  }\n}\n\n/**\n * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.\n *\n * @param cert the certificate.\n *\n * @return the asn1 TBSCertificate.\n */\npki.getTBSCertificate = function(cert) {\n  // TBSCertificate\n  var notBefore = _dateToAsn1(cert.validity.notBefore);\n  var notAfter = _dateToAsn1(cert.validity.notAfter);\n  var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version\n    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n      // integer\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        asn1.integerToDer(cert.version).getBytes())\n    ]),\n    // serialNumber\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      forge.util.hexToBytes(cert.serialNumber)),\n    // signature\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()),\n      // parameters\n      _signatureParametersToAsn1(\n        cert.siginfo.algorithmOid, cert.siginfo.parameters)\n    ]),\n    // issuer\n    _dnToAsn1(cert.issuer),\n    // validity\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      notBefore,\n      notAfter\n    ]),\n    // subject\n    _dnToAsn1(cert.subject),\n    // SubjectPublicKeyInfo\n    pki.publicKeyToAsn1(cert.publicKey)\n  ]);\n\n  if(cert.issuer.uniqueId) {\n    // issuerUniqueID (optional)\n    tbs.value.push(\n      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,\n          // TODO: support arbitrary bit length ids\n          String.fromCharCode(0x00) +\n          cert.issuer.uniqueId\n        )\n      ])\n    );\n  }\n  if(cert.subject.uniqueId) {\n    // subjectUniqueID (optional)\n    tbs.value.push(\n      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,\n          // TODO: support arbitrary bit length ids\n          String.fromCharCode(0x00) +\n          cert.subject.uniqueId\n        )\n      ])\n    );\n  }\n\n  if(cert.extensions.length > 0) {\n    // extensions (optional)\n    tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));\n  }\n\n  return tbs;\n};\n\n/**\n * Gets the ASN.1 CertificationRequestInfo part of a\n * PKCS#10 CertificationRequest.\n *\n * @param csr the certification request.\n *\n * @return the asn1 CertificationRequestInfo.\n */\npki.getCertificationRequestInfo = function(csr) {\n  // CertificationRequestInfo\n  var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(csr.version).getBytes()),\n    // subject\n    _dnToAsn1(csr.subject),\n    // SubjectPublicKeyInfo\n    pki.publicKeyToAsn1(csr.publicKey),\n    // attributes\n    _CRIAttributesToAsn1(csr)\n  ]);\n\n  return cri;\n};\n\n/**\n * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.\n *\n * @param dn the DistinguishedName.\n *\n * @return the asn1 representation of a DistinguishedName.\n */\npki.distinguishedNameToAsn1 = function(dn) {\n  return _dnToAsn1(dn);\n};\n\n/**\n * Converts an X.509v3 RSA certificate to an ASN.1 object.\n *\n * @param cert the certificate.\n *\n * @return the asn1 representation of an X.509v3 RSA certificate.\n */\npki.certificateToAsn1 = function(cert) {\n  // prefer cached TBSCertificate over generating one\n  var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert);\n\n  // Certificate\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // TBSCertificate\n    tbsCertificate,\n    // AlgorithmIdentifier (signature algorithm)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(cert.signatureOid).getBytes()),\n      // parameters\n      _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)\n    ]),\n    // SignatureValue\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,\n      String.fromCharCode(0x00) + cert.signature)\n  ]);\n};\n\n/**\n * Converts X.509v3 certificate extensions to ASN.1.\n *\n * @param exts the extensions to convert.\n *\n * @return the extensions in ASN.1 format.\n */\npki.certificateExtensionsToAsn1 = function(exts) {\n  // create top-level extension container\n  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);\n\n  // create extension sequence (stores a sequence for each extension)\n  var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  rval.value.push(seq);\n\n  for(var i = 0; i < exts.length; ++i) {\n    seq.value.push(pki.certificateExtensionToAsn1(exts[i]));\n  }\n\n  return rval;\n};\n\n/**\n * Converts a single certificate extension to ASN.1.\n *\n * @param ext the extension to convert.\n *\n * @return the extension in ASN.1 format.\n */\npki.certificateExtensionToAsn1 = function(ext) {\n  // create a sequence for each extension\n  var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n\n  // extnID (OID)\n  extseq.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n    asn1.oidToDer(ext.id).getBytes()));\n\n  // critical defaults to false\n  if(ext.critical) {\n    // critical BOOLEAN DEFAULT FALSE\n    extseq.value.push(asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,\n      String.fromCharCode(0xFF)));\n  }\n\n  var value = ext.value;\n  if(typeof ext.value !== 'string') {\n    // value is asn.1\n    value = asn1.toDer(value).getBytes();\n  }\n\n  // extnValue (OCTET STRING)\n  extseq.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, value));\n\n  return extseq;\n};\n\n/**\n * Converts a PKCS#10 certification request to an ASN.1 object.\n *\n * @param csr the certification request.\n *\n * @return the asn1 representation of a certification request.\n */\npki.certificationRequestToAsn1 = function(csr) {\n  // prefer cached CertificationRequestInfo over generating one\n  var cri = csr.certificationRequestInfo ||\n    pki.getCertificationRequestInfo(csr);\n\n  // Certificate\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // CertificationRequestInfo\n    cri,\n    // AlgorithmIdentifier (signature algorithm)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(csr.signatureOid).getBytes()),\n      // parameters\n      _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)\n    ]),\n    // signature\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,\n      String.fromCharCode(0x00) + csr.signature)\n  ]);\n};\n\n/**\n * Creates a CA store.\n *\n * @param certs an optional array of certificate objects or PEM-formatted\n *          certificate strings to add to the CA store.\n *\n * @return the CA store.\n */\npki.createCaStore = function(certs) {\n  // create CA store\n  var caStore = {\n    // stored certificates\n    certs: {}\n  };\n\n  /**\n   * Gets the certificate that issued the passed certificate or its\n   * 'parent'.\n   *\n   * @param cert the certificate to get the parent for.\n   *\n   * @return the parent certificate or null if none was found.\n   */\n  caStore.getIssuer = function(cert) {\n    var rval = getBySubject(cert.issuer);\n\n    // see if there are multiple matches\n    /*if(forge.util.isArray(rval)) {\n      // TODO: resolve multiple matches by checking\n      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.\n      // FIXME: or alternatively do authority key mapping\n      // if possible (X.509v1 certs can't work?)\n      throw new Error('Resolving multiple issuer matches not implemented yet.');\n    }*/\n\n    return rval;\n  };\n\n  /**\n   * Adds a trusted certificate to the store.\n   *\n   * @param cert the certificate to add as a trusted certificate (either a\n   *          pki.certificate object or a PEM-formatted certificate).\n   */\n  caStore.addCertificate = function(cert) {\n    // convert from pem if necessary\n    if(typeof cert === 'string') {\n      cert = forge.pki.certificateFromPem(cert);\n    }\n\n    ensureSubjectHasHash(cert.subject);\n\n    if(!caStore.hasCertificate(cert)) { // avoid duplicate certificates in store\n      if(cert.subject.hash in caStore.certs) {\n        // subject hash already exists, append to array\n        var tmp = caStore.certs[cert.subject.hash];\n        if(!forge.util.isArray(tmp)) {\n          tmp = [tmp];\n        }\n        tmp.push(cert);\n        caStore.certs[cert.subject.hash] = tmp;\n      } else {\n        caStore.certs[cert.subject.hash] = cert;\n      }\n    }\n  };\n\n  /**\n   * Checks to see if the given certificate is in the store.\n   *\n   * @param cert the certificate to check (either a pki.certificate or a\n   *          PEM-formatted certificate).\n   *\n   * @return true if the certificate is in the store, false if not.\n   */\n  caStore.hasCertificate = function(cert) {\n    // convert from pem if necessary\n    if(typeof cert === 'string') {\n      cert = forge.pki.certificateFromPem(cert);\n    }\n\n    var match = getBySubject(cert.subject);\n    if(!match) {\n      return false;\n    }\n    if(!forge.util.isArray(match)) {\n      match = [match];\n    }\n    // compare DER-encoding of certificates\n    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();\n    for(var i = 0; i < match.length; ++i) {\n      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();\n      if(der1 === der2) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Lists all of the certificates kept in the store.\n   *\n   * @return an array of all of the pki.certificate objects in the store.\n   */\n  caStore.listAllCertificates = function() {\n    var certList = [];\n\n    for(var hash in caStore.certs) {\n      if(caStore.certs.hasOwnProperty(hash)) {\n        var value = caStore.certs[hash];\n        if(!forge.util.isArray(value)) {\n          certList.push(value);\n        } else {\n          for(var i = 0; i < value.length; ++i) {\n            certList.push(value[i]);\n          }\n        }\n      }\n    }\n\n    return certList;\n  };\n\n  /**\n   * Removes a certificate from the store.\n   *\n   * @param cert the certificate to remove (either a pki.certificate or a\n   *          PEM-formatted certificate).\n   *\n   * @return the certificate that was removed or null if the certificate\n   *           wasn't in store.\n   */\n  caStore.removeCertificate = function(cert) {\n    var result;\n\n    // convert from pem if necessary\n    if(typeof cert === 'string') {\n      cert = forge.pki.certificateFromPem(cert);\n    }\n    ensureSubjectHasHash(cert.subject);\n    if(!caStore.hasCertificate(cert)) {\n      return null;\n    }\n\n    var match = getBySubject(cert.subject);\n\n    if(!forge.util.isArray(match)) {\n      result = caStore.certs[cert.subject.hash];\n      delete caStore.certs[cert.subject.hash];\n      return result;\n    }\n\n    // compare DER-encoding of certificates\n    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();\n    for(var i = 0; i < match.length; ++i) {\n      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();\n      if(der1 === der2) {\n        result = match[i];\n        match.splice(i, 1);\n      }\n    }\n    if(match.length === 0) {\n      delete caStore.certs[cert.subject.hash];\n    }\n\n    return result;\n  };\n\n  function getBySubject(subject) {\n    ensureSubjectHasHash(subject);\n    return caStore.certs[subject.hash] || null;\n  }\n\n  function ensureSubjectHasHash(subject) {\n    // produce subject hash if it doesn't exist\n    if(!subject.hash) {\n      var md = forge.md.sha1.create();\n      subject.attributes = pki.RDNAttributesAsArray(_dnToAsn1(subject), md);\n      subject.hash = md.digest().toHex();\n    }\n  }\n\n  // auto-add passed in certs\n  if(certs) {\n    // parse PEM-formatted certificates as necessary\n    for(var i = 0; i < certs.length; ++i) {\n      var cert = certs[i];\n      caStore.addCertificate(cert);\n    }\n  }\n\n  return caStore;\n};\n\n/**\n * Certificate verification errors, based on TLS.\n */\npki.certificateError = {\n  bad_certificate: 'forge.pki.BadCertificate',\n  unsupported_certificate: 'forge.pki.UnsupportedCertificate',\n  certificate_revoked: 'forge.pki.CertificateRevoked',\n  certificate_expired: 'forge.pki.CertificateExpired',\n  certificate_unknown: 'forge.pki.CertificateUnknown',\n  unknown_ca: 'forge.pki.UnknownCertificateAuthority'\n};\n\n/**\n * Verifies a certificate chain against the given Certificate Authority store\n * with an optional custom verify callback.\n *\n * @param caStore a certificate store to verify against.\n * @param chain the certificate chain to verify, with the root or highest\n *          authority at the end (an array of certificates).\n * @param options a callback to be called for every certificate in the chain or\n *                  an object with:\n *                  verify a callback to be called for every certificate in the\n *                    chain\n *                  validityCheckDate the date against which the certificate\n *                    validity period should be checked. Pass null to not check\n *                    the validity period. By default, the current date is used.\n *\n * The verify callback has the following signature:\n *\n * verified - Set to true if certificate was verified, otherwise the\n *   pki.certificateError for why the certificate failed.\n * depth - The current index in the chain, where 0 is the end point's cert.\n * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous\n *   end point.\n *\n * The function returns true on success and on failure either the appropriate\n * pki.certificateError or an object with 'error' set to the appropriate\n * pki.certificateError and 'message' set to a custom error message.\n *\n * @return true if successful, error thrown if not.\n */\npki.verifyCertificateChain = function(caStore, chain, options) {\n  /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate\n    Section 6: Certification Path Validation\n    See inline parentheticals related to this particular implementation.\n\n    The primary goal of path validation is to verify the binding between\n    a subject distinguished name or a subject alternative name and subject\n    public key, as represented in the end entity certificate, based on the\n    public key of the trust anchor. This requires obtaining a sequence of\n    certificates that support that binding. That sequence should be provided\n    in the passed 'chain'. The trust anchor should be in the given CA\n    store. The 'end entity' certificate is the certificate provided by the\n    end point (typically a server) and is the first in the chain.\n\n    To meet this goal, the path validation process verifies, among other\n    things, that a prospective certification path (a sequence of n\n    certificates or a 'chain') satisfies the following conditions:\n\n    (a) for all x in {1, ..., n-1}, the subject of certificate x is\n          the issuer of certificate x+1;\n\n    (b) certificate 1 is issued by the trust anchor;\n\n    (c) certificate n is the certificate to be validated; and\n\n    (d) for all x in {1, ..., n}, the certificate was valid at the\n          time in question.\n\n    Note that here 'n' is index 0 in the chain and 1 is the last certificate\n    in the chain and it must be signed by a certificate in the connection's\n    CA store.\n\n    The path validation process also determines the set of certificate\n    policies that are valid for this path, based on the certificate policies\n    extension, policy mapping extension, policy constraints extension, and\n    inhibit any-policy extension.\n\n    Note: Policy mapping extension not supported (Not Required).\n\n    Note: If the certificate has an unsupported critical extension, then it\n    must be rejected.\n\n    Note: A certificate is self-issued if the DNs that appear in the subject\n    and issuer fields are identical and are not empty.\n\n    The path validation algorithm assumes the following seven inputs are\n    provided to the path processing logic. What this specific implementation\n    will use is provided parenthetically:\n\n    (a) a prospective certification path of length n (the 'chain')\n    (b) the current date/time: ('now').\n    (c) user-initial-policy-set: A set of certificate policy identifiers\n          naming the policies that are acceptable to the certificate user.\n          The user-initial-policy-set contains the special value any-policy\n          if the user is not concerned about certificate policy\n          (Not implemented. Any policy is accepted).\n    (d) trust anchor information, describing a CA that serves as a trust\n          anchor for the certification path. The trust anchor information\n          includes:\n\n      (1)  the trusted issuer name,\n      (2)  the trusted public key algorithm,\n      (3)  the trusted public key, and\n      (4)  optionally, the trusted public key parameters associated\n             with the public key.\n\n      (Trust anchors are provided via certificates in the CA store).\n\n      The trust anchor information may be provided to the path processing\n      procedure in the form of a self-signed certificate. The trusted anchor\n      information is trusted because it was delivered to the path processing\n      procedure by some trustworthy out-of-band procedure. If the trusted\n      public key algorithm requires parameters, then the parameters are\n      provided along with the trusted public key (No parameters used in this\n      implementation).\n\n    (e) initial-policy-mapping-inhibit, which indicates if policy mapping is\n          allowed in the certification path.\n          (Not implemented, no policy checking)\n\n    (f) initial-explicit-policy, which indicates if the path must be valid\n          for at least one of the certificate policies in the user-initial-\n          policy-set.\n          (Not implemented, no policy checking)\n\n    (g) initial-any-policy-inhibit, which indicates whether the\n          anyPolicy OID should be processed if it is included in a\n          certificate.\n          (Not implemented, so any policy is valid provided that it is\n          not marked as critical) */\n\n  /* Basic Path Processing:\n\n    For each certificate in the 'chain', the following is checked:\n\n    1. The certificate validity period includes the current time.\n    2. The certificate was signed by its parent (where the parent is either\n       the next in the chain or from the CA store). Allow processing to\n       continue to the next step if no parent is found but the certificate is\n       in the CA store.\n    3. TODO: The certificate has not been revoked.\n    4. The certificate issuer name matches the parent's subject name.\n    5. TODO: If the certificate is self-issued and not the final certificate\n       in the chain, skip this step, otherwise verify that the subject name\n       is within one of the permitted subtrees of X.500 distinguished names\n       and that each of the alternative names in the subjectAltName extension\n       (critical or non-critical) is within one of the permitted subtrees for\n       that name type.\n    6. TODO: If the certificate is self-issued and not the final certificate\n       in the chain, skip this step, otherwise verify that the subject name\n       is not within one of the excluded subtrees for X.500 distinguished\n       names and none of the subjectAltName extension names are excluded for\n       that name type.\n    7. The other steps in the algorithm for basic path processing involve\n       handling the policy extension which is not presently supported in this\n       implementation. Instead, if a critical policy extension is found, the\n       certificate is rejected as not supported.\n    8. If the certificate is not the first or if its the only certificate in\n       the chain (having no parent from the CA store or is self-signed) and it\n       has a critical key usage extension, verify that the keyCertSign bit is\n       set. If the key usage extension exists, verify that the basic\n       constraints extension exists. If the basic constraints extension exists,\n       verify that the cA flag is set. If pathLenConstraint is set, ensure that\n       the number of certificates that precede in the chain (come earlier\n       in the chain as implemented below), excluding the very first in the\n       chain (typically the end-entity one), isn't greater than the\n       pathLenConstraint. This constraint limits the number of intermediate\n       CAs that may appear below a CA before only end-entity certificates\n       may be issued. */\n\n  // if a verify callback is passed as the third parameter, package it within\n  // the options object. This is to support a legacy function signature that\n  // expected the verify callback as the third parameter.\n  if(typeof options === 'function') {\n    options = {verify: options};\n  }\n  options = options || {};\n\n  // copy cert chain references to another array to protect against changes\n  // in verify callback\n  chain = chain.slice(0);\n  var certs = chain.slice(0);\n\n  var validityCheckDate = options.validityCheckDate;\n  // if no validityCheckDate is specified, default to the current date. Make\n  // sure to maintain the value null because it indicates that the validity\n  // period should not be checked.\n  if(typeof validityCheckDate === 'undefined') {\n    validityCheckDate = new Date();\n  }\n\n  // verify each cert in the chain using its parent, where the parent\n  // is either the next in the chain or from the CA store\n  var first = true;\n  var error = null;\n  var depth = 0;\n  do {\n    var cert = chain.shift();\n    var parent = null;\n    var selfSigned = false;\n\n    if(validityCheckDate) {\n      // 1. check valid time\n      if(validityCheckDate < cert.validity.notBefore ||\n         validityCheckDate > cert.validity.notAfter) {\n        error = {\n          message: 'Certificate is not valid yet or has expired.',\n          error: pki.certificateError.certificate_expired,\n          notBefore: cert.validity.notBefore,\n          notAfter: cert.validity.notAfter,\n          // TODO: we might want to reconsider renaming 'now' to\n          // 'validityCheckDate' should this API be changed in the future.\n          now: validityCheckDate\n        };\n      }\n    }\n\n    // 2. verify with parent from chain or CA store\n    if(error === null) {\n      parent = chain[0] || caStore.getIssuer(cert);\n      if(parent === null) {\n        // check for self-signed cert\n        if(cert.isIssuer(cert)) {\n          selfSigned = true;\n          parent = cert;\n        }\n      }\n\n      if(parent) {\n        // FIXME: current CA store implementation might have multiple\n        // certificates where the issuer can't be determined from the\n        // certificate (happens rarely with, eg: old certificates) so normalize\n        // by always putting parents into an array\n        // TODO: there's may be an extreme degenerate case currently uncovered\n        // where an old intermediate certificate seems to have a matching parent\n        // but none of the parents actually verify ... but the intermediate\n        // is in the CA and it should pass this check; needs investigation\n        var parents = parent;\n        if(!forge.util.isArray(parents)) {\n          parents = [parents];\n        }\n\n        // try to verify with each possible parent (typically only one)\n        var verified = false;\n        while(!verified && parents.length > 0) {\n          parent = parents.shift();\n          try {\n            verified = parent.verify(cert);\n          } catch(ex) {\n            // failure to verify, don't care why, try next one\n          }\n        }\n\n        if(!verified) {\n          error = {\n            message: 'Certificate signature is invalid.',\n            error: pki.certificateError.bad_certificate\n          };\n        }\n      }\n\n      if(error === null && (!parent || selfSigned) &&\n        !caStore.hasCertificate(cert)) {\n        // no parent issuer and certificate itself is not trusted\n        error = {\n          message: 'Certificate is not trusted.',\n          error: pki.certificateError.unknown_ca\n        };\n      }\n    }\n\n    // TODO: 3. check revoked\n\n    // 4. check for matching issuer/subject\n    if(error === null && parent && !cert.isIssuer(parent)) {\n      // parent is not issuer\n      error = {\n        message: 'Certificate issuer is invalid.',\n        error: pki.certificateError.bad_certificate\n      };\n    }\n\n    // 5. TODO: check names with permitted names tree\n\n    // 6. TODO: check names against excluded names tree\n\n    // 7. check for unsupported critical extensions\n    if(error === null) {\n      // supported extensions\n      var se = {\n        keyUsage: true,\n        basicConstraints: true\n      };\n      for(var i = 0; error === null && i < cert.extensions.length; ++i) {\n        var ext = cert.extensions[i];\n        if(ext.critical && !(ext.name in se)) {\n          error = {\n            message:\n              'Certificate has an unsupported critical extension.',\n            error: pki.certificateError.unsupported_certificate\n          };\n        }\n      }\n    }\n\n    // 8. check for CA if cert is not first or is the only certificate\n    // remaining in chain with no parent or is self-signed\n    if(error === null &&\n      (!first || (chain.length === 0 && (!parent || selfSigned)))) {\n      // first check keyUsage extension and then basic constraints\n      var bcExt = cert.getExtension('basicConstraints');\n      var keyUsageExt = cert.getExtension('keyUsage');\n      if(keyUsageExt !== null) {\n        // keyCertSign must be true and there must be a basic\n        // constraints extension\n        if(!keyUsageExt.keyCertSign || bcExt === null) {\n          // bad certificate\n          error = {\n            message:\n              'Certificate keyUsage or basicConstraints conflict ' +\n              'or indicate that the certificate is not a CA. ' +\n              'If the certificate is the only one in the chain or ' +\n              'isn\\'t the first then the certificate must be a ' +\n              'valid CA.',\n            error: pki.certificateError.bad_certificate\n          };\n        }\n      }\n      // basic constraints cA flag must be set\n      if(error === null && bcExt !== null && !bcExt.cA) {\n        // bad certificate\n        error = {\n          message:\n            'Certificate basicConstraints indicates the certificate ' +\n            'is not a CA.',\n          error: pki.certificateError.bad_certificate\n        };\n      }\n      // if error is not null and keyUsage is available, then we know it\n      // has keyCertSign and there is a basic constraints extension too,\n      // which means we can check pathLenConstraint (if it exists)\n      if(error === null && keyUsageExt !== null &&\n        'pathLenConstraint' in bcExt) {\n        // pathLen is the maximum # of intermediate CA certs that can be\n        // found between the current certificate and the end-entity (depth 0)\n        // certificate; this number does not include the end-entity (depth 0,\n        // last in the chain) even if it happens to be a CA certificate itself\n        var pathLen = depth - 1;\n        if(pathLen > bcExt.pathLenConstraint) {\n          // pathLenConstraint violated, bad certificate\n          error = {\n            message:\n              'Certificate basicConstraints pathLenConstraint violated.',\n            error: pki.certificateError.bad_certificate\n          };\n        }\n      }\n    }\n\n    // call application callback\n    var vfd = (error === null) ? true : error.error;\n    var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;\n    if(ret === true) {\n      // clear any set error\n      error = null;\n    } else {\n      // if passed basic tests, set default message and alert\n      if(vfd === true) {\n        error = {\n          message: 'The application rejected the certificate.',\n          error: pki.certificateError.bad_certificate\n        };\n      }\n\n      // check for custom error info\n      if(ret || ret === 0) {\n        // set custom message and error\n        if(typeof ret === 'object' && !forge.util.isArray(ret)) {\n          if(ret.message) {\n            error.message = ret.message;\n          }\n          if(ret.error) {\n            error.error = ret.error;\n          }\n        } else if(typeof ret === 'string') {\n          // set custom error\n          error.error = ret;\n        }\n      }\n\n      // throw error\n      throw error;\n    }\n\n    // no longer first cert in chain\n    first = false;\n    ++depth;\n  } while(chain.length > 0);\n\n  return true;\n};\n","/**\n * Utility functions for web applications.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2018 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nvar baseN = require('./baseN');\n\n/* Utilities API */\nvar util = module.exports = forge.util = forge.util || {};\n\n// define setImmediate and nextTick\n(function() {\n  // use native nextTick (unless we're in webpack)\n  // webpack (or better node-libs-browser polyfill) sets process.browser.\n  // this way we can detect webpack properly\n  if(typeof process !== 'undefined' && process.nextTick && !process.browser) {\n    util.nextTick = process.nextTick;\n    if(typeof setImmediate === 'function') {\n      util.setImmediate = setImmediate;\n    } else {\n      // polyfill setImmediate with nextTick, older versions of node\n      // (those w/o setImmediate) won't totally starve IO\n      util.setImmediate = util.nextTick;\n    }\n    return;\n  }\n\n  // polyfill nextTick with native setImmediate\n  if(typeof setImmediate === 'function') {\n    util.setImmediate = function() { return setImmediate.apply(undefined, arguments); };\n    util.nextTick = function(callback) {\n      return setImmediate(callback);\n    };\n    return;\n  }\n\n  /* Note: A polyfill upgrade pattern is used here to allow combining\n  polyfills. For example, MutationObserver is fast, but blocks UI updates,\n  so it needs to allow UI updates periodically, so it falls back on\n  postMessage or setTimeout. */\n\n  // polyfill with setTimeout\n  util.setImmediate = function(callback) {\n    setTimeout(callback, 0);\n  };\n\n  // upgrade polyfill to use postMessage\n  if(typeof window !== 'undefined' &&\n    typeof window.postMessage === 'function') {\n    var msg = 'forge.setImmediate';\n    var callbacks = [];\n    util.setImmediate = function(callback) {\n      callbacks.push(callback);\n      // only send message when one hasn't been sent in\n      // the current turn of the event loop\n      if(callbacks.length === 1) {\n        window.postMessage(msg, '*');\n      }\n    };\n    function handler(event) {\n      if(event.source === window && event.data === msg) {\n        event.stopPropagation();\n        var copy = callbacks.slice();\n        callbacks.length = 0;\n        copy.forEach(function(callback) {\n          callback();\n        });\n      }\n    }\n    window.addEventListener('message', handler, true);\n  }\n\n  // upgrade polyfill to use MutationObserver\n  if(typeof MutationObserver !== 'undefined') {\n    // polyfill with MutationObserver\n    var now = Date.now();\n    var attr = true;\n    var div = document.createElement('div');\n    var callbacks = [];\n    new MutationObserver(function() {\n      var copy = callbacks.slice();\n      callbacks.length = 0;\n      copy.forEach(function(callback) {\n        callback();\n      });\n    }).observe(div, {attributes: true});\n    var oldSetImmediate = util.setImmediate;\n    util.setImmediate = function(callback) {\n      if(Date.now() - now > 15) {\n        now = Date.now();\n        oldSetImmediate(callback);\n      } else {\n        callbacks.push(callback);\n        // only trigger observer when it hasn't been triggered in\n        // the current turn of the event loop\n        if(callbacks.length === 1) {\n          div.setAttribute('a', attr = !attr);\n        }\n      }\n    };\n  }\n\n  util.nextTick = util.setImmediate;\n})();\n\n// check if running under Node.js\nutil.isNodejs =\n  typeof process !== 'undefined' && process.versions && process.versions.node;\n\n\n// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while\n// it will point to `window` in the main thread.\n// To remain compatible with older browsers, we fall back to 'window' if 'self'\n// is not available.\nutil.globalScope = (function() {\n  if(util.isNodejs) {\n    return global;\n  }\n\n  return typeof self === 'undefined' ? window : self;\n})();\n\n// define isArray\nutil.isArray = Array.isArray || function(x) {\n  return Object.prototype.toString.call(x) === '[object Array]';\n};\n\n// define isArrayBuffer\nutil.isArrayBuffer = function(x) {\n  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;\n};\n\n// define isArrayBufferView\nutil.isArrayBufferView = function(x) {\n  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;\n};\n\n/**\n * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for\n * algorithms where bit manipulation, JavaScript limitations, and/or algorithm\n * design only allow for byte operations of a limited size.\n *\n * @param n number of bits.\n *\n * Throw Error if n invalid.\n */\nfunction _checkBitsParam(n) {\n  if(!(n === 8 || n === 16 || n === 24 || n === 32)) {\n    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);\n  }\n}\n\n// TODO: set ByteBuffer to best available backing\nutil.ByteBuffer = ByteStringBuffer;\n\n/** Buffer w/BinaryString backing */\n\n/**\n * Constructor for a binary string backed byte buffer.\n *\n * @param [b] the bytes to wrap (either encoded as string, one byte per\n *          character, or as an ArrayBuffer or Typed Array).\n */\nfunction ByteStringBuffer(b) {\n  // TODO: update to match DataBuffer API\n\n  // the data in this buffer\n  this.data = '';\n  // the pointer for reading from this buffer\n  this.read = 0;\n\n  if(typeof b === 'string') {\n    this.data = b;\n  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {\n    if(typeof Buffer !== 'undefined' && b instanceof Buffer) {\n      this.data = b.toString('binary');\n    } else {\n      // convert native buffer to forge buffer\n      // FIXME: support native buffers internally instead\n      var arr = new Uint8Array(b);\n      try {\n        this.data = String.fromCharCode.apply(null, arr);\n      } catch(e) {\n        for(var i = 0; i < arr.length; ++i) {\n          this.putByte(arr[i]);\n        }\n      }\n    }\n  } else if(b instanceof ByteStringBuffer ||\n    (typeof b === 'object' && typeof b.data === 'string' &&\n    typeof b.read === 'number')) {\n    // copy existing buffer\n    this.data = b.data;\n    this.read = b.read;\n  }\n\n  // used for v8 optimization\n  this._constructedStringLength = 0;\n}\nutil.ByteStringBuffer = ByteStringBuffer;\n\n/* Note: This is an optimization for V8-based browsers. When V8 concatenates\n  a string, the strings are only joined logically using a \"cons string\" or\n  \"constructed/concatenated string\". These containers keep references to one\n  another and can result in very large memory usage. For example, if a 2MB\n  string is constructed by concatenating 4 bytes together at a time, the\n  memory usage will be ~44MB; so ~22x increase. The strings are only joined\n  together when an operation requiring their joining takes place, such as\n  substr(). This function is called when adding data to this buffer to ensure\n  these types of strings are periodically joined to reduce the memory\n  footprint. */\nvar _MAX_CONSTRUCTED_STRING_LENGTH = 4096;\nutil.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {\n  this._constructedStringLength += x;\n  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {\n    // this substr() should cause the constructed string to join\n    this.data.substr(0, 1);\n    this._constructedStringLength = 0;\n  }\n};\n\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */\nutil.ByteStringBuffer.prototype.length = function() {\n  return this.data.length - this.read;\n};\n\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */\nutil.ByteStringBuffer.prototype.isEmpty = function() {\n  return this.length() <= 0;\n};\n\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putByte = function(b) {\n  return this.putBytes(String.fromCharCode(b));\n};\n\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.fillWithByte = function(b, n) {\n  b = String.fromCharCode(b);\n  var d = this.data;\n  while(n > 0) {\n    if(n & 1) {\n      d += b;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      b += b;\n    }\n  }\n  this.data = d;\n  this._optimizeConstructedString(n);\n  return this;\n};\n\n/**\n * Puts bytes in this buffer.\n *\n * @param bytes the bytes (as a binary encoded string) to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putBytes = function(bytes) {\n  this.data += bytes;\n  this._optimizeConstructedString(bytes.length);\n  return this;\n};\n\n/**\n * Puts a UTF-16 encoded string into this buffer.\n *\n * @param str the string to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putString = function(str) {\n  return this.putBytes(util.encodeUtf8(str));\n};\n\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt16 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt24 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt32 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 24 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt16Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF));\n};\n\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt24Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF));\n};\n\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt32Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 24 & 0xFF));\n};\n\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt = function(i, n) {\n  _checkBitsParam(n);\n  var bytes = '';\n  do {\n    n -= 8;\n    bytes += String.fromCharCode((i >> n) & 0xFF);\n  } while(n > 0);\n  return this.putBytes(bytes);\n};\n\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putSignedInt = function(i, n) {\n  // putInt checks n\n  if(i < 0) {\n    i += 2 << (n - 1);\n  }\n  return this.putInt(i, n);\n};\n\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putBuffer = function(buffer) {\n  return this.putBytes(buffer.getBytes());\n};\n\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */\nutil.ByteStringBuffer.prototype.getByte = function() {\n  return this.data.charCodeAt(this.read++);\n};\n\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteStringBuffer.prototype.getInt16 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 8 ^\n    this.data.charCodeAt(this.read + 1));\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteStringBuffer.prototype.getInt24 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 16 ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2));\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteStringBuffer.prototype.getInt32 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 24 ^\n    this.data.charCodeAt(this.read + 1) << 16 ^\n    this.data.charCodeAt(this.read + 2) << 8 ^\n    this.data.charCodeAt(this.read + 3));\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteStringBuffer.prototype.getInt16Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteStringBuffer.prototype.getInt24Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16);\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteStringBuffer.prototype.getInt32Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16 ^\n    this.data.charCodeAt(this.read + 3) << 24);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by ceil(n/8).\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.ByteStringBuffer.prototype.getInt = function(n) {\n  _checkBitsParam(n);\n  var rval = 0;\n  do {\n    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n    rval = (rval << 8) + this.data.charCodeAt(this.read++);\n    n -= 8;\n  } while(n > 0);\n  return rval;\n};\n\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.ByteStringBuffer.prototype.getSignedInt = function(n) {\n  // getInt checks n\n  var x = this.getInt(n);\n  var max = 2 << (n - 2);\n  if(x >= max) {\n    x -= max << 1;\n  }\n  return x;\n};\n\n/**\n * Reads bytes out as a binary encoded string and clears them from the\n * buffer. Note that the resulting string is binary encoded (in node.js this\n * encoding is referred to as `binary`, it is *not* `utf8`).\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a binary encoded string of bytes.\n */\nutil.ByteStringBuffer.prototype.getBytes = function(count) {\n  var rval;\n  if(count) {\n    // read count bytes\n    count = Math.min(this.length(), count);\n    rval = this.data.slice(this.read, this.read + count);\n    this.read += count;\n  } else if(count === 0) {\n    rval = '';\n  } else {\n    // read all bytes, optimize to only copy when needed\n    rval = (this.read === 0) ? this.data : this.data.slice(this.read);\n    this.clear();\n  }\n  return rval;\n};\n\n/**\n * Gets a binary encoded string of the bytes from this buffer without\n * modifying the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of binary encoded characters.\n */\nutil.ByteStringBuffer.prototype.bytes = function(count) {\n  return (typeof(count) === 'undefined' ?\n    this.data.slice(this.read) :\n    this.data.slice(this.read, this.read + count));\n};\n\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */\nutil.ByteStringBuffer.prototype.at = function(i) {\n  return this.data.charCodeAt(this.read + i);\n};\n\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.setAt = function(i, b) {\n  this.data = this.data.substr(0, this.read + i) +\n    String.fromCharCode(b) +\n    this.data.substr(this.read + i + 1);\n  return this;\n};\n\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */\nutil.ByteStringBuffer.prototype.last = function() {\n  return this.data.charCodeAt(this.data.length - 1);\n};\n\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */\nutil.ByteStringBuffer.prototype.copy = function() {\n  var c = util.createBuffer(this.data);\n  c.read = this.read;\n  return c;\n};\n\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.compact = function() {\n  if(this.read > 0) {\n    this.data = this.data.slice(this.read);\n    this.read = 0;\n  }\n  return this;\n};\n\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.clear = function() {\n  this.data = '';\n  this.read = 0;\n  return this;\n};\n\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.truncate = function(count) {\n  var len = Math.max(0, this.length() - count);\n  this.data = this.data.substr(this.read, len);\n  this.read = 0;\n  return this;\n};\n\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */\nutil.ByteStringBuffer.prototype.toHex = function() {\n  var rval = '';\n  for(var i = this.read; i < this.data.length; ++i) {\n    var b = this.data.charCodeAt(i);\n    if(b < 16) {\n      rval += '0';\n    }\n    rval += b.toString(16);\n  }\n  return rval;\n};\n\n/**\n * Converts this buffer to a UTF-16 string (standard JavaScript string).\n *\n * @return a UTF-16 string.\n */\nutil.ByteStringBuffer.prototype.toString = function() {\n  return util.decodeUtf8(this.bytes());\n};\n\n/** End Buffer w/BinaryString backing */\n\n/** Buffer w/UInt8Array backing */\n\n/**\n * FIXME: Experimental. Do not use yet.\n *\n * Constructor for an ArrayBuffer-backed byte buffer.\n *\n * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a\n * TypedArray.\n *\n * If a string is given, its encoding should be provided as an option,\n * otherwise it will default to 'binary'. A 'binary' string is encoded such\n * that each character is one byte in length and size.\n *\n * If an ArrayBuffer, DataView, or TypedArray is given, it will be used\n * *directly* without any copying. Note that, if a write to the buffer requires\n * more space, the buffer will allocate a new backing ArrayBuffer to\n * accommodate. The starting read and write offsets for the buffer may be\n * given as options.\n *\n * @param [b] the initial bytes for this buffer.\n * @param options the options to use:\n *          [readOffset] the starting read offset to use (default: 0).\n *          [writeOffset] the starting write offset to use (default: the\n *            length of the first parameter).\n *          [growSize] the minimum amount, in bytes, to grow the buffer by to\n *            accommodate writes (default: 1024).\n *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the\n *            first parameter, if it is a string (default: 'binary').\n */\nfunction DataBuffer(b, options) {\n  // default options\n  options = options || {};\n\n  // pointers for read from/write to buffer\n  this.read = options.readOffset || 0;\n  this.growSize = options.growSize || 1024;\n\n  var isArrayBuffer = util.isArrayBuffer(b);\n  var isArrayBufferView = util.isArrayBufferView(b);\n  if(isArrayBuffer || isArrayBufferView) {\n    // use ArrayBuffer directly\n    if(isArrayBuffer) {\n      this.data = new DataView(b);\n    } else {\n      // TODO: adjust read/write offset based on the type of view\n      // or specify that this must be done in the options ... that the\n      // offsets are byte-based\n      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);\n    }\n    this.write = ('writeOffset' in options ?\n      options.writeOffset : this.data.byteLength);\n    return;\n  }\n\n  // initialize to empty array buffer and add any given bytes using putBytes\n  this.data = new DataView(new ArrayBuffer(0));\n  this.write = 0;\n\n  if(b !== null && b !== undefined) {\n    this.putBytes(b);\n  }\n\n  if('writeOffset' in options) {\n    this.write = options.writeOffset;\n  }\n}\nutil.DataBuffer = DataBuffer;\n\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */\nutil.DataBuffer.prototype.length = function() {\n  return this.write - this.read;\n};\n\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */\nutil.DataBuffer.prototype.isEmpty = function() {\n  return this.length() <= 0;\n};\n\n/**\n * Ensures this buffer has enough empty space to accommodate the given number\n * of bytes. An optional parameter may be given that indicates a minimum\n * amount to grow the buffer if necessary. If the parameter is not given,\n * the buffer will be grown by some previously-specified default amount\n * or heuristic.\n *\n * @param amount the number of bytes to accommodate.\n * @param [growSize] the minimum amount, in bytes, to grow the buffer by if\n *          necessary.\n */\nutil.DataBuffer.prototype.accommodate = function(amount, growSize) {\n  if(this.length() >= amount) {\n    return this;\n  }\n  growSize = Math.max(growSize || this.growSize, amount);\n\n  // grow buffer\n  var src = new Uint8Array(\n    this.data.buffer, this.data.byteOffset, this.data.byteLength);\n  var dst = new Uint8Array(this.length() + growSize);\n  dst.set(src);\n  this.data = new DataView(dst.buffer);\n\n  return this;\n};\n\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putByte = function(b) {\n  this.accommodate(1);\n  this.data.setUint8(this.write++, b);\n  return this;\n};\n\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.fillWithByte = function(b, n) {\n  this.accommodate(n);\n  for(var i = 0; i < n; ++i) {\n    this.data.setUint8(b);\n  }\n  return this;\n};\n\n/**\n * Puts bytes in this buffer. The bytes may be given as a string, an\n * ArrayBuffer, a DataView, or a TypedArray.\n *\n * @param bytes the bytes to put.\n * @param [encoding] the encoding for the first parameter ('binary', 'utf8',\n *          'utf16', 'hex'), if it is a string (default: 'binary').\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putBytes = function(bytes, encoding) {\n  if(util.isArrayBufferView(bytes)) {\n    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    var len = src.byteLength - src.byteOffset;\n    this.accommodate(len);\n    var dst = new Uint8Array(this.data.buffer, this.write);\n    dst.set(src);\n    this.write += len;\n    return this;\n  }\n\n  if(util.isArrayBuffer(bytes)) {\n    var src = new Uint8Array(bytes);\n    this.accommodate(src.byteLength);\n    var dst = new Uint8Array(this.data.buffer);\n    dst.set(src, this.write);\n    this.write += src.byteLength;\n    return this;\n  }\n\n  // bytes is a util.DataBuffer or equivalent\n  if(bytes instanceof util.DataBuffer ||\n    (typeof bytes === 'object' &&\n    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&\n    util.isArrayBufferView(bytes.data))) {\n    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());\n    this.accommodate(src.byteLength);\n    var dst = new Uint8Array(bytes.data.byteLength, this.write);\n    dst.set(src);\n    this.write += src.byteLength;\n    return this;\n  }\n\n  if(bytes instanceof util.ByteStringBuffer) {\n    // copy binary string and process as the same as a string parameter below\n    bytes = bytes.data;\n    encoding = 'binary';\n  }\n\n  // string conversion\n  encoding = encoding || 'binary';\n  if(typeof bytes === 'string') {\n    var view;\n\n    // decode from string\n    if(encoding === 'hex') {\n      this.accommodate(Math.ceil(bytes.length / 2));\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.hex.decode(bytes, view, this.write);\n      return this;\n    }\n    if(encoding === 'base64') {\n      this.accommodate(Math.ceil(bytes.length / 4) * 3);\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.base64.decode(bytes, view, this.write);\n      return this;\n    }\n\n    // encode text as UTF-8 bytes\n    if(encoding === 'utf8') {\n      // encode as UTF-8 then decode string as raw binary\n      bytes = util.encodeUtf8(bytes);\n      encoding = 'binary';\n    }\n\n    // decode string as raw binary\n    if(encoding === 'binary' || encoding === 'raw') {\n      // one byte per character\n      this.accommodate(bytes.length);\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.raw.decode(view);\n      return this;\n    }\n\n    // encode text as UTF-16 bytes\n    if(encoding === 'utf16') {\n      // two bytes per character\n      this.accommodate(bytes.length * 2);\n      view = new Uint16Array(this.data.buffer, this.write);\n      this.write += util.text.utf16.encode(view);\n      return this;\n    }\n\n    throw new Error('Invalid encoding: ' + encoding);\n  }\n\n  throw Error('Invalid parameter: ' + bytes);\n};\n\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putBuffer = function(buffer) {\n  this.putBytes(buffer);\n  buffer.clear();\n  return this;\n};\n\n/**\n * Puts a string into this buffer.\n *\n * @param str the string to put.\n * @param [encoding] the encoding for the string (default: 'utf16').\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putString = function(str) {\n  return this.putBytes(str, 'utf16');\n};\n\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt16 = function(i) {\n  this.accommodate(2);\n  this.data.setInt16(this.write, i);\n  this.write += 2;\n  return this;\n};\n\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt24 = function(i) {\n  this.accommodate(3);\n  this.data.setInt16(this.write, i >> 8 & 0xFFFF);\n  this.data.setInt8(this.write, i >> 16 & 0xFF);\n  this.write += 3;\n  return this;\n};\n\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt32 = function(i) {\n  this.accommodate(4);\n  this.data.setInt32(this.write, i);\n  this.write += 4;\n  return this;\n};\n\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt16Le = function(i) {\n  this.accommodate(2);\n  this.data.setInt16(this.write, i, true);\n  this.write += 2;\n  return this;\n};\n\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt24Le = function(i) {\n  this.accommodate(3);\n  this.data.setInt8(this.write, i >> 16 & 0xFF);\n  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);\n  this.write += 3;\n  return this;\n};\n\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt32Le = function(i) {\n  this.accommodate(4);\n  this.data.setInt32(this.write, i, true);\n  this.write += 4;\n  return this;\n};\n\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt = function(i, n) {\n  _checkBitsParam(n);\n  this.accommodate(n / 8);\n  do {\n    n -= 8;\n    this.data.setInt8(this.write++, (i >> n) & 0xFF);\n  } while(n > 0);\n  return this;\n};\n\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putSignedInt = function(i, n) {\n  _checkBitsParam(n);\n  this.accommodate(n / 8);\n  if(i < 0) {\n    i += 2 << (n - 1);\n  }\n  return this.putInt(i, n);\n};\n\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */\nutil.DataBuffer.prototype.getByte = function() {\n  return this.data.getInt8(this.read++);\n};\n\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.DataBuffer.prototype.getInt16 = function() {\n  var rval = this.data.getInt16(this.read);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.DataBuffer.prototype.getInt24 = function() {\n  var rval = (\n    this.data.getInt16(this.read) << 8 ^\n    this.data.getInt8(this.read + 2));\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.DataBuffer.prototype.getInt32 = function() {\n  var rval = this.data.getInt32(this.read);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.DataBuffer.prototype.getInt16Le = function() {\n  var rval = this.data.getInt16(this.read, true);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.DataBuffer.prototype.getInt24Le = function() {\n  var rval = (\n    this.data.getInt8(this.read) ^\n    this.data.getInt16(this.read + 1, true) << 8);\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.DataBuffer.prototype.getInt32Le = function() {\n  var rval = this.data.getInt32(this.read, true);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.DataBuffer.prototype.getInt = function(n) {\n  _checkBitsParam(n);\n  var rval = 0;\n  do {\n    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n    rval = (rval << 8) + this.data.getInt8(this.read++);\n    n -= 8;\n  } while(n > 0);\n  return rval;\n};\n\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.DataBuffer.prototype.getSignedInt = function(n) {\n  // getInt checks n\n  var x = this.getInt(n);\n  var max = 2 << (n - 2);\n  if(x >= max) {\n    x -= max << 1;\n  }\n  return x;\n};\n\n/**\n * Reads bytes out as a binary encoded string and clears them from the\n * buffer.\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a binary encoded string of bytes.\n */\nutil.DataBuffer.prototype.getBytes = function(count) {\n  // TODO: deprecate this method, it is poorly named and\n  // this.toString('binary') replaces it\n  // add a toTypedArray()/toArrayBuffer() function\n  var rval;\n  if(count) {\n    // read count bytes\n    count = Math.min(this.length(), count);\n    rval = this.data.slice(this.read, this.read + count);\n    this.read += count;\n  } else if(count === 0) {\n    rval = '';\n  } else {\n    // read all bytes, optimize to only copy when needed\n    rval = (this.read === 0) ? this.data : this.data.slice(this.read);\n    this.clear();\n  }\n  return rval;\n};\n\n/**\n * Gets a binary encoded string of the bytes from this buffer without\n * modifying the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of binary encoded characters.\n */\nutil.DataBuffer.prototype.bytes = function(count) {\n  // TODO: deprecate this method, it is poorly named, add \"getString()\"\n  return (typeof(count) === 'undefined' ?\n    this.data.slice(this.read) :\n    this.data.slice(this.read, this.read + count));\n};\n\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */\nutil.DataBuffer.prototype.at = function(i) {\n  return this.data.getUint8(this.read + i);\n};\n\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.setAt = function(i, b) {\n  this.data.setUint8(i, b);\n  return this;\n};\n\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */\nutil.DataBuffer.prototype.last = function() {\n  return this.data.getUint8(this.write - 1);\n};\n\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */\nutil.DataBuffer.prototype.copy = function() {\n  return new util.DataBuffer(this);\n};\n\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.compact = function() {\n  if(this.read > 0) {\n    var src = new Uint8Array(this.data.buffer, this.read);\n    var dst = new Uint8Array(src.byteLength);\n    dst.set(src);\n    this.data = new DataView(dst);\n    this.write -= this.read;\n    this.read = 0;\n  }\n  return this;\n};\n\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.clear = function() {\n  this.data = new DataView(new ArrayBuffer(0));\n  this.read = this.write = 0;\n  return this;\n};\n\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.truncate = function(count) {\n  this.write = Math.max(0, this.length() - count);\n  this.read = Math.min(this.read, this.write);\n  return this;\n};\n\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */\nutil.DataBuffer.prototype.toHex = function() {\n  var rval = '';\n  for(var i = this.read; i < this.data.byteLength; ++i) {\n    var b = this.data.getUint8(i);\n    if(b < 16) {\n      rval += '0';\n    }\n    rval += b.toString(16);\n  }\n  return rval;\n};\n\n/**\n * Converts this buffer to a string, using the given encoding. If no\n * encoding is given, 'utf8' (UTF-8) is used.\n *\n * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',\n *          'base64' (default: 'utf8').\n *\n * @return a string representation of the bytes in this buffer.\n */\nutil.DataBuffer.prototype.toString = function(encoding) {\n  var view = new Uint8Array(this.data, this.read, this.length());\n  encoding = encoding || 'utf8';\n\n  // encode to string\n  if(encoding === 'binary' || encoding === 'raw') {\n    return util.binary.raw.encode(view);\n  }\n  if(encoding === 'hex') {\n    return util.binary.hex.encode(view);\n  }\n  if(encoding === 'base64') {\n    return util.binary.base64.encode(view);\n  }\n\n  // decode to text\n  if(encoding === 'utf8') {\n    return util.text.utf8.decode(view);\n  }\n  if(encoding === 'utf16') {\n    return util.text.utf16.decode(view);\n  }\n\n  throw new Error('Invalid encoding: ' + encoding);\n};\n\n/** End Buffer w/UInt8Array backing */\n\n/**\n * Creates a buffer that stores bytes. A value may be given to populate the\n * buffer with data. This value can either be string of encoded bytes or a\n * regular string of characters. When passing a string of binary encoded\n * bytes, the encoding `raw` should be given. This is also the default. When\n * passing a string of characters, the encoding `utf8` should be given.\n *\n * @param [input] a string with encoded bytes to store in the buffer.\n * @param [encoding] (default: 'raw', other: 'utf8').\n */\nutil.createBuffer = function(input, encoding) {\n  // TODO: deprecate, use new ByteBuffer() instead\n  encoding = encoding || 'raw';\n  if(input !== undefined && encoding === 'utf8') {\n    input = util.encodeUtf8(input);\n  }\n  return new util.ByteBuffer(input);\n};\n\n/**\n * Fills a string with a particular value. If you want the string to be a byte\n * string, pass in String.fromCharCode(theByte).\n *\n * @param c the character to fill the string with, use String.fromCharCode\n *          to fill the string with a byte value.\n * @param n the number of characters of value c to fill with.\n *\n * @return the filled string.\n */\nutil.fillString = function(c, n) {\n  var s = '';\n  while(n > 0) {\n    if(n & 1) {\n      s += c;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      c += c;\n    }\n  }\n  return s;\n};\n\n/**\n * Performs a per byte XOR between two byte strings and returns the result as a\n * string of bytes.\n *\n * @param s1 first string of bytes.\n * @param s2 second string of bytes.\n * @param n the number of bytes to XOR.\n *\n * @return the XOR'd result.\n */\nutil.xorBytes = function(s1, s2, n) {\n  var s3 = '';\n  var b = '';\n  var t = '';\n  var i = 0;\n  var c = 0;\n  for(; n > 0; --n, ++i) {\n    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);\n    if(c >= 10) {\n      s3 += t;\n      t = '';\n      c = 0;\n    }\n    t += String.fromCharCode(b);\n    ++c;\n  }\n  s3 += t;\n  return s3;\n};\n\n/**\n * Converts a hex string into a 'binary' encoded string of bytes.\n *\n * @param hex the hexadecimal string to convert.\n *\n * @return the binary-encoded string of bytes.\n */\nutil.hexToBytes = function(hex) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.hex.decode instead.\"\n  var rval = '';\n  var i = 0;\n  if(hex.length & 1 == 1) {\n    // odd number of characters, convert first character alone\n    i = 1;\n    rval += String.fromCharCode(parseInt(hex[0], 16));\n  }\n  // convert 2 characters (1 byte) at a time\n  for(; i < hex.length; i += 2) {\n    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n  }\n  return rval;\n};\n\n/**\n * Converts a 'binary' encoded string of bytes to hex.\n *\n * @param bytes the byte string to convert.\n *\n * @return the string of hexadecimal characters.\n */\nutil.bytesToHex = function(bytes) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.hex.encode instead.\"\n  return util.createBuffer(bytes).toHex();\n};\n\n/**\n * Converts an 32-bit integer to 4-big-endian byte string.\n *\n * @param i the integer.\n *\n * @return the byte string.\n */\nutil.int32ToBytes = function(i) {\n  return (\n    String.fromCharCode(i >> 24 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n// base64 characters, reverse mapping\nvar _base64 =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar _base64Idx = [\n/*43 -43 = 0*/\n/*'+',  1,  2,  3,'/' */\n   62, -1, -1, -1, 63,\n\n/*'0','1','2','3','4','5','6','7','8','9' */\n   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n\n/*15, 16, 17,'=', 19, 20, 21 */\n  -1, -1, -1, 64, -1, -1, -1,\n\n/*65 - 43 = 22*/\n/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,\n\n/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */\n   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n\n/*91 - 43 = 48 */\n/*48, 49, 50, 51, 52, 53 */\n  -1, -1, -1, -1, -1, -1,\n\n/*97 - 43 = 54*/\n/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */\n   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n\n/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */\n   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n];\n\n// base58 characters (Bitcoin alphabet)\nvar _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\n/**\n * Base64 encodes a 'binary' encoded string of bytes.\n *\n * @param input the binary encoded string of bytes to base64-encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output.\n */\nutil.encode64 = function(input, maxline) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.base64.encode instead.\"\n  var line = '';\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n  while(i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n\n    // encode 4 character group\n    line += _base64.charAt(chr1 >> 2);\n    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(isNaN(chr2)) {\n      line += '==';\n    } else {\n      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);\n    }\n\n    if(maxline && line.length > maxline) {\n      output += line.substr(0, maxline) + '\\r\\n';\n      line = line.substr(maxline);\n    }\n  }\n  output += line;\n  return output;\n};\n\n/**\n * Base64 decodes a string into a 'binary' encoded string of bytes.\n *\n * @param input the base64-encoded input.\n *\n * @return the binary encoded string.\n */\nutil.decode64 = function(input) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.base64.decode instead.\"\n\n  // remove all non-base64 characters\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  var output = '';\n  var enc1, enc2, enc3, enc4;\n  var i = 0;\n\n  while(i < input.length) {\n    enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n\n    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));\n    if(enc3 !== 64) {\n      // decoded at least 2 bytes\n      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));\n      if(enc4 !== 64) {\n        // decoded 3 bytes\n        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);\n      }\n    }\n  }\n\n  return output;\n};\n\n/**\n * Encodes the given string of characters (a standard JavaScript\n * string) as a binary encoded string where the bytes represent\n * a UTF-8 encoded string of characters. Non-ASCII characters will be\n * encoded as multiple bytes according to UTF-8.\n *\n * @param str a standard string of characters to encode.\n *\n * @return the binary encoded string.\n */\nutil.encodeUtf8 = function(str) {\n  return unescape(encodeURIComponent(str));\n};\n\n/**\n * Decodes a binary encoded string that contains bytes that\n * represent a UTF-8 encoded string of characters -- into a\n * string of characters (a standard JavaScript string).\n *\n * @param str the binary encoded string to decode.\n *\n * @return the resulting standard string of characters.\n */\nutil.decodeUtf8 = function(str) {\n  return decodeURIComponent(escape(str));\n};\n\n// binary encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.binary = {\n  raw: {},\n  hex: {},\n  base64: {},\n  base58: {},\n  baseN : {\n    encode: baseN.encode,\n    decode: baseN.decode\n  }\n};\n\n/**\n * Encodes a Uint8Array as a binary-encoded string. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param bytes the Uint8Array to encode.\n *\n * @return the binary-encoded string.\n */\nutil.binary.raw.encode = function(bytes) {\n  return String.fromCharCode.apply(null, bytes);\n};\n\n/**\n * Decodes a binary-encoded string to a Uint8Array. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param str the binary-encoded string to decode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.raw.decode = function(str, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length);\n  }\n  offset = offset || 0;\n  var j = offset;\n  for(var i = 0; i < str.length; ++i) {\n    out[j++] = str.charCodeAt(i);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or\n * ByteBuffer as a string of hexadecimal characters.\n *\n * @param bytes the bytes to convert.\n *\n * @return the string of hexadecimal characters.\n */\nutil.binary.hex.encode = util.bytesToHex;\n\n/**\n * Decodes a hex-encoded string to a Uint8Array.\n *\n * @param hex the hexadecimal string to convert.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.hex.decode = function(hex, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(Math.ceil(hex.length / 2));\n  }\n  offset = offset || 0;\n  var i = 0, j = offset;\n  if(hex.length & 1) {\n    // odd number of characters, convert first character alone\n    i = 1;\n    out[j++] = parseInt(hex[0], 16);\n  }\n  // convert 2 characters (1 byte) at a time\n  for(; i < hex.length; i += 2) {\n    out[j++] = parseInt(hex.substr(i, 2), 16);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Base64-encodes a Uint8Array.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output string.\n */\nutil.binary.base64.encode = function(input, maxline) {\n  var line = '';\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n  while(i < input.byteLength) {\n    chr1 = input[i++];\n    chr2 = input[i++];\n    chr3 = input[i++];\n\n    // encode 4 character group\n    line += _base64.charAt(chr1 >> 2);\n    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(isNaN(chr2)) {\n      line += '==';\n    } else {\n      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);\n    }\n\n    if(maxline && line.length > maxline) {\n      output += line.substr(0, maxline) + '\\r\\n';\n      line = line.substr(maxline);\n    }\n  }\n  output += line;\n  return output;\n};\n\n/**\n * Decodes a base64-encoded string to a Uint8Array.\n *\n * @param input the base64-encoded input string.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.base64.decode = function(input, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(Math.ceil(input.length / 4) * 3);\n  }\n\n  // remove all non-base64 characters\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  offset = offset || 0;\n  var enc1, enc2, enc3, enc4;\n  var i = 0, j = offset;\n\n  while(i < input.length) {\n    enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n\n    out[j++] = (enc1 << 2) | (enc2 >> 4);\n    if(enc3 !== 64) {\n      // decoded at least 2 bytes\n      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);\n      if(enc4 !== 64) {\n        // decoded 3 bytes\n        out[j++] = ((enc3 & 3) << 6) | enc4;\n      }\n    }\n  }\n\n  // make sure result is the exact decoded length\n  return output ? (j - offset) : out.subarray(0, j);\n};\n\n// add support for base58 encoding/decoding with Bitcoin alphabet\nutil.binary.base58.encode = function(input, maxline) {\n  return util.binary.baseN.encode(input, _base58, maxline);\n};\nutil.binary.base58.decode = function(input, maxline) {\n  return util.binary.baseN.decode(input, _base58, maxline);\n};\n\n// text encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.text = {\n  utf8: {},\n  utf16: {}\n};\n\n/**\n * Encodes the given string as UTF-8 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.text.utf8.encode = function(str, output, offset) {\n  str = util.encodeUtf8(str);\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length);\n  }\n  offset = offset || 0;\n  var j = offset;\n  for(var i = 0; i < str.length; ++i) {\n    out[j++] = str.charCodeAt(i);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Decodes the UTF-8 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */\nutil.text.utf8.decode = function(bytes) {\n  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));\n};\n\n/**\n * Encodes the given string as UTF-16 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.text.utf16.encode = function(str, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length * 2);\n  }\n  var view = new Uint16Array(out.buffer);\n  offset = offset || 0;\n  var j = offset;\n  var k = offset;\n  for(var i = 0; i < str.length; ++i) {\n    view[k++] = str.charCodeAt(i);\n    j += 2;\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Decodes the UTF-16 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */\nutil.text.utf16.decode = function(bytes) {\n  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n};\n\n/**\n * Deflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true to return only raw deflate data, false to include zlib\n *          header and trailer.\n *\n * @return the deflated data as a string.\n */\nutil.deflate = function(api, bytes, raw) {\n  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);\n\n  // strip zlib header and trailer if necessary\n  if(raw) {\n    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that\n    // there is a 4-byte DICT (alder-32) block before the data if\n    // its 5th bit is set\n    var start = 2;\n    var flg = bytes.charCodeAt(1);\n    if(flg & 0x20) {\n      start = 6;\n    }\n    // zlib trailer is 4 bytes of adler-32\n    bytes = bytes.substring(start, bytes.length - 4);\n  }\n\n  return bytes;\n};\n\n/**\n * Inflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true if the incoming data has no zlib header or trailer and is\n *          raw DEFLATE data.\n *\n * @return the inflated data as a string, null on error.\n */\nutil.inflate = function(api, bytes, raw) {\n  // TODO: add zlib header and trailer if necessary/possible\n  var rval = api.inflate(util.encode64(bytes)).rval;\n  return (rval === null) ? null : util.decode64(rval);\n};\n\n/**\n * Sets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param obj the storage object, null to remove.\n */\nvar _setStorageObject = function(api, id, obj) {\n  if(!api) {\n    throw new Error('WebStorage not available.');\n  }\n\n  var rval;\n  if(obj === null) {\n    rval = api.removeItem(id);\n  } else {\n    // json-encode and base64-encode object\n    obj = util.encode64(JSON.stringify(obj));\n    rval = api.setItem(id, obj);\n  }\n\n  // handle potential flash error\n  if(typeof(rval) !== 'undefined' && rval.rval !== true) {\n    var error = new Error(rval.error.message);\n    error.id = rval.error.id;\n    error.name = rval.error.name;\n    throw error;\n  }\n};\n\n/**\n * Gets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n *\n * @return the storage object entry or null if none exists.\n */\nvar _getStorageObject = function(api, id) {\n  if(!api) {\n    throw new Error('WebStorage not available.');\n  }\n\n  // get the existing entry\n  var rval = api.getItem(id);\n\n  /* Note: We check api.init because we can't do (api == localStorage)\n    on IE because of \"Class doesn't support Automation\" exception. Only\n    the flash api has an init method so this works too, but we need a\n    better solution in the future. */\n\n  // flash returns item wrapped in an object, handle special case\n  if(api.init) {\n    if(rval.rval === null) {\n      if(rval.error) {\n        var error = new Error(rval.error.message);\n        error.id = rval.error.id;\n        error.name = rval.error.name;\n        throw error;\n      }\n      // no error, but also no item\n      rval = null;\n    } else {\n      rval = rval.rval;\n    }\n  }\n\n  // handle decoding\n  if(rval !== null) {\n    // base64-decode and json-decode data\n    rval = JSON.parse(util.decode64(rval));\n  }\n\n  return rval;\n};\n\n/**\n * Stores an item in local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n */\nvar _setItem = function(api, id, key, data) {\n  // get storage object\n  var obj = _getStorageObject(api, id);\n  if(obj === null) {\n    // create a new storage object\n    obj = {};\n  }\n  // update key\n  obj[key] = data;\n\n  // set storage object\n  _setStorageObject(api, id, obj);\n};\n\n/**\n * Gets an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n *\n * @return the item.\n */\nvar _getItem = function(api, id, key) {\n  // get storage object\n  var rval = _getStorageObject(api, id);\n  if(rval !== null) {\n    // return data at key\n    rval = (key in rval) ? rval[key] : null;\n  }\n\n  return rval;\n};\n\n/**\n * Removes an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n */\nvar _removeItem = function(api, id, key) {\n  // get storage object\n  var obj = _getStorageObject(api, id);\n  if(obj !== null && key in obj) {\n    // remove key\n    delete obj[key];\n\n    // see if entry has no keys remaining\n    var empty = true;\n    for(var prop in obj) {\n      empty = false;\n      break;\n    }\n    if(empty) {\n      // remove entry entirely if no keys are left\n      obj = null;\n    }\n\n    // set storage object\n    _setStorageObject(api, id, obj);\n  }\n};\n\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n */\nvar _clearItems = function(api, id) {\n  _setStorageObject(api, id, null);\n};\n\n/**\n * Calls a storage function.\n *\n * @param func the function to call.\n * @param args the arguments for the function.\n * @param location the location argument.\n *\n * @return the return value from the function.\n */\nvar _callStorageFunction = function(func, args, location) {\n  var rval = null;\n\n  // default storage types\n  if(typeof(location) === 'undefined') {\n    location = ['web', 'flash'];\n  }\n\n  // apply storage types in order of preference\n  var type;\n  var done = false;\n  var exception = null;\n  for(var idx in location) {\n    type = location[idx];\n    try {\n      if(type === 'flash' || type === 'both') {\n        if(args[0] === null) {\n          throw new Error('Flash local storage not available.');\n        }\n        rval = func.apply(this, args);\n        done = (type === 'flash');\n      }\n      if(type === 'web' || type === 'both') {\n        args[0] = localStorage;\n        rval = func.apply(this, args);\n        done = true;\n      }\n    } catch(ex) {\n      exception = ex;\n    }\n    if(done) {\n      break;\n    }\n  }\n\n  if(!done) {\n    throw exception;\n  }\n\n  return rval;\n};\n\n/**\n * Stores an item on local disk.\n *\n * The available types of local storage include 'flash', 'web', and 'both'.\n *\n * The type 'flash' refers to flash local storage (SharedObject). In order\n * to use flash local storage, the 'api' parameter must be valid. The type\n * 'web' refers to WebStorage, if supported by the browser. The type 'both'\n * refers to storing using both 'flash' and 'web', not just one or the\n * other.\n *\n * The location array should list the storage types to use in order of\n * preference:\n *\n * ['flash']: flash only storage\n * ['web']: web only storage\n * ['both']: try to store in both\n * ['flash','web']: store in flash first, but if not available, 'web'\n * ['web','flash']: store in web first, but if not available, 'flash'\n *\n * The location array defaults to: ['web', 'flash']\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n * @param location an array with the preferred types of storage to use.\n */\nutil.setItem = function(api, id, key, data, location) {\n  _callStorageFunction(_setItem, arguments, location);\n};\n\n/**\n * Gets an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n *\n * @return the item.\n */\nutil.getItem = function(api, id, key, location) {\n  return _callStorageFunction(_getItem, arguments, location);\n};\n\n/**\n * Removes an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n */\nutil.removeItem = function(api, id, key, location) {\n  _callStorageFunction(_removeItem, arguments, location);\n};\n\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface if flash is available.\n * @param id the storage ID to use.\n * @param location an array with the preferred types of storage to use.\n */\nutil.clearItems = function(api, id, location) {\n  _callStorageFunction(_clearItems, arguments, location);\n};\n\n/**\n * Check if an object is empty.\n *\n * Taken from:\n * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937\n *\n * @param object the object to check.\n */\nutil.isEmpty = function(obj) {\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Format with simple printf-style interpolation.\n *\n * %%: literal '%'\n * %s,%o: convert next argument into a string.\n *\n * @param format the string to format.\n * @param ... arguments to interpolate into the format string.\n */\nutil.format = function(format) {\n  var re = /%./g;\n  // current match\n  var match;\n  // current part\n  var part;\n  // current arg index\n  var argi = 0;\n  // collected parts to recombine later\n  var parts = [];\n  // last index found\n  var last = 0;\n  // loop while matches remain\n  while((match = re.exec(format))) {\n    part = format.substring(last, re.lastIndex - 2);\n    // don't add empty strings (ie, parts between %s%s)\n    if(part.length > 0) {\n      parts.push(part);\n    }\n    last = re.lastIndex;\n    // switch on % code\n    var code = match[0][1];\n    switch(code) {\n    case 's':\n    case 'o':\n      // check if enough arguments were given\n      if(argi < arguments.length) {\n        parts.push(arguments[argi++ + 1]);\n      } else {\n        parts.push('<?>');\n      }\n      break;\n    // FIXME: do proper formating for numbers, etc\n    //case 'f':\n    //case 'd':\n    case '%':\n      parts.push('%');\n      break;\n    default:\n      parts.push('<%' + code + '?>');\n    }\n  }\n  // add trailing part of format string\n  parts.push(format.substring(last));\n  return parts.join('');\n};\n\n/**\n * Formats a number.\n *\n * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/\n */\nutil.formatNumber = function(number, decimals, dec_point, thousands_sep) {\n  // http://kevin.vanzonneveld.net\n  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // +     bugfix by: Michael White (http://crestidg.com)\n  // +     bugfix by: Benjamin Lupton\n  // +     bugfix by: Allan Jensen (http://www.winternet.no)\n  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  // *     example 1: number_format(1234.5678, 2, '.', '');\n  // *     returns 1: 1234.57\n\n  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;\n  var d = dec_point === undefined ? ',' : dec_point;\n  var t = thousands_sep === undefined ?\n   '.' : thousands_sep, s = n < 0 ? '-' : '';\n  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';\n  var j = (i.length > 3) ? i.length % 3 : 0;\n  return s + (j ? i.substr(0, j) + t : '') +\n    i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + t) +\n    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');\n};\n\n/**\n * Formats a byte size.\n *\n * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/\n */\nutil.formatSize = function(size) {\n  if(size >= 1073741824) {\n    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';\n  } else if(size >= 1048576) {\n    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';\n  } else if(size >= 1024) {\n    size = util.formatNumber(size / 1024, 0) + ' KiB';\n  } else {\n    size = util.formatNumber(size, 0) + ' bytes';\n  }\n  return size;\n};\n\n/**\n * Converts an IPv4 or IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv4 or IPv6 address to convert.\n *\n * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't\n *         be parsed.\n */\nutil.bytesFromIP = function(ip) {\n  if(ip.indexOf('.') !== -1) {\n    return util.bytesFromIPv4(ip);\n  }\n  if(ip.indexOf(':') !== -1) {\n    return util.bytesFromIPv6(ip);\n  }\n  return null;\n};\n\n/**\n * Converts an IPv4 string representation into bytes (in network order).\n *\n * @param ip the IPv4 address to convert.\n *\n * @return the 4-byte address or null if the address can't be parsed.\n */\nutil.bytesFromIPv4 = function(ip) {\n  ip = ip.split('.');\n  if(ip.length !== 4) {\n    return null;\n  }\n  var b = util.createBuffer();\n  for(var i = 0; i < ip.length; ++i) {\n    var num = parseInt(ip[i], 10);\n    if(isNaN(num)) {\n      return null;\n    }\n    b.putByte(num);\n  }\n  return b.getBytes();\n};\n\n/**\n * Converts an IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv6 address to convert.\n *\n * @return the 16-byte address or null if the address can't be parsed.\n */\nutil.bytesFromIPv6 = function(ip) {\n  var blanks = 0;\n  ip = ip.split(':').filter(function(e) {\n    if(e.length === 0) ++blanks;\n    return true;\n  });\n  var zeros = (8 - ip.length + blanks) * 2;\n  var b = util.createBuffer();\n  for(var i = 0; i < 8; ++i) {\n    if(!ip[i] || ip[i].length === 0) {\n      b.fillWithByte(0, zeros);\n      zeros = 0;\n      continue;\n    }\n    var bytes = util.hexToBytes(ip[i]);\n    if(bytes.length < 2) {\n      b.putByte(0);\n    }\n    b.putBytes(bytes);\n  }\n  return b.getBytes();\n};\n\n/**\n * Converts 4-bytes into an IPv4 string representation or 16-bytes into\n * an IPv6 string representation. The bytes must be in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,\n *         respectively, are given, otherwise null.\n */\nutil.bytesToIP = function(bytes) {\n  if(bytes.length === 4) {\n    return util.bytesToIPv4(bytes);\n  }\n  if(bytes.length === 16) {\n    return util.bytesToIPv6(bytes);\n  }\n  return null;\n};\n\n/**\n * Converts 4-bytes into an IPv4 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 string representation or null for an invalid # of bytes.\n */\nutil.bytesToIPv4 = function(bytes) {\n  if(bytes.length !== 4) {\n    return null;\n  }\n  var ip = [];\n  for(var i = 0; i < bytes.length; ++i) {\n    ip.push(bytes.charCodeAt(i));\n  }\n  return ip.join('.');\n};\n\n/**\n * Converts 16-bytes into an IPv16 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv16 string representation or null for an invalid # of bytes.\n */\nutil.bytesToIPv6 = function(bytes) {\n  if(bytes.length !== 16) {\n    return null;\n  }\n  var ip = [];\n  var zeroGroups = [];\n  var zeroMaxGroup = 0;\n  for(var i = 0; i < bytes.length; i += 2) {\n    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);\n    // canonicalize zero representation\n    while(hex[0] === '0' && hex !== '0') {\n      hex = hex.substr(1);\n    }\n    if(hex === '0') {\n      var last = zeroGroups[zeroGroups.length - 1];\n      var idx = ip.length;\n      if(!last || idx !== last.end + 1) {\n        zeroGroups.push({start: idx, end: idx});\n      } else {\n        last.end = idx;\n        if((last.end - last.start) >\n          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {\n          zeroMaxGroup = zeroGroups.length - 1;\n        }\n      }\n    }\n    ip.push(hex);\n  }\n  if(zeroGroups.length > 0) {\n    var group = zeroGroups[zeroMaxGroup];\n    // only shorten group of length > 0\n    if(group.end - group.start > 0) {\n      ip.splice(group.start, group.end - group.start + 1, '');\n      if(group.start === 0) {\n        ip.unshift('');\n      }\n      if(group.end === 7) {\n        ip.push('');\n      }\n    }\n  }\n  return ip.join(':');\n};\n\n/**\n * Estimates the number of processes that can be run concurrently. If\n * creating Web Workers, keep in mind that the main JavaScript process needs\n * its own core.\n *\n * @param options the options to use:\n *          update true to force an update (not use the cached value).\n * @param callback(err, max) called once the operation completes.\n */\nutil.estimateCores = function(options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  if('cores' in util && !options.update) {\n    return callback(null, util.cores);\n  }\n  if(typeof navigator !== 'undefined' &&\n    'hardwareConcurrency' in navigator &&\n    navigator.hardwareConcurrency > 0) {\n    util.cores = navigator.hardwareConcurrency;\n    return callback(null, util.cores);\n  }\n  if(typeof Worker === 'undefined') {\n    // workers not available\n    util.cores = 1;\n    return callback(null, util.cores);\n  }\n  if(typeof Blob === 'undefined') {\n    // can't estimate, default to 2\n    util.cores = 2;\n    return callback(null, util.cores);\n  }\n\n  // create worker concurrency estimation code as blob\n  var blobUrl = URL.createObjectURL(new Blob(['(',\n    function() {\n      self.addEventListener('message', function(e) {\n        // run worker for 4 ms\n        var st = Date.now();\n        var et = st + 4;\n        while(Date.now() < et);\n        self.postMessage({st: st, et: et});\n      });\n    }.toString(),\n  ')()'], {type: 'application/javascript'}));\n\n  // take 5 samples using 16 workers\n  sample([], 5, 16);\n\n  function sample(max, samples, numWorkers) {\n    if(samples === 0) {\n      // get overlap average\n      var avg = Math.floor(max.reduce(function(avg, x) {\n        return avg + x;\n      }, 0) / max.length);\n      util.cores = Math.max(1, avg);\n      URL.revokeObjectURL(blobUrl);\n      return callback(null, util.cores);\n    }\n    map(numWorkers, function(err, results) {\n      max.push(reduce(numWorkers, results));\n      sample(max, samples - 1, numWorkers);\n    });\n  }\n\n  function map(numWorkers, callback) {\n    var workers = [];\n    var results = [];\n    for(var i = 0; i < numWorkers; ++i) {\n      var worker = new Worker(blobUrl);\n      worker.addEventListener('message', function(e) {\n        results.push(e.data);\n        if(results.length === numWorkers) {\n          for(var i = 0; i < numWorkers; ++i) {\n            workers[i].terminate();\n          }\n          callback(null, results);\n        }\n      });\n      workers.push(worker);\n    }\n    for(var i = 0; i < numWorkers; ++i) {\n      workers[i].postMessage(i);\n    }\n  }\n\n  function reduce(numWorkers, results) {\n    // find overlapping time windows\n    var overlaps = [];\n    for(var n = 0; n < numWorkers; ++n) {\n      var r1 = results[n];\n      var overlap = overlaps[n] = [];\n      for(var i = 0; i < numWorkers; ++i) {\n        if(n === i) {\n          continue;\n        }\n        var r2 = results[i];\n        if((r1.st > r2.st && r1.st < r2.et) ||\n          (r2.st > r1.st && r2.st < r1.et)) {\n          overlap.push(i);\n        }\n      }\n    }\n    // get maximum overlaps ... don't include overlapping worker itself\n    // as the main JS process was also being scheduled during the work and\n    // would have to be subtracted from the estimate anyway\n    return overlaps.reduce(function(max, overlap) {\n      return Math.max(max, overlap.length);\n    }, 0);\n  }\n};\n"],"sourceRoot":""}