{"version":3,"sources":["webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pbkdf2.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/mgf1.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/oids.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pbe.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pem.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/mgf.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/log.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/md5.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/md.all.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/kem.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/md.js"],"names":["forge","crypto","pkcs5","util","isNodejs","options","usePureJavaScript","module","exports","pbkdf2","p","s","c","dkLen","md","callback","pbkdf2Sync","length","Buffer","from","err","key","toString","algorithms","Error","create","hLen","digestLength","len","Math","ceil","r","prf","hmac","start","xor","u_c","u_c1","dk","i","update","int32ToBytes","digest","getBytes","j","xorBytes","substr","outer","inner","setImmediate","mgf","mgf1","generate","seed","maskLen","t","ByteBuffer","putInt32","putBuffer","truncate","pki","oids","_IN","id","name","_I_","BigInteger","jsbn","asn1","pbe","encryptedPrivateKeyValidator","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","OID","capture","captureAsn1","OCTETSTRING","PBES2AlgorithmsValidator","INTEGER","optional","pkcs12PbeParamsValidator","hash","bytes","prfOidToMessageDigest","prfOid","prfAlgorithm","derToOid","error","oid","supported","prfAlgorithmToMessageDigest","factory","sha512","toLowerCase","algorithm","createPbkdf2Params","salt","countBytes","params","push","hexToBytes","oidToDer","NULL","encryptPrivateKeyInfo","obj","password","saltSize","count","encryptionAlgorithm","encryptedData","random","getBytesSync","integerToDer","indexOf","ivLen","encOid","cipherFn","aes","createEncryptionCipher","des","toUpperCase","iv","cipher","toDer","finish","output","saltBytes","generatePkcs12Key","rval","decryptPrivateKeyInfo","errors","validate","encryptionOid","getCipher","encryptionParams","encrypted","createBuffer","fromDer","encryptedPrivateKeyToPem","epki","maxline","msg","body","pem","encode","encryptedPrivateKeyFromPem","decode","headerType","procType","encryptRsaPrivateKey","rsaKey","legacy","wrapRsaPrivateKey","privateKeyToAsn1","opensslDeriveBytes","version","dekInfo","parameters","bytesToHex","decryptRsaPrivateKey","createDecryptionCipher","rc2","privateKeyFromAsn1","iter","n","l","sha1","u","v","blockLength","result","passBuf","undefined","putInt16","charCodeAt","D","fillWithByte","Slen","S","putByte","at","Plen","P","I","buf","putBytes","round","B","k","Inew","chunk","x","setAt","getCipherForPBES2","getCipherForPKCS12PBE","supportedOids","kdfOid","kdfSalt","kdfIterationCount","getInt","encIv","dIvLen","iterations","startDecrypting","md5","digests","join","foldHeader","header","values","insertSpace","match","$1","replace","candidate","insert","ltrim","str","String","contentDomain","headers","encode64","rMessage","rHeader","rCRLF","exec","decode64","lines","split","li","line","nl","next","test","vi","log","levels","sLevelInfo","sLoggers","sConsoleLogger","LEVEL_LOCKED","NO_LEVEL_CHECK","INTERPOLATE","level","index","logMessage","message","messageLevelIndex","logger","flags","f","loggerLevelIndex","prepareStandard","standard","category","prepareFull","args","concat","full","format","apply","this","prepareStandardFull","standardFull","Array","prototype","slice","call","arguments","timestamp","Date","makeLogger","logFunction","setLevel","aValidLevel","lock","addLogger","console","warn","info","debug","levelHandlers","warning","verbose","handler","window","location","query","URL","href","searchParams","has","get","consoleLogger","_initialized","_init","_state","_input","_w","messageLength","fullMessageLength","messageLengthSize","messageLength64","int32s","h0","h1","h2","h3","encoding","encodeUtf8","_update","read","compact","finalBlock","remaining","overflow","_padding","bits","carry","putInt32Le","s2","_g","_r","_k","fromCharCode","fillString","floor","abs","sin","w","a","b","d","getInt32Le","kem","_createKDF","kdf","counterStart","rsa","prng","publicKey","keyLength","byteLength","bitLength","mod","compareTo","ONE","zeros","encapsulation","encrypt","privateKey","decrypt","kdf1","kdf2"],"mappings":"8GAAA,YASA,IAAIA,EAAQ,EAAQ,QACpB,EAAQ,QACR,EAAQ,QACR,EAAQ,QAER,IAEIC,EAFAC,EAAQF,EAAME,MAAQF,EAAME,OAAS,GAGtCF,EAAMG,KAAKC,WAAaJ,EAAMK,QAAQC,oBACvCL,EAAS,EAAQ,IAmBnBM,EAAOC,QAAUR,EAAMS,OAASP,EAAMO,OAAS,SAC7CC,EAAGC,EAAGC,EAAGC,EAAOC,EAAIC,GAQpB,GAPiB,oBAAPD,IACRC,EAAWD,EACXA,EAAK,MAKJd,EAAMG,KAAKC,WAAaJ,EAAMK,QAAQC,mBACvCL,EAAOQ,SAAkB,OAAPK,GAA6B,kBAAPA,KACvCb,EAAOe,WAAWC,OAAS,IAAOH,GAAa,SAAPA,GAOzC,MANiB,kBAAPA,IAERA,EAAK,QAEPJ,EAAIQ,EAAOC,KAAKT,EAAG,UACnBC,EAAIO,EAAOC,KAAKR,EAAG,UACfI,EAM4B,IAA7Bd,EAAOe,WAAWC,OACZhB,EAAOQ,OAAOC,EAAGC,EAAGC,EAAGC,GAAO,SAASO,EAAKC,GACjD,GAAGD,EACD,OAAOL,EAASK,GAElBL,EAAS,KAAMM,EAAIC,SAAS,cAGzBrB,EAAOQ,OAAOC,EAAGC,EAAGC,EAAGC,EAAOC,GAAI,SAASM,EAAKC,GACrD,GAAGD,EACD,OAAOL,EAASK,GAElBL,EAAS,KAAMM,EAAIC,SAAS,cAjBI,IAA7BrB,EAAOe,WAAWC,OACZhB,EAAOe,WAAWN,EAAGC,EAAGC,EAAGC,GAAOS,SAAS,UAE7CrB,EAAOe,WAAWN,EAAGC,EAAGC,EAAGC,EAAOC,GAAIQ,SAAS,UAsB1D,GAJiB,qBAAPR,GAA6B,OAAPA,IAE9BA,EAAK,QAEU,kBAAPA,EAAiB,CACzB,KAAKA,KAAMd,EAAMc,GAAGS,YAClB,MAAM,IAAIC,MAAM,2BAA6BV,GAE/CA,EAAKd,EAAMc,GAAGA,GAAIW,SAGpB,IAAIC,EAAOZ,EAAGa,aAId,GAAGd,EAAS,WAAaa,EAAO,CAC9B,IAAIN,EAAM,IAAII,MAAM,4BACpB,GAAGT,EACD,OAAOA,EAASK,GAElB,MAAMA,EASR,IAAIQ,EAAMC,KAAKC,KAAKjB,EAAQa,GACxBK,EAAIlB,GAASe,EAAM,GAAKF,EA2BxBM,EAAMhC,EAAMiC,KAAKR,SACrBO,EAAIE,MAAMpB,EAAIJ,GACd,IACIyB,EAAKC,EAAKC,EADVC,EAAK,GAIT,IAAIvB,EAAU,CACZ,IAAI,IAAIwB,EAAI,EAAGA,GAAKX,IAAOW,EAAG,CAE5BP,EAAIE,MAAM,KAAM,MAChBF,EAAIQ,OAAO7B,GACXqB,EAAIQ,OAAOxC,EAAMG,KAAKsC,aAAaF,IACnCJ,EAAME,EAAOL,EAAIU,SAASC,WAG1B,IAAI,IAAIC,EAAI,EAAGA,GAAKhC,IAAKgC,EACvBZ,EAAIE,MAAM,KAAM,MAChBF,EAAIQ,OAAOH,GACXD,EAAMJ,EAAIU,SAASC,WAEnBR,EAAMnC,EAAMG,KAAK0C,SAASV,EAAKC,EAAKV,GACpCW,EAAOD,EAOTE,GAAOC,EAAIX,EAAOO,EAAMA,EAAIW,OAAO,EAAGf,GAGxC,OAAOO,EAILC,EAAI,EACR,SAASQ,IACP,GAAGR,EAAIX,EAEL,OAAOb,EAAS,KAAMuB,GAIxBN,EAAIE,MAAM,KAAM,MAChBF,EAAIQ,OAAO7B,GACXqB,EAAIQ,OAAOxC,EAAMG,KAAKsC,aAAaF,IACnCJ,EAAME,EAAOL,EAAIU,SAASC,WAG1BC,EAAI,EACJI,IAGF,SAASA,IACP,GAAGJ,GAAKhC,EAQN,OAPAoB,EAAIE,MAAM,KAAM,MAChBF,EAAIQ,OAAOH,GACXD,EAAMJ,EAAIU,SAASC,WAEnBR,EAAMnC,EAAMG,KAAK0C,SAASV,EAAKC,EAAKV,GACpCW,EAAOD,IACLQ,EACK5C,EAAMG,KAAK8C,aAAaD,GAOjCV,GAAOC,EAAIX,EAAOO,EAAMA,EAAIW,OAAO,EAAGf,KAEpCQ,EACFQ,IAGFA,O,oDCxMF,IAAI/C,EAAQ,EAAQ,QACpB,EAAQ,QAERA,EAAMkD,IAAMlD,EAAMkD,KAAO,GACzB,IAAIC,EAAO5C,EAAOC,QAAUR,EAAMkD,IAAIC,KAAOnD,EAAMmD,KAAOnD,EAAMmD,MAAQ,GASxEA,EAAK1B,OAAS,SAASX,GACrB,IAAIoC,EAAM,CAQRE,SAAU,SAASC,EAAMC,GAMvB,IAJA,IAAIC,EAAI,IAAIvD,EAAMG,KAAKqD,WAGnB5B,EAAMC,KAAKC,KAAKwB,EAAUxC,EAAGa,cACzBY,EAAI,EAAGA,EAAIX,EAAKW,IAAK,CAE3B,IAAI3B,EAAI,IAAIZ,EAAMG,KAAKqD,WACvB5C,EAAE6C,SAASlB,GAIXzB,EAAGoB,QACHpB,EAAG0B,OAAOa,EAAOzC,EAAE+B,YACnBY,EAAEG,UAAU5C,EAAG4B,UAKjB,OADAa,EAAEI,SAASJ,EAAEtC,SAAWqC,GACjBC,EAAEZ,aAIb,OAAOO,I,uBChDT,IAAIlD,EAAQ,EAAQ,QAEpBA,EAAM4D,IAAM5D,EAAM4D,KAAO,GACzB,IAAIC,EAAOtD,EAAOC,QAAUR,EAAM4D,IAAIC,KAAO7D,EAAM6D,KAAO7D,EAAM6D,MAAQ,GAGxE,SAASC,EAAIC,EAAIC,GACfH,EAAKE,GAAMC,EACXH,EAAKG,GAAQD,EAGf,SAASE,EAAIF,EAAIC,GACfH,EAAKE,GAAMC,EAIbF,EAAI,uBAAwB,iBAI5BA,EAAI,uBAAwB,wBAC5BA,EAAI,uBAAwB,yBAC5BA,EAAI,uBAAwB,cAC5BA,EAAI,uBAAwB,QAC5BA,EAAI,uBAAwB,cAC5BA,EAAI,wBAAyB,cAC7BA,EAAI,wBAAyB,2BAC7BA,EAAI,wBAAyB,2BAC7BA,EAAI,wBAAyB,2BAE7BA,EAAI,cAAe,cAEnBA,EAAI,oBAAqB,iBAEzBA,EAAI,eAAgB,UAEpBA,EAAI,gBAAiB,QAErBA,EAAI,gBAAiB,wBACrBA,EAAI,yBAA0B,UAC9BA,EAAI,yBAA0B,UAC9BA,EAAI,yBAA0B,UAC9BA,EAAI,yBAA0B,UAC9BA,EAAI,yBAA0B,cAC9BA,EAAI,yBAA0B,cAC9BA,EAAI,qBAAsB,OAC1BA,EAAI,qBAAsB,OAG1BA,EAAI,uBAAwB,QAC5BA,EAAI,uBAAwB,cAC5BA,EAAI,uBAAwB,iBAC5BA,EAAI,uBAAwB,0BAC5BA,EAAI,uBAAwB,gBAC5BA,EAAI,uBAAwB,iBAG5BA,EAAI,uBAAwB,gBAC5BA,EAAI,uBAAwB,oBAC5BA,EAAI,uBAAwB,eAC5BA,EAAI,uBAAwB,iBAC5BA,EAAI,uBAAwB,eAC5BA,EAAI,uBAAwB,oBAC5BA,EAAI,uBAAwB,qBAC5BA,EAAI,uBAAwB,uBAC5BA,EAAI,wBAAyB,oBAE7BA,EAAI,wBAAyB,gBAC7BA,EAAI,wBAAyB,cAC7BA,EAAI,0BAA2B,mBAG/BA,EAAI,6BAA8B,UAClCA,EAAI,6BAA8B,uBAClCA,EAAI,6BAA8B,WAClCA,EAAI,6BAA8B,UAClCA,EAAI,6BAA8B,aAClCA,EAAI,6BAA8B,mBAGlCA,EAAI,wBAAyB,cAC7BA,EAAI,wBAAyB,eAE7BA,EAAI,0BAA2B,0BAC/BA,EAAI,0BAA2B,yBAC/BA,EAAI,0BAA2B,mCAC/BA,EAAI,0BAA2B,mCAC/BA,EAAI,0BAA2B,8BAC/BA,EAAI,0BAA2B,6BAG/BA,EAAI,qBAAsB,gBAC1BA,EAAI,qBAAsB,kBAC1BA,EAAI,qBAAsB,kBAC1BA,EAAI,sBAAuB,kBAC3BA,EAAI,sBAAuB,kBAG3BA,EAAI,qBAAsB,gBAC1BA,EAAI,yBAA0B,cAC9BA,EAAI,0BAA2B,cAC/BA,EAAI,0BAA2B,cAG/BA,EAAI,UAAW,cACfA,EAAI,UAAW,WACfA,EAAI,UAAW,gBACfA,EAAI,UAAW,eACfA,EAAI,UAAW,gBACfA,EAAI,UAAW,uBACfA,EAAI,UAAW,iBACfA,EAAI,WAAY,oBAChBA,EAAI,WAAY,0BAChBA,EAAI,WAAY,SAChBA,EAAI,WAAY,eAChBA,EAAI,WAAY,oBAChBA,EAAI,WAAY,cAChBA,EAAI,WAAY,aAChBA,EAAI,2BAA4B,kDAChCA,EAAI,2BAA4B,0CAGhCA,EAAI,wBAAyB,cAC7BA,EAAI,yBAA0B,aAC9BG,EAAI,WAAY,0BAChBA,EAAI,WAAY,iBAChBA,EAAI,WAAY,uBAChBA,EAAI,WAAY,uBAChBA,EAAI,WAAY,iBAChBA,EAAI,WAAY,sBAChBA,EAAI,WAAY,kBAChBA,EAAI,WAAY,iBAChBA,EAAI,WAAY,8BAChBA,EAAI,YAAa,oBACjBA,EAAI,YAAa,mBACjBA,EAAI,YAAa,qBACjBA,EAAI,YAAa,oBACjBH,EAAI,YAAa,wBACjBA,EAAI,YAAa,YACjBG,EAAI,YAAa,yBACjBH,EAAI,YAAa,kBACjBA,EAAI,YAAa,iBACjBA,EAAI,YAAa,oBACjBG,EAAI,YAAa,aACjBA,EAAI,YAAa,aACjBA,EAAI,YAAa,kBACjBA,EAAI,YAAa,mBACjBA,EAAI,YAAa,kBACjBA,EAAI,YAAa,yBACjBA,EAAI,YAAa,4BACjBA,EAAI,YAAa,qBACjBA,EAAI,YAAa,4BACjBA,EAAI,YAAa,qBACjBA,EAAI,YAAa,mBACjBH,EAAI,YAAa,yBACjBA,EAAI,YAAa,uBACjBG,EAAI,YAAa,kBACjBA,EAAI,YAAa,qBACjBH,EAAI,YAAa,0BACjBG,EAAI,YAAa,qBACjBH,EAAI,YAAa,eACjBG,EAAI,YAAa,eACjBA,EAAI,YAAa,oBAGjBH,EAAI,0BAA2B,iBAC/BA,EAAI,oBAAqB,uBACzBA,EAAI,oBAAqB,cACzBA,EAAI,oBAAqB,cACzBA,EAAI,oBAAqB,eACzBA,EAAI,oBAAqB,mBACzBA,EAAI,oBAAqB,iB,uBC/JzB,IAAI9D,EAAQ,EAAQ,QAapB,GAZA,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,QAEiB,qBAAfkE,EACR,IAAIA,EAAalE,EAAMmE,KAAKD,WAI9B,IAAIE,EAAOpE,EAAMoE,KAGbR,EAAM5D,EAAM4D,IAAM5D,EAAM4D,KAAO,GACnCrD,EAAOC,QAAUoD,EAAIS,IAAMrE,EAAMqE,IAAMrE,EAAMqE,KAAO,GACpD,IAAIR,EAAOD,EAAIC,KAIXS,EAA+B,CACjCN,KAAM,0BACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbC,MAAO,CAAC,CACNd,KAAM,8CACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbC,MAAO,CAAC,CACNd,KAAM,gCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKI,IAChBF,aAAa,EACbG,QAAS,iBACR,CACDhB,KAAM,iCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbI,YAAa,sBAEd,CAEDjB,KAAM,wCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKO,YAChBL,aAAa,EACbG,QAAS,mBAMTG,EAA2B,CAC7BnB,KAAM,kBACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbC,MAAO,CAAC,CACNd,KAAM,oCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbC,MAAO,CAAC,CACNd,KAAM,wCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKI,IAChBF,aAAa,EACbG,QAAS,UACR,CACDhB,KAAM,yBACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbC,MAAO,CAAC,CACNd,KAAM,8BACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKO,YAChBL,aAAa,EACbG,QAAS,WACR,CACDhB,KAAM,wCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKS,QAChBP,aAAa,EACbG,QAAS,qBACR,CACDhB,KAAM,mCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKS,QAChBP,aAAa,EACbQ,UAAU,EACVL,QAAS,aACR,CAEDhB,KAAM,6BACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbQ,UAAU,EACVP,MAAO,CAAC,CACNd,KAAM,uCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKI,IAChBF,aAAa,EACbG,QAAS,gBAId,CACDhB,KAAM,mCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbC,MAAO,CAAC,CACNd,KAAM,uCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKI,IAChBF,aAAa,EACbG,QAAS,UACR,CACDhB,KAAM,sCACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKO,YAChBL,aAAa,EACbG,QAAS,aAKXM,EAA2B,CAC7BtB,KAAM,mBACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKC,SAChBC,aAAa,EACbC,MAAO,CAAC,CACNd,KAAM,wBACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKO,YAChBL,aAAa,EACbG,QAAS,QACR,CACDhB,KAAM,8BACNO,SAAUH,EAAKI,MAAMC,UACrBC,KAAMN,EAAKO,KAAKS,QAChBP,aAAa,EACbG,QAAS,gBAuwBb,SAASO,EAAKzE,EAAI0E,GAChB,OAAO1E,EAAGoB,QAAQM,OAAOgD,GAAO9C,SAASC,WAG3C,SAAS8C,EAAsBC,GAE7B,IAAIC,EACJ,GAAID,GAIF,GADAC,EAAe/B,EAAIC,KAAKO,EAAKwB,SAASF,KAClCC,EAAc,CAChB,IAAIE,EAAQ,IAAIrE,MAAM,wBAKtB,MAJAqE,EAAMC,IAAMJ,EACZG,EAAME,UAAY,CAChB,eAAgB,iBAAkB,iBAAkB,iBACpD,kBACIF,QATRF,EAAe,eAYjB,OAAOK,EAA4BL,GAGrC,SAASK,EAA4BL,GACnC,IAAIM,EAAUjG,EAAMc,GACpB,OAAO6E,GACP,IAAK,iBACHM,EAAUjG,EAAMc,GAAGoF,OACrB,IAAK,eACL,IAAK,iBACL,IAAK,iBACL,IAAK,iBACHP,EAAeA,EAAa7C,OAAO,GAAGqD,cACtC,MACF,QACE,IAAIN,EAAQ,IAAIrE,MAAM,8BAKtB,MAJAqE,EAAMO,UAAYT,EAClBE,EAAME,UAAY,CAChB,eAAgB,iBAAkB,iBAAkB,iBACpD,kBACIF,EAER,IAAII,KAAaN,KAAgBM,GAC/B,MAAM,IAAIzE,MAAM,2BAA6BmE,GAE/C,OAAOM,EAAQN,GAAclE,SAG/B,SAAS4E,EAAmBC,EAAMC,EAAY1F,EAAO8E,GACnD,IAAIa,EAASpC,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAEvER,EAAK3C,OACH2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKO,aAAa,EAAOoB,GAEtDlC,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKS,SAAS,EACnDmB,EAAW5D,cAiBf,MAdoB,iBAAjBgD,GACDa,EAAO1B,MAAM2B,KAEXrC,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKS,SAAS,EACnDpF,EAAMG,KAAKuG,WAAW7F,EAAMS,SAAS,MAEvC8C,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAE1DR,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKI,KAAK,EAC/CX,EAAKuC,SAAS/C,EAAIC,KAAK8B,IAAehD,YAExCyB,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKiC,MAAM,EAAO,OAGxDJ,EAnyBT5C,EAAIiD,sBAAwB,SAASC,EAAKC,EAAU1G,GAElDA,EAAUA,GAAW,GACrBA,EAAQ2G,SAAW3G,EAAQ2G,UAAY,EACvC3G,EAAQ4G,MAAQ5G,EAAQ4G,OAAS,KACjC5G,EAAQ+F,UAAY/F,EAAQ+F,WAAa,SACzC/F,EAAQsF,aAAetF,EAAQsF,cAAgB,OAG/C,IAGI9E,EACAqG,EACAC,EALAb,EAAOtG,EAAMoH,OAAOC,aAAahH,EAAQ2G,UACzCC,EAAQ5G,EAAQ4G,MAChBV,EAAanC,EAAKkD,aAAaL,GAInC,GAAwC,IAArC5G,EAAQ+F,UAAUmB,QAAQ,QAAsC,QAAtBlH,EAAQ+F,UAAqB,CAExE,IAAIoB,EAAOC,EAAQC,EACnB,OAAOrH,EAAQ+F,WACf,IAAK,SACHvF,EAAQ,GACR2G,EAAQ,GACRC,EAAS5D,EAAK,cACd6D,EAAW1H,EAAM2H,IAAIC,uBACrB,MACF,IAAK,SACH/G,EAAQ,GACR2G,EAAQ,GACRC,EAAS5D,EAAK,cACd6D,EAAW1H,EAAM2H,IAAIC,uBACrB,MACF,IAAK,SACH/G,EAAQ,GACR2G,EAAQ,GACRC,EAAS5D,EAAK,cACd6D,EAAW1H,EAAM2H,IAAIC,uBACrB,MACF,IAAK,MACH/G,EAAQ,EACR2G,EAAQ,EACRC,EAAS5D,EAAK,UACd6D,EAAW1H,EAAM6H,IAAID,uBACrB,MACF,QACE,IAAI/B,EAAQ,IAAIrE,MAAM,6DAEtB,MADAqE,EAAMO,UAAY/F,EAAQ+F,UACpBP,EAIR,IAAIF,EAAe,WAAatF,EAAQsF,aAAamC,cACjDhH,EAAKkF,EAA4BL,GAGjCrD,EAAKtC,EAAME,MAAMO,OAAOsG,EAAUT,EAAMW,EAAOpG,EAAOC,GACtDiH,EAAK/H,EAAMoH,OAAOC,aAAaG,GAC/BQ,EAASN,EAASpF,GACtB0F,EAAO9F,MAAM6F,GACbC,EAAOxF,OAAO4B,EAAK6D,MAAMnB,IACzBkB,EAAOE,SACPf,EAAgBa,EAAOG,OAAOxF,WAG9B,IAAI6D,EAASH,EAAmBC,EAAMC,EAAY1F,EAAO8E,GAEzDuB,EAAsB9C,EAAK3C,OACzB2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAChDR,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKI,KAAK,EAC/CX,EAAKuC,SAAS9C,EAAK,eAAelB,YACpCyB,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAE1DR,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAC1DR,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKI,KAAK,EAC/CX,EAAKuC,SAAS9C,EAAK,gBAAgBlB,YAErC6D,IAGFpC,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAC1DR,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKI,KAAK,EAC/CX,EAAKuC,SAASc,GAAQ9E,YAExByB,EAAK3C,OACH2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKO,aAAa,EAAO6C,aAIvD,IAAyB,SAAtB1H,EAAQ+F,UA0BX,CACDP,EAAQ,IAAIrE,MAAM,6DAEtB,MADAqE,EAAMO,UAAY/F,EAAQ+F,UACpBP,EA3BNhF,EAAQ,GAER,IAAIuH,EAAY,IAAIpI,EAAMG,KAAKqD,WAAW8C,GACtChE,EAAKsB,EAAIS,IAAIgE,kBAAkBtB,EAAUqB,EAAW,EAAGnB,EAAOpG,GAC9DkH,EAAKnE,EAAIS,IAAIgE,kBAAkBtB,EAAUqB,EAAW,EAAGnB,EAAOpG,GAC9DmH,EAAShI,EAAM6H,IAAID,uBAAuBtF,GAC9C0F,EAAO9F,MAAM6F,GACbC,EAAOxF,OAAO4B,EAAK6D,MAAMnB,IACzBkB,EAAOE,SACPf,EAAgBa,EAAOG,OAAOxF,WAE9BuE,EAAsB9C,EAAK3C,OACzB2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAChDR,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKI,KAAK,EAC/CX,EAAKuC,SAAS9C,EAAK,oCAAoClB,YAEzDyB,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAE1DR,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKO,aAAa,EAAOoB,GAEhElC,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKS,SAAS,EACnDmB,EAAW5D,gBAUnB,IAAI2F,EAAOlE,EAAK3C,OAAO2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKC,UAAU,EAAM,CAErEsC,EAEA9C,EAAK3C,OACH2C,EAAKI,MAAMC,UAAWL,EAAKO,KAAKO,aAAa,EAAOiC,KAExD,OAAOmB,GAWT1E,EAAI2E,sBAAwB,SAASzB,EAAKC,GACxC,IAAIuB,EAAO,KAGPtD,EAAU,GACVwD,EAAS,GACb,IAAIpE,EAAKqE,SAAS3B,EAAKxC,EAA8BU,EAASwD,GAAS,CACrE,IAAI3C,EAAQ,IAAIrE,MAAM,+FAGtB,MADAqE,EAAM2C,OAASA,EACT3C,EAIR,IAAIC,EAAM1B,EAAKwB,SAASZ,EAAQ0D,eAC5BV,EAASpE,EAAIS,IAAIsE,UAAU7C,EAAKd,EAAQ4D,iBAAkB7B,GAG1D8B,EAAY7I,EAAMG,KAAK2I,aAAa9D,EAAQmC,eAOhD,OALAa,EAAOxF,OAAOqG,GACXb,EAAOE,WACRI,EAAOlE,EAAK2E,QAAQf,EAAOG,SAGtBG,GAWT1E,EAAIoF,yBAA2B,SAASC,EAAMC,GAE5C,IAAIC,EAAM,CACRzE,KAAM,wBACN0E,KAAMhF,EAAK6D,MAAMgB,GAAMtG,YAEzB,OAAO3C,EAAMqJ,IAAIC,OAAOH,EAAK,CAACD,QAASA,KAWzCtF,EAAI2F,2BAA6B,SAASF,GACxC,IAAIF,EAAMnJ,EAAMqJ,IAAIG,OAAOH,GAAK,GAEhC,GAAgB,0BAAbF,EAAIzE,KAAkC,CACvC,IAAImB,EAAQ,IAAIrE,MAAM,iGAGtB,MADAqE,EAAM4D,WAAaN,EAAIzE,KACjBmB,EAER,GAAGsD,EAAIO,UAAkC,cAAtBP,EAAIO,SAAShF,KAC9B,MAAM,IAAIlD,MAAM,uEAKlB,OAAO4C,EAAK2E,QAAQI,EAAIC,OA6B1BxF,EAAI+F,qBAAuB,SAASC,EAAQ7C,EAAU1G,GAGpD,GADAA,EAAUA,GAAW,IACjBA,EAAQwJ,OAAQ,CAElB,IAAIvB,EAAO1E,EAAIkG,kBAAkBlG,EAAImG,iBAAiBH,IAEtD,OADAtB,EAAO1E,EAAIiD,sBAAsByB,EAAMvB,EAAU1G,GAC1CuD,EAAIoF,yBAAyBV,GAItC,IAAIlC,EACA2B,EACAlH,EACA6G,EACJ,OAAOrH,EAAQ+F,WACf,IAAK,SACHA,EAAY,cACZvF,EAAQ,GACRkH,EAAK/H,EAAMoH,OAAOC,aAAa,IAC/BK,EAAW1H,EAAM2H,IAAIC,uBACrB,MACF,IAAK,SACHxB,EAAY,cACZvF,EAAQ,GACRkH,EAAK/H,EAAMoH,OAAOC,aAAa,IAC/BK,EAAW1H,EAAM2H,IAAIC,uBACrB,MACF,IAAK,SACHxB,EAAY,cACZvF,EAAQ,GACRkH,EAAK/H,EAAMoH,OAAOC,aAAa,IAC/BK,EAAW1H,EAAM2H,IAAIC,uBACrB,MACF,IAAK,OACHxB,EAAY,eACZvF,EAAQ,GACRkH,EAAK/H,EAAMoH,OAAOC,aAAa,GAC/BK,EAAW1H,EAAM6H,IAAID,uBACrB,MACF,IAAK,MACHxB,EAAY,UACZvF,EAAQ,EACRkH,EAAK/H,EAAMoH,OAAOC,aAAa,GAC/BK,EAAW1H,EAAM6H,IAAID,uBACrB,MACF,QACE,IAAI/B,EAAQ,IAAIrE,MAAM,wEACOnB,EAAQ+F,UAAY,MAEjD,MADAP,EAAMO,UAAY/F,EAAQ+F,UACpBP,EAIR,IAAIvD,EAAKtC,EAAMqE,IAAI2F,mBAAmBjD,EAAUgB,EAAGjF,OAAO,EAAG,GAAIjC,GAC7DmH,EAASN,EAASpF,GACtB0F,EAAO9F,MAAM6F,GACbC,EAAOxF,OAAO4B,EAAK6D,MAAMrE,EAAImG,iBAAiBH,KAC9C5B,EAAOE,SAEP,IAAIiB,EAAM,CACRzE,KAAM,kBACNgF,SAAU,CACRO,QAAS,IACTvF,KAAM,aAERwF,QAAS,CACP9D,UAAWA,EACX+D,WAAYnK,EAAMG,KAAKiK,WAAWrC,GAAID,eAExCsB,KAAMpB,EAAOG,OAAOxF,YAEtB,OAAO3C,EAAMqJ,IAAIC,OAAOH,IAW1BvF,EAAIyG,qBAAuB,SAAShB,EAAKtC,GACvC,IAAIuB,EAAO,KAEPa,EAAMnJ,EAAMqJ,IAAIG,OAAOH,GAAK,GAEhC,GAAgB,0BAAbF,EAAIzE,MACQ,gBAAbyE,EAAIzE,MACS,oBAAbyE,EAAIzE,KAA4B,CAChC,IAAImB,EAAQ,IAAIrE,MAAM,gIAGtB,MADAqE,EAAM4D,WAAa5D,EACbA,EAGR,GAAGsD,EAAIO,UAAkC,cAAtBP,EAAIO,SAAShF,KAAsB,CACpD,IAAI7D,EACA6G,EACJ,OAAOyB,EAAIe,QAAQ9D,WACnB,IAAK,UACHvF,EAAQ,EACR6G,EAAW1H,EAAM6H,IAAIyC,uBACrB,MACF,IAAK,eACHzJ,EAAQ,GACR6G,EAAW1H,EAAM6H,IAAIyC,uBACrB,MACF,IAAK,cACHzJ,EAAQ,GACR6G,EAAW1H,EAAM2H,IAAI2C,uBACrB,MACF,IAAK,cACHzJ,EAAQ,GACR6G,EAAW1H,EAAM2H,IAAI2C,uBACrB,MACF,IAAK,cACHzJ,EAAQ,GACR6G,EAAW1H,EAAM2H,IAAI2C,uBACrB,MACF,IAAK,aACHzJ,EAAQ,EACR6G,EAAW,SAASrG,GAClB,OAAOrB,EAAMuK,IAAID,uBAAuBjJ,EAAK,KAE/C,MACF,IAAK,aACHR,EAAQ,EACR6G,EAAW,SAASrG,GAClB,OAAOrB,EAAMuK,IAAID,uBAAuBjJ,EAAK,KAE/C,MACF,IAAK,cACHR,EAAQ,GACR6G,EAAW,SAASrG,GAClB,OAAOrB,EAAMuK,IAAID,uBAAuBjJ,EAAK,MAE/C,MACF,QACMwE,EAAQ,IAAIrE,MAAM,oEACO2H,EAAIe,QAAQ9D,UAAY,MAErD,MADAP,EAAMO,UAAY+C,EAAIe,QAAQ9D,UACxBP,EAIR,IAAIkC,EAAK/H,EAAMG,KAAKuG,WAAWyC,EAAIe,QAAQC,YACvC7H,EAAKtC,EAAMqE,IAAI2F,mBAAmBjD,EAAUgB,EAAGjF,OAAO,EAAG,GAAIjC,GAC7DmH,EAASN,EAASpF,GAGtB,GAFA0F,EAAO9F,MAAM6F,GACbC,EAAOxF,OAAOxC,EAAMG,KAAK2I,aAAaK,EAAIC,QACvCpB,EAAOE,SAGR,OAAOI,EAFPA,EAAON,EAAOG,OAAOxF,gBAKvB2F,EAAOa,EAAIC,KAcb,OAVEd,EADc,0BAAba,EAAIzE,KACEd,EAAI2E,sBAAsBnE,EAAK2E,QAAQT,GAAOvB,GAG9C3C,EAAK2E,QAAQT,GAGV,OAATA,IACDA,EAAO1E,EAAI4G,mBAAmBlC,IAGzBA,GAgBT1E,EAAIS,IAAIgE,kBAAoB,SAAStB,EAAUT,EAAMvC,EAAI0G,EAAMC,EAAG5J,GAChE,IAAI8B,EAAG+H,EAEP,GAAiB,qBAAP7J,GAA6B,OAAPA,EAAa,CAC3C,KAAK,SAAUd,EAAMc,IACnB,MAAM,IAAIU,MAAM,sCAElBV,EAAKd,EAAMc,GAAG8J,KAAKnJ,SAGrB,IAAIoJ,EAAI/J,EAAGa,aACPmJ,EAAIhK,EAAGiK,YACPC,EAAS,IAAIhL,EAAMG,KAAKqD,WAGxByH,EAAU,IAAIjL,EAAMG,KAAKqD,WAC7B,GAAgB,OAAbuD,QAAkCmE,IAAbnE,EAAwB,CAC9C,IAAI4D,EAAI,EAAGA,EAAI5D,EAAS9F,OAAQ0J,IAC9BM,EAAQE,SAASpE,EAASqE,WAAWT,IAEvCM,EAAQE,SAAS,GAInB,IAAIzK,EAAIuK,EAAQhK,SACZN,EAAI2F,EAAKrF,SAIToK,EAAI,IAAIrL,EAAMG,KAAKqD,WACvB6H,EAAEC,aAAavH,EAAI+G,GAMnB,IAAIS,EAAOT,EAAIjJ,KAAKC,KAAKnB,EAAImK,GACzBU,EAAI,IAAIxL,EAAMG,KAAKqD,WACvB,IAAImH,EAAI,EAAGA,EAAIY,EAAMZ,IACnBa,EAAEC,QAAQnF,EAAKoF,GAAGf,EAAIhK,IAOxB,IAAIgL,EAAOb,EAAIjJ,KAAKC,KAAKpB,EAAIoK,GACzBc,EAAI,IAAI5L,EAAMG,KAAKqD,WACvB,IAAImH,EAAI,EAAGA,EAAIgB,EAAMhB,IACnBiB,EAAEH,QAAQR,EAAQS,GAAGf,EAAIjK,IAI3B,IAAImL,EAAIL,EACRK,EAAEnI,UAAUkI,GAMZ,IAHA,IAAIhL,EAAIiB,KAAKC,KAAK4I,EAAIG,GAGdtI,EAAI,EAAGA,GAAK3B,EAAG2B,IAAK,CAE1B,IAAIuJ,EAAM,IAAI9L,EAAMG,KAAKqD,WACzBsI,EAAIC,SAASV,EAAE7F,SACfsG,EAAIC,SAASF,EAAErG,SACf,IAAI,IAAIwG,EAAQ,EAAGA,EAAQvB,EAAMuB,IAC/BlL,EAAGoB,QACHpB,EAAG0B,OAAOsJ,EAAInJ,YACdmJ,EAAMhL,EAAG4B,SAKX,IAAIuJ,EAAI,IAAIjM,EAAMG,KAAKqD,WACvB,IAAImH,EAAI,EAAGA,EAAIG,EAAGH,IAChBsB,EAAER,QAAQK,EAAIJ,GAAGf,EAAIE,IAMvB,IAAIqB,EAAIrK,KAAKC,KAAKnB,EAAImK,GAAKjJ,KAAKC,KAAKpB,EAAIoK,GACrCqB,EAAO,IAAInM,EAAMG,KAAKqD,WAC1B,IAAIZ,EAAI,EAAGA,EAAIsJ,EAAGtJ,IAAK,CACrB,IAAIwJ,EAAQ,IAAIpM,EAAMG,KAAKqD,WAAWqI,EAAElJ,SAASmI,IAC7CuB,EAAI,IACR,IAAI1B,EAAIsB,EAAEhL,SAAW,EAAG0J,GAAK,EAAGA,IAC9B0B,IAAS,EACTA,GAAKJ,EAAEP,GAAGf,GAAKyB,EAAMV,GAAGf,GACxByB,EAAME,MAAM3B,EAAO,IAAJ0B,GAEjBF,EAAKzI,UAAU0I,GAEjBP,EAAIM,EAGJnB,EAAOtH,UAAUoI,GAInB,OADAd,EAAOrH,SAASqH,EAAO/J,SAAWyJ,GAC3BM,GAYTpH,EAAIS,IAAIsE,UAAY,SAAS7C,EAAKU,EAAQO,GACxC,OAAOjB,GACP,KAAKlC,EAAIC,KAAK,cACZ,OAAOD,EAAIS,IAAIkI,kBAAkBzG,EAAKU,EAAQO,GAEhD,KAAKnD,EAAIC,KAAK,mCACd,KAAKD,EAAIC,KAAK,6BACZ,OAAOD,EAAIS,IAAImI,sBAAsB1G,EAAKU,EAAQO,GAEpD,QACE,IAAIlB,EAAQ,IAAIrE,MAAM,0DAOtB,MANAqE,EAAMC,IAAMA,EACZD,EAAM4G,cAAgB,CACpB,aACA,kCACA,6BAEI5G,IAgBVjC,EAAIS,IAAIkI,kBAAoB,SAASzG,EAAKU,EAAQO,GAEhD,IAAI/B,EAAU,GACVwD,EAAS,GACb,IAAIpE,EAAKqE,SAASjC,EAAQrB,EAA0BH,EAASwD,GAAS,CACpE,IAAI3C,EAAQ,IAAIrE,MAAM,wHAGtB,MADAqE,EAAM2C,OAASA,EACT3C,EAKR,GADAC,EAAM1B,EAAKwB,SAASZ,EAAQ0H,QACzB5G,IAAQlC,EAAIC,KAAK,eAAgB,CAC9BgC,EAAQ,IAAIrE,MAAM,+EAItB,MAFAqE,EAAMC,IAAMA,EACZD,EAAM4G,cAAgB,CAAC,eACjB5G,EAGR,GADAC,EAAM1B,EAAKwB,SAASZ,EAAQyC,QACzB3B,IAAQlC,EAAIC,KAAK,eAClBiC,IAAQlC,EAAIC,KAAK,eACjBiC,IAAQlC,EAAIC,KAAK,eACjBiC,IAAQlC,EAAIC,KAAK,iBACjBiC,IAAQlC,EAAIC,KAAK,UAAW,CACxBgC,EAAQ,IAAIrE,MAAM,yEAKtB,MAHAqE,EAAMC,IAAMA,EACZD,EAAM4G,cAAgB,CACpB,aAAc,aAAc,aAAc,eAAgB,UACtD5G,EAIR,IAGIhF,EACA6G,EAJApB,EAAOtB,EAAQ2H,QACf1F,EAAQjH,EAAMG,KAAK2I,aAAa9D,EAAQ4H,mBAI5C,OAHA3F,EAAQA,EAAM4F,OAAO5F,EAAMhG,UAAY,GAGhC2C,EAAIC,KAAKiC,IAChB,IAAK,aACHjF,EAAQ,GACR6G,EAAW1H,EAAM2H,IAAI2C,uBACrB,MACF,IAAK,aACHzJ,EAAQ,GACR6G,EAAW1H,EAAM2H,IAAI2C,uBACrB,MACF,IAAK,aACHzJ,EAAQ,GACR6G,EAAW1H,EAAM2H,IAAI2C,uBACrB,MACF,IAAK,eACHzJ,EAAQ,GACR6G,EAAW1H,EAAM6H,IAAIyC,uBACrB,MACF,IAAK,SACHzJ,EAAQ,EACR6G,EAAW1H,EAAM6H,IAAIyC,uBACrB,MAIF,IAAIxJ,EAAK2E,EAAsBT,EAAQU,QAGnCpD,EAAKtC,EAAME,MAAMO,OAAOsG,EAAUT,EAAMW,EAAOpG,EAAOC,GACtDiH,EAAK/C,EAAQ8H,MACb9E,EAASN,EAASpF,GAGtB,OAFA0F,EAAO9F,MAAM6F,GAENC,GAeTpE,EAAIS,IAAImI,sBAAwB,SAAS1G,EAAKU,EAAQO,GAEpD,IAAI/B,EAAU,GACVwD,EAAS,GACb,IAAIpE,EAAKqE,SAASjC,EAAQlB,EAA0BN,EAASwD,GAAS,CACpE,IAAI3C,EAAQ,IAAIrE,MAAM,wHAGtB,MADAqE,EAAM2C,OAASA,EACT3C,EAGR,IAIIhF,EAAOkM,EAAQrF,EAJfpB,EAAOtG,EAAMG,KAAK2I,aAAa9D,EAAQsB,MACvCW,EAAQjH,EAAMG,KAAK2I,aAAa9D,EAAQgI,YAI5C,OAHA/F,EAAQA,EAAM4F,OAAO5F,EAAMhG,UAAY,GAGhC6E,GACL,KAAKlC,EAAIC,KAAK,mCACZhD,EAAQ,GACRkM,EAAS,EACTrF,EAAW1H,EAAM6H,IAAIoF,gBACrB,MAEF,KAAKrJ,EAAIC,KAAK,6BACZhD,EAAQ,EACRkM,EAAS,EACTrF,EAAW,SAASrG,EAAK0G,GACvB,IAAIC,EAAShI,EAAMuK,IAAID,uBAAuBjJ,EAAK,IAEnD,OADA2G,EAAO9F,MAAM6F,EAAI,MACVC,GAET,MAEF,QACMnC,EAAQ,IAAIrE,MAAM,yDAEtB,MADAqE,EAAMC,IAAMA,EACND,EAIV,IAAI/E,EAAK2E,EAAsBT,EAAQU,QACnCrE,EAAMuC,EAAIS,IAAIgE,kBAAkBtB,EAAUT,EAAM,EAAGW,EAAOpG,EAAOC,GACrEA,EAAGoB,QACH,IAAI6F,EAAKnE,EAAIS,IAAIgE,kBAAkBtB,EAAUT,EAAM,EAAGW,EAAO8F,EAAQjM,GAErE,OAAO4G,EAASrG,EAAK0G,IAcvBnE,EAAIS,IAAI2F,mBAAqB,SAASjD,EAAUT,EAAMzF,EAAOC,GAC3D,GAAiB,qBAAPA,GAA6B,OAAPA,EAAa,CAC3C,KAAK,QAASd,EAAMc,IAClB,MAAM,IAAIU,MAAM,qCAElBV,EAAKd,EAAMc,GAAGoM,IAAIzL,SAER,OAAT6E,IACDA,EAAO,IAGT,IADA,IAAI6G,EAAU,CAAC5H,EAAKzE,EAAIiG,EAAWT,IAC3BrF,EAAS,GAAIsB,EAAI,EAAGtB,EAASJ,IAAS0B,EAAGtB,GAAU,GACzDkM,EAAQ1G,KAAKlB,EAAKzE,EAAIqM,EAAQ5K,EAAI,GAAKwE,EAAWT,IAEpD,OAAO6G,EAAQC,KAAK,IAAItK,OAAO,EAAGjC,K,qBCt5BpC,IAAIb,EAAQ,EAAQ,QACpB,EAAQ,QAGR,IAAIqJ,EAAM9I,EAAOC,QAAUR,EAAMqJ,IAAMrJ,EAAMqJ,KAAO,GAqKpD,SAASgE,EAAWC,GAQlB,IAPA,IAAIhF,EAAOgF,EAAOtJ,KAAO,KAGrBuJ,EAAS,GACTC,EAAc,SAASC,EAAOC,GAChC,MAAO,IAAMA,GAEPnL,EAAI,EAAGA,EAAI+K,EAAOC,OAAOtM,SAAUsB,EACzCgL,EAAO9G,KAAK6G,EAAOC,OAAOhL,GAAGoL,QAAQ,aAAcH,IAErDlF,GAAQiF,EAAOH,KAAK,KAAO,OAG3B,IAAInM,EAAS,EACT2M,GAAa,EACjB,IAAQrL,EAAI,EAAGA,EAAI+F,EAAKrH,SAAUsB,IAAKtB,EACrC,GAAGA,EAAS,KAAqB,IAAf2M,EAAkB,CAClC,IAAIC,EAASvF,EAAKsF,GACJ,MAAXC,KACCD,EACFtF,EAAOA,EAAKxF,OAAO,EAAG8K,GAAa,QAAUtF,EAAKxF,OAAO8K,IAEzDtF,EAAOA,EAAKxF,OAAO,EAAG8K,GACpB,OAASC,EAASvF,EAAKxF,OAAO8K,EAAY,GAE9C3M,EAAUsB,EAAIqL,EAAY,EAC1BA,GAAa,IACXrL,MACkB,MAAZ+F,EAAK/F,IAA0B,OAAZ+F,EAAK/F,IAA2B,MAAZ+F,EAAK/F,KACpDqL,EAAYrL,GAIhB,OAAO+F,EAGT,SAASwF,EAAMC,GACb,OAAOA,EAAIJ,QAAQ,OAAQ,IAhM7BtE,EAAIC,OAAS,SAASH,EAAK9I,GACzBA,EAAUA,GAAW,GACrB,IAGIiN,EAHAhF,EAAO,cAAgBa,EAAIzE,KAAO,YAuBtC,GAnBGyE,EAAIO,WACL4D,EAAS,CACPtJ,KAAM,YACNuJ,OAAQ,CAACS,OAAO7E,EAAIO,SAASO,SAAUd,EAAIO,SAAShF,OAEtD4D,GAAQ+E,EAAWC,IAElBnE,EAAI8E,gBACLX,EAAS,CAACtJ,KAAM,iBAAkBuJ,OAAQ,CAACpE,EAAI8E,gBAC/C3F,GAAQ+E,EAAWC,IAElBnE,EAAIe,UACLoD,EAAS,CAACtJ,KAAM,WAAYuJ,OAAQ,CAACpE,EAAIe,QAAQ9D,YAC9C+C,EAAIe,QAAQC,YACbmD,EAAOC,OAAO9G,KAAK0C,EAAIe,QAAQC,YAEjC7B,GAAQ+E,EAAWC,IAGlBnE,EAAI+E,QAEL,IAAI,IAAI3L,EAAI,EAAGA,EAAI4G,EAAI+E,QAAQjN,SAAUsB,EACvC+F,GAAQ+E,EAAWlE,EAAI+E,QAAQ3L,IAanC,OARG4G,EAAIO,WACLpB,GAAQ,QAIVA,GAAQtI,EAAMG,KAAKgO,SAAShF,EAAIC,KAAM/I,EAAQ6I,SAAW,IAAM,OAE/DZ,GAAQ,YAAca,EAAIzE,KAAO,YAC1B4D,GAUTe,EAAIG,OAAS,SAASuE,GACpB,IAMIN,EANAnF,EAAO,GAGP8F,EAAW,gHACXC,EAAU,uCACVC,EAAQ,QAEZ,MAAM,EAAM,CAEV,GADAb,EAAQW,EAASG,KAAKR,IAClBN,EACF,MAKF,IAAI/I,EAAO+I,EAAM,GACL,4BAAT/I,IACDA,EAAO,uBAGT,IAAIyE,EAAM,CACRzE,KAAMA,EACNgF,SAAU,KACVuE,cAAe,KACf/D,QAAS,KACTgE,QAAS,GACT9E,KAAMpJ,EAAMG,KAAKqO,SAASf,EAAM,KAKlC,GAHAnF,EAAK7B,KAAK0C,GAGNsE,EAAM,GAAV,CAKA,IAAIgB,EAAQhB,EAAM,GAAGiB,MAAMJ,GACvBK,EAAK,EACT,MAAMlB,GAASkB,EAAKF,EAAMxN,OAAQ,CAKhC,IAHA,IAAI2N,EAAOH,EAAME,GAAIhB,QAAQ,OAAQ,IAG7BkB,EAAKF,EAAK,EAAGE,EAAKJ,EAAMxN,SAAU4N,EAAI,CAC5C,IAAIC,EAAOL,EAAMI,GACjB,IAAI,KAAKE,KAAKD,EAAK,IACjB,MAEFF,GAAQE,EACRH,EAAKE,EAKP,GADApB,EAAQmB,EAAKnB,MAAMY,GAChBZ,EAAO,CAGR,IAFA,IAAIH,EAAS,CAACtJ,KAAMyJ,EAAM,GAAIF,OAAQ,IAClCA,EAASE,EAAM,GAAGiB,MAAM,KACpBM,EAAK,EAAGA,EAAKzB,EAAOtM,SAAU+N,EACpC1B,EAAOC,OAAO9G,KAAKqH,EAAMP,EAAOyB,KAIlC,GAAI7F,EAAIO,SASD,GAAIP,EAAI8E,eAAiC,mBAAhBX,EAAOtJ,KAGhC,GAAImF,EAAIe,SAA2B,aAAhBoD,EAAOtJ,KAQ/BmF,EAAI+E,QAAQzH,KAAK6G,OARmC,CAEpD,GAA4B,IAAzBA,EAAOC,OAAOtM,OACf,MAAM,IAAIO,MAAM,yFAGlB2H,EAAIe,QAAU,CAAC9D,UAAWmH,EAAO,GAAIpD,WAAYoD,EAAO,IAAM,WAP9DpE,EAAI8E,cAAgBV,EAAO,IAAM,OAXjB,CAChB,GAAmB,cAAhBD,EAAOtJ,KACR,MAAM,IAAIxC,MAAM,qFAEX,GAA4B,IAAzB8L,EAAOC,OAAOtM,OACtB,MAAM,IAAIO,MAAM,kFAGlB2H,EAAIO,SAAW,CAACO,QAASsD,EAAO,GAAI7I,KAAM6I,EAAO,OAgBnDoB,EAGJ,GAAoB,cAAjBxF,EAAIO,WAA6BP,EAAIe,QACtC,MAAM,IAAI1I,MAAM,wGAKpB,GAAmB,IAAhB8G,EAAKrH,OACN,MAAM,IAAIO,MAAM,kCAGlB,OAAO8G,I,qBC3LT,IAAItI,EAAQ,EAAQ,QACpB,EAAQ,QAERO,EAAOC,QAAUR,EAAMkD,IAAMlD,EAAMkD,KAAO,GAC1ClD,EAAMkD,IAAIC,KAAOnD,EAAMmD,M,qBCJvB,IAAInD,EAAQ,EAAQ,QACpB,EAAQ,QAGRO,EAAOC,QAAUR,EAAMiP,IAAMjP,EAAMiP,KAAO,GAe1CjP,EAAMiP,IAAIC,OAAS,CACjB,OAAQ,QAAS,UAAW,OAAQ,QAAS,UAAW,OAI1D,IAAIC,EAAa,GAEbC,EAAW,GAKXC,EAAiB,KAQrBrP,EAAMiP,IAAIK,aAAe,EAMzBtP,EAAMiP,IAAIM,eAAiB,EAQ3BvP,EAAMiP,IAAIO,YAAc,EAGxB,IAAI,IAAIjN,EAAI,EAAGA,EAAIvC,EAAMiP,IAAIC,OAAOjO,SAAUsB,EAAG,CAC/C,IAAIkN,EAAQzP,EAAMiP,IAAIC,OAAO3M,GAC7B4M,EAAWM,GAAS,CAClBC,MAAOnN,EACPyB,KAAMyL,EAAM3H,eAShB9H,EAAMiP,IAAIU,WAAa,SAASC,GAE9B,IADA,IAAIC,EAAoBV,EAAWS,EAAQH,OAAOC,MAC1CnN,EAAI,EAAGA,EAAI6M,EAASnO,SAAUsB,EAAG,CACvC,IAAIuN,EAASV,EAAS7M,GACtB,GAAGuN,EAAOC,MAAQ/P,EAAMiP,IAAIM,eAC1BO,EAAOE,EAAEJ,OACJ,CAEL,IAAIK,EAAmBd,EAAWW,EAAOL,OAAOC,MAE7CG,GAAqBI,GAEtBH,EAAOE,EAAEF,EAAQF,MAYzB5P,EAAMiP,IAAIiB,gBAAkB,SAASN,GAC9B,aAAcA,IACjBA,EAAQO,SACNhB,EAAWS,EAAQH,OAAOzL,KAE1B,KAAO4L,EAAQQ,SAAW,KAC1BR,EAAQA,UAUd5P,EAAMiP,IAAIoB,YAAc,SAAST,GAC/B,KAAK,SAAUA,GAAU,CAEvB,IAAIU,EAAO,CAACV,EAAQA,SACpBU,EAAOA,EAAKC,OAAO,KAAM,GAEzBX,EAAQY,KAAOxQ,EAAMG,KAAKsQ,OAAOC,MAAMC,KAAML,KAUjDtQ,EAAMiP,IAAI2B,oBAAsB,SAAShB,GAClC,iBAAkBA,IAErB5P,EAAMiP,IAAIiB,gBAAgBN,GAC1BA,EAAQiB,aAAejB,EAAQO,WAOjC,IAAIjB,EAAS,CAAC,QAAS,UAAW,OAAQ,QAAS,WACnD,IAAQ3M,EAAI,EAAGA,EAAI2M,EAAOjO,SAAUsB,GAElC,SAAUkN,GAERzP,EAAMiP,IAAIQ,GAAS,SAASW,EAAUR,GAEpC,IAAIU,EAAOQ,MAAMC,UAAUC,MAAMC,KAAKC,WAAWF,MAAM,GAGnD7H,EAAM,CACRgI,UAAW,IAAIC,KACf3B,MAAOA,EACPW,SAAUA,EACVR,QAASA,EACT,UAAaU,GAMftQ,EAAMiP,IAAIU,WAAWxG,KAlBzB,CAoBG+F,EAAO3M,IAgFd,GA1DAvC,EAAMiP,IAAIoC,WAAa,SAASC,GAC9B,IAAIxB,EAAS,CACXC,MAAO,EACPC,EAAGsB,GAGL,OADAtR,EAAMiP,IAAIsC,SAASzB,EAAQ,QACpBA,GAWT9P,EAAMiP,IAAIsC,SAAW,SAASzB,EAAQL,GACpC,IAAInH,GAAO,EACX,GAAGwH,KAAYA,EAAOC,MAAQ/P,EAAMiP,IAAIK,cACtC,IAAI,IAAI/M,EAAI,EAAGA,EAAIvC,EAAMiP,IAAIC,OAAOjO,SAAUsB,EAAG,CAC/C,IAAIiP,EAAcxR,EAAMiP,IAAIC,OAAO3M,GACnC,GAAGkN,GAAS+B,EAAa,CAEvB1B,EAAOL,MAAQA,EACfnH,GAAO,EACP,OAKN,OAAOA,GASTtI,EAAMiP,IAAIwC,KAAO,SAAS3B,EAAQ2B,GACb,qBAATA,GAAwBA,EAChC3B,EAAOC,OAAS/P,EAAMiP,IAAIK,aAE1BQ,EAAOC,QAAU/P,EAAMiP,IAAIK,cAS/BtP,EAAMiP,IAAIyC,UAAY,SAAS5B,GAC7BV,EAAS3I,KAAKqJ,IAIO,qBAAd,SAA6B,QAAS6B,QAAS,CACtD,IAAI7B,EACJ,GAAG6B,QAAQ9L,OAAS8L,QAAQC,MAAQD,QAAQE,MAAQF,QAAQG,MAAO,CAGjE,IAAIC,EAAgB,CAClBlM,MAAO8L,QAAQ9L,MACfmM,QAASL,QAAQC,KACjBC,KAAMF,QAAQE,KACdC,MAAOH,QAAQG,MACfG,QAASN,QAAQG,OAEf9B,EAAI,SAASF,EAAQF,GACvB5P,EAAMiP,IAAIiB,gBAAgBN,GAC1B,IAAIsC,EAAUH,EAAcnC,EAAQH,OAEhCa,EAAO,CAACV,EAAQO,UACpBG,EAAOA,EAAKC,OAAOX,EAAQ,aAAaoB,SAExCkB,EAAQxB,MAAMiB,QAASrB,IAEzBR,EAAS9P,EAAMiP,IAAIoC,WAAWrB,OACzB,CAEDA,EAAI,SAASF,EAAQF,GACvB5P,EAAMiP,IAAI2B,oBAAoBhB,GAC9B+B,QAAQ1C,IAAIW,EAAQiB,eAEtBf,EAAS9P,EAAMiP,IAAIoC,WAAWrB,GAEhChQ,EAAMiP,IAAIsC,SAASzB,EAAQ,SAC3B9P,EAAMiP,IAAIyC,UAAU5B,GACpBT,EAAiBS,OAIjB6B,QAAU,CACR1C,IAAK,cAgBT,GAAsB,OAAnBI,GACiB,qBAAX8C,QAA0BA,OAAOC,SACxC,CACA,IAAIC,EAAQ,IAAIC,IAAIH,OAAOC,SAASG,MAAMC,aAM1C,GALGH,EAAMI,IAAI,kBAEXzS,EAAMiP,IAAIsC,SACRlC,EAAgBgD,EAAMK,IAAI,iBAAiB1B,OAAO,GAAG,IAEtDqB,EAAMI,IAAI,gBAAiB,CAE5B,IAAIhB,EAAOY,EAAMK,IAAI,gBAAgB1B,OAAO,GAAG,GACpC,QAARS,GACDzR,EAAMiP,IAAIwC,KAAKpC,IAMrBrP,EAAMiP,IAAI0D,cAAgBtD,G,qBCvT1B,IAAIrP,EAAQ,EAAQ,QACpB,EAAQ,QACR,EAAQ,QAER,IAAIkN,EAAM3M,EAAOC,QAAUR,EAAMkN,IAAMlN,EAAMkN,KAAO,GACpDlN,EAAMc,GAAGoM,IAAMlN,EAAMc,GAAGS,WAAW2L,IAAMA,EAOzCA,EAAIzL,OAAS,WAEPmR,GACFC,IAIF,IAAIC,EAAS,KAGTC,EAAS/S,EAAMG,KAAK2I,eAGpBkK,EAAK,IAAIlC,MAAM,IAGfhQ,EAAK,CACPsF,UAAW,MACX2E,YAAa,GACbpJ,aAAc,GAEdsR,cAAe,EAEfC,kBAAmB,KAEnBC,kBAAmB,EAQrB,MAAW,WAETrS,EAAGmS,cAAgB,EAGnBnS,EAAGoS,kBAAoBpS,EAAGsS,gBAAkB,GAE5C,IADA,IAAIC,EAASvS,EAAGqS,kBAAoB,EAC5B5Q,EAAI,EAAGA,EAAI8Q,IAAU9Q,EAC3BzB,EAAGoS,kBAAkBzM,KAAK,GAS5B,OAPAsM,EAAS/S,EAAMG,KAAK2I,eACpBgK,EAAS,CACPQ,GAAI,WACJC,GAAI,WACJC,GAAI,WACJC,GAAI,WAEC3S,IA6GT,OA1GAA,EAAGoB,QAYHpB,EAAG0B,OAAS,SAAS2G,EAAKuK,GACR,SAAbA,IACDvK,EAAMnJ,EAAMG,KAAKwT,WAAWxK,IAI9B,IAAIvH,EAAMuH,EAAIlI,OACdH,EAAGmS,eAAiBrR,EACpBA,EAAM,CAAEA,EAAM,aAAiB,EAAGA,IAAQ,GAC1C,IAAI,IAAIW,EAAIzB,EAAGoS,kBAAkBjS,OAAS,EAAGsB,GAAK,IAAKA,EACrDzB,EAAGoS,kBAAkB3Q,IAAMX,EAAI,GAC/BA,EAAI,GAAKA,EAAI,IAAOd,EAAGoS,kBAAkB3Q,GAAK,aAAiB,GAC/DzB,EAAGoS,kBAAkB3Q,GAAKzB,EAAGoS,kBAAkB3Q,KAAO,EACtDX,EAAI,GAAMA,EAAI,GAAK,aAAiB,EActC,OAVAmR,EAAOhH,SAAS5C,GAGhByK,EAAQd,EAAQE,EAAID,IAGjBA,EAAOc,KAAO,MAA4B,IAApBd,EAAO9R,WAC9B8R,EAAOe,UAGFhT,GAQTA,EAAG4B,OAAS,WAqBV,IAAIqR,EAAa/T,EAAMG,KAAK2I,eAC5BiL,EAAWhI,SAASgH,EAAOvN,SAG3B,IAAIwO,EACFlT,EAAGoS,kBAAkBpS,EAAGoS,kBAAkBjS,OAAS,GACnDH,EAAGqS,kBAKDc,EAAWD,EAAalT,EAAGiK,YAAc,EAC7CgJ,EAAWhI,SAASmI,EAASpR,OAAO,EAAGhC,EAAGiK,YAAckJ,IAKxD,IADA,IAAIE,EAAMC,EAAQ,EACV7R,EAAIzB,EAAGoS,kBAAkBjS,OAAS,EAAGsB,GAAK,IAAKA,EACrD4R,EAAiC,EAA1BrT,EAAGoS,kBAAkB3Q,GAAS6R,EACrCA,EAASD,EAAO,aAAiB,EACjCJ,EAAWM,WAAWF,IAAS,GAGjC,IAAIG,EAAK,CACPhB,GAAIR,EAAOQ,GACXC,GAAIT,EAAOS,GACXC,GAAIV,EAAOU,GACXC,GAAIX,EAAOW,IAEbG,EAAQU,EAAItB,EAAIe,GAChB,IAAIzL,EAAOtI,EAAMG,KAAK2I,eAKtB,OAJAR,EAAK+L,WAAWC,EAAGhB,IACnBhL,EAAK+L,WAAWC,EAAGf,IACnBjL,EAAK+L,WAAWC,EAAGd,IACnBlL,EAAK+L,WAAWC,EAAGb,IACZnL,GAGFxH,GAIT,IAAIoT,EAAW,KACXK,EAAK,KACLC,EAAK,KACLC,EAAK,KACL7B,GAAe,EAKnB,SAASC,IAEPqB,EAAWlG,OAAO0G,aAAa,KAC/BR,GAAYlU,EAAMG,KAAKwU,WAAW3G,OAAO0G,aAAa,GAAO,IAG7DH,EAAK,CACH,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAClD,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAClD,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EACnD,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAGrDC,EAAK,CACH,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAC3D,EAAI,EAAG,GAAI,GAAK,EAAI,EAAG,GAAI,GAAK,EAAI,EAAG,GAAI,GAAK,EAAI,EAAG,GAAI,GAC3D,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAC3D,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,GAAK,EAAG,GAAI,GAAI,IAG7DC,EAAK,IAAI3D,MAAM,IACf,IAAI,IAAIvO,EAAI,EAAGA,EAAI,KAAMA,EACvBkS,EAAGlS,GAAKV,KAAK+S,MAAkC,WAA5B/S,KAAKgT,IAAIhT,KAAKiT,IAAIvS,EAAI,KAI3CqQ,GAAe,EAUjB,SAASgB,EAAQjT,EAAGoU,EAAGvP,GAErB,IAAIjC,EAAGyR,EAAGC,EAAGrU,EAAGsU,EAAGlF,EAAGjO,EAAGQ,EACrBX,EAAM4D,EAAMvE,SAChB,MAAMW,GAAO,GAAI,CAQf,IANAoT,EAAIrU,EAAE2S,GACN2B,EAAItU,EAAE4S,GACN3S,EAAID,EAAE6S,GACN0B,EAAIvU,EAAE8S,GAGFlR,EAAI,EAAGA,EAAI,KAAMA,EACnBwS,EAAExS,GAAKiD,EAAM2P,aACbnF,EAAIkF,EAAKD,GAAKrU,EAAIsU,GAClB3R,EAAKyR,EAAIhF,EAAIyE,EAAGlS,GAAKwS,EAAExS,GACvBR,EAAIyS,EAAGjS,GACPyS,EAAIE,EACJA,EAAItU,EACJA,EAAIqU,EACJA,GAAM1R,GAAKxB,EAAMwB,IAAO,GAAKxB,EAG/B,KAAMQ,EAAI,KAAMA,EACdyN,EAAIpP,EAAKsU,GAAKD,EAAIrU,GAClB2C,EAAKyR,EAAIhF,EAAIyE,EAAGlS,GAAKwS,EAAER,EAAGhS,IAC1BR,EAAIyS,EAAGjS,GACPyS,EAAIE,EACJA,EAAItU,EACJA,EAAIqU,EACJA,GAAM1R,GAAKxB,EAAMwB,IAAO,GAAKxB,EAG/B,KAAMQ,EAAI,KAAMA,EACdyN,EAAIiF,EAAIrU,EAAIsU,EACZ3R,EAAKyR,EAAIhF,EAAIyE,EAAGlS,GAAKwS,EAAER,EAAGhS,IAC1BR,EAAIyS,EAAGjS,GACPyS,EAAIE,EACJA,EAAItU,EACJA,EAAIqU,EACJA,GAAM1R,GAAKxB,EAAMwB,IAAO,GAAKxB,EAG/B,KAAMQ,EAAI,KAAMA,EACdyN,EAAIpP,GAAKqU,GAAKC,GACd3R,EAAKyR,EAAIhF,EAAIyE,EAAGlS,GAAKwS,EAAER,EAAGhS,IAC1BR,EAAIyS,EAAGjS,GACPyS,EAAIE,EACJA,EAAItU,EACJA,EAAIqU,EACJA,GAAM1R,GAAKxB,EAAMwB,IAAO,GAAKxB,EAI/BpB,EAAE2S,GAAM3S,EAAE2S,GAAK0B,EAAK,EACpBrU,EAAE4S,GAAM5S,EAAE4S,GAAK0B,EAAK,EACpBtU,EAAE6S,GAAM7S,EAAE6S,GAAK5S,EAAK,EACpBD,EAAE8S,GAAM9S,EAAE8S,GAAKyB,EAAK,EAEpBtT,GAAO,M,qBCvRXrB,EAAOC,QAAU,EAAQ,QAEzB,EAAQ,QACR,EAAQ,QACR,EAAQ,QACR,EAAQ,S,qBCHR,IAAIR,EAAQ,EAAQ,QACpB,EAAQ,QACR,EAAQ,QACR,EAAQ,QAERO,EAAOC,QAAUR,EAAMoV,IAAMpV,EAAMoV,KAAO,GAE1C,IAAIlR,EAAalE,EAAMmE,KAAKD,WAwH5B,SAASmR,EAAWC,EAAKxU,EAAIyU,EAAc5T,GASzC2T,EAAIlS,SAAW,SAASiJ,EAAGpL,GAOzB,IANA,IAAII,EAAM,IAAIrB,EAAMG,KAAKqD,WAGrB0I,EAAIrK,KAAKC,KAAKb,EAASU,GAAgB4T,EAEvC3U,EAAI,IAAIZ,EAAMG,KAAKqD,WACfjB,EAAIgT,EAAchT,EAAI2J,IAAK3J,EAAG,CAEpC3B,EAAE6C,SAASlB,GAGXzB,EAAGoB,QACHpB,EAAG0B,OAAO6J,EAAIzL,EAAE+B,YAChB,IAAI4C,EAAOzE,EAAG4B,SACdrB,EAAI0K,SAASxG,EAAK5C,SAAShB,IAK7B,OADAN,EAAIsC,SAAStC,EAAIJ,SAAWA,GACrBI,EAAIsB,YAhJf3C,EAAMoV,IAAII,IAAM,GAgBhBxV,EAAMoV,IAAII,IAAI/T,OAAS,SAAS6T,EAAKjV,GACnCA,EAAUA,GAAW,GACrB,IAAIoV,EAAOpV,EAAQoV,MAAQzV,EAAMoH,OAE7BgO,EAAM,CAaV,QAAc,SAASM,EAAWC,GAEhC,IACI5T,EADA6T,EAAa/T,KAAKC,KAAK4T,EAAUhL,EAAEmL,YAAc,GAErD,GACE9T,EAAI,IAAImC,EACNlE,EAAMG,KAAKiK,WAAWqL,EAAKpO,aAAauO,IACxC,IAAIE,IAAIJ,EAAUhL,SACd3I,EAAEgU,UAAU7R,EAAW8R,MAAQ,GAGvCjU,EAAI/B,EAAMG,KAAKuG,WAAW3E,EAAET,SAAS,KACrC,IAAI2U,EAAQL,EAAa7T,EAAEd,OACxBgV,EAAQ,IACTlU,EAAI/B,EAAMG,KAAKwU,WAAW3G,OAAO0G,aAAa,GAAIuB,GAASlU,GAI7D,IAAImU,EAAgBR,EAAUS,QAAQpU,EAAG,QAGrCV,EAAMiU,EAAIlS,SAASrB,EAAG4T,GAE1B,MAAO,CAACO,cAAeA,EAAe7U,IAAKA,IAa7C,QAAc,SAAS+U,EAAYF,EAAeP,GAEhD,IAAI5T,EAAIqU,EAAWC,QAAQH,EAAe,QAC1C,OAAOZ,EAAIlS,SAASrB,EAAG4T,KAGzB,OAAOP,GAcTpV,EAAMoV,IAAIkB,KAAO,SAASxV,EAAIa,GAC5B0T,EAAW1E,KAAM7P,EAAI,EAAGa,GAAgBb,EAAGa,eAY7C3B,EAAMoV,IAAImB,KAAO,SAASzV,EAAIa,GAC5B0T,EAAW1E,KAAM7P,EAAI,EAAGa,GAAgBb,EAAGa,gB,qBCrH7C,IAAI3B,EAAQ,EAAQ,QAEpBO,EAAOC,QAAUR,EAAMc,GAAKd,EAAMc,IAAM,GACxCd,EAAMc,GAAGS,WAAavB,EAAMc,GAAGS,YAAc","file":"js/chunk-vendors~ae83014f.55c47ee9.js","sourcesContent":["/**\n * Password-Based Key-Derivation Function #2 implementation.\n *\n * See RFC 2898 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./hmac');\nrequire('./md');\nrequire('./util');\n\nvar pkcs5 = forge.pkcs5 = forge.pkcs5 || {};\n\nvar crypto;\nif(forge.util.isNodejs && !forge.options.usePureJavaScript) {\n  crypto = require('crypto');\n}\n\n/**\n * Derives a key from a password.\n *\n * @param p the password as a binary-encoded string of bytes.\n * @param s the salt as a binary-encoded string of bytes.\n * @param c the iteration count, a positive integer.\n * @param dkLen the intended length, in bytes, of the derived key,\n *          (max: 2^32 - 1) * hash length of the PRF.\n * @param [md] the message digest (or algorithm identifier as a string) to use\n *          in the PRF, defaults to SHA-1.\n * @param [callback(err, key)] presence triggers asynchronous version, called\n *          once the operation completes.\n *\n * @return the derived key, as a binary-encoded string of bytes, for the\n *           synchronous version (if no callback is specified).\n */\nmodule.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(\n  p, s, c, dkLen, md, callback) {\n  if(typeof md === 'function') {\n    callback = md;\n    md = null;\n  }\n\n  // use native implementation if possible and not disabled, note that\n  // some node versions only support SHA-1, others allow digest to be changed\n  if(forge.util.isNodejs && !forge.options.usePureJavaScript &&\n    crypto.pbkdf2 && (md === null || typeof md !== 'object') &&\n    (crypto.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {\n    if(typeof md !== 'string') {\n      // default prf to SHA-1\n      md = 'sha1';\n    }\n    p = Buffer.from(p, 'binary');\n    s = Buffer.from(s, 'binary');\n    if(!callback) {\n      if(crypto.pbkdf2Sync.length === 4) {\n        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');\n      }\n      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');\n    }\n    if(crypto.pbkdf2Sync.length === 4) {\n      return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {\n        if(err) {\n          return callback(err);\n        }\n        callback(null, key.toString('binary'));\n      });\n    }\n    return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {\n      if(err) {\n        return callback(err);\n      }\n      callback(null, key.toString('binary'));\n    });\n  }\n\n  if(typeof md === 'undefined' || md === null) {\n    // default prf to SHA-1\n    md = 'sha1';\n  }\n  if(typeof md === 'string') {\n    if(!(md in forge.md.algorithms)) {\n      throw new Error('Unknown hash algorithm: ' + md);\n    }\n    md = forge.md[md].create();\n  }\n\n  var hLen = md.digestLength;\n\n  /* 1. If dkLen > (2^32 - 1) * hLen, output \"derived key too long\" and\n    stop. */\n  if(dkLen > (0xFFFFFFFF * hLen)) {\n    var err = new Error('Derived key is too long.');\n    if(callback) {\n      return callback(err);\n    }\n    throw err;\n  }\n\n  /* 2. Let len be the number of hLen-octet blocks in the derived key,\n    rounding up, and let r be the number of octets in the last\n    block:\n\n    len = CEIL(dkLen / hLen),\n    r = dkLen - (len - 1) * hLen. */\n  var len = Math.ceil(dkLen / hLen);\n  var r = dkLen - (len - 1) * hLen;\n\n  /* 3. For each block of the derived key apply the function F defined\n    below to the password P, the salt S, the iteration count c, and\n    the block index to compute the block:\n\n    T_1 = F(P, S, c, 1),\n    T_2 = F(P, S, c, 2),\n    ...\n    T_len = F(P, S, c, len),\n\n    where the function F is defined as the exclusive-or sum of the\n    first c iterates of the underlying pseudorandom function PRF\n    applied to the password P and the concatenation of the salt S\n    and the block index i:\n\n    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c\n\n    where\n\n    u_1 = PRF(P, S || INT(i)),\n    u_2 = PRF(P, u_1),\n    ...\n    u_c = PRF(P, u_{c-1}).\n\n    Here, INT(i) is a four-octet encoding of the integer i, most\n    significant octet first. */\n  var prf = forge.hmac.create();\n  prf.start(md, p);\n  var dk = '';\n  var xor, u_c, u_c1;\n\n  // sync version\n  if(!callback) {\n    for(var i = 1; i <= len; ++i) {\n      // PRF(P, S || INT(i)) (first iteration)\n      prf.start(null, null);\n      prf.update(s);\n      prf.update(forge.util.int32ToBytes(i));\n      xor = u_c1 = prf.digest().getBytes();\n\n      // PRF(P, u_{c-1}) (other iterations)\n      for(var j = 2; j <= c; ++j) {\n        prf.start(null, null);\n        prf.update(u_c1);\n        u_c = prf.digest().getBytes();\n        // F(p, s, c, i)\n        xor = forge.util.xorBytes(xor, u_c, hLen);\n        u_c1 = u_c;\n      }\n\n      /* 4. Concatenate the blocks and extract the first dkLen octets to\n        produce a derived key DK:\n\n        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n      dk += (i < len) ? xor : xor.substr(0, r);\n    }\n    /* 5. Output the derived key DK. */\n    return dk;\n  }\n\n  // async version\n  var i = 1, j;\n  function outer() {\n    if(i > len) {\n      // done\n      return callback(null, dk);\n    }\n\n    // PRF(P, S || INT(i)) (first iteration)\n    prf.start(null, null);\n    prf.update(s);\n    prf.update(forge.util.int32ToBytes(i));\n    xor = u_c1 = prf.digest().getBytes();\n\n    // PRF(P, u_{c-1}) (other iterations)\n    j = 2;\n    inner();\n  }\n\n  function inner() {\n    if(j <= c) {\n      prf.start(null, null);\n      prf.update(u_c1);\n      u_c = prf.digest().getBytes();\n      // F(p, s, c, i)\n      xor = forge.util.xorBytes(xor, u_c, hLen);\n      u_c1 = u_c;\n      ++j;\n      return forge.util.setImmediate(inner);\n    }\n\n    /* 4. Concatenate the blocks and extract the first dkLen octets to\n      produce a derived key DK:\n\n      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n    dk += (i < len) ? xor : xor.substr(0, r);\n\n    ++i;\n    outer();\n  }\n\n  outer();\n};\n","/**\n * Javascript implementation of mask generation function MGF1.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nforge.mgf = forge.mgf || {};\nvar mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};\n\n/**\n * Creates a MGF1 mask generation function object.\n *\n * @param md the message digest API to use (eg: forge.md.sha1.create()).\n *\n * @return a mask generation function object.\n */\nmgf1.create = function(md) {\n  var mgf = {\n    /**\n     * Generate mask of specified length.\n     *\n     * @param {String} seed The seed for mask generation.\n     * @param maskLen Number of bytes to generate.\n     * @return {String} The generated mask.\n     */\n    generate: function(seed, maskLen) {\n      /* 2. Let T be the empty octet string. */\n      var t = new forge.util.ByteBuffer();\n\n      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */\n      var len = Math.ceil(maskLen / md.digestLength);\n      for(var i = 0; i < len; i++) {\n        /* a. Convert counter to an octet string C of length 4 octets */\n        var c = new forge.util.ByteBuffer();\n        c.putInt32(i);\n\n        /* b. Concatenate the hash of the seed mgfSeed and C to the octet\n         * string T: */\n        md.start();\n        md.update(seed + c.getBytes());\n        t.putBuffer(md.digest());\n      }\n\n      /* Output the leading maskLen octets of T as the octet string mask. */\n      t.truncate(t.length() - maskLen);\n      return t.getBytes();\n    }\n  };\n\n  return mgf;\n};\n","/**\n * Object IDs for ASN.1.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nforge.pki = forge.pki || {};\nvar oids = module.exports = forge.pki.oids = forge.oids = forge.oids || {};\n\n// set id to name mapping and name to id mapping\nfunction _IN(id, name) {\n  oids[id] = name;\n  oids[name] = id;\n}\n// set id to name mapping only\nfunction _I_(id, name) {\n  oids[id] = name;\n}\n\n// algorithm OIDs\n_IN('1.2.840.113549.1.1.1', 'rsaEncryption');\n// Note: md2 & md4 not implemented\n//_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');\n//_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');\n_IN('1.2.840.113549.1.1.4', 'md5WithRSAEncryption');\n_IN('1.2.840.113549.1.1.5', 'sha1WithRSAEncryption');\n_IN('1.2.840.113549.1.1.7', 'RSAES-OAEP');\n_IN('1.2.840.113549.1.1.8', 'mgf1');\n_IN('1.2.840.113549.1.1.9', 'pSpecified');\n_IN('1.2.840.113549.1.1.10', 'RSASSA-PSS');\n_IN('1.2.840.113549.1.1.11', 'sha256WithRSAEncryption');\n_IN('1.2.840.113549.1.1.12', 'sha384WithRSAEncryption');\n_IN('1.2.840.113549.1.1.13', 'sha512WithRSAEncryption');\n// Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519\n_IN('1.3.101.112', 'EdDSA25519');\n\n_IN('1.2.840.10040.4.3', 'dsa-with-sha1');\n\n_IN('1.3.14.3.2.7', 'desCBC');\n\n_IN('1.3.14.3.2.26', 'sha1');\n// Deprecated equivalent of sha1WithRSAEncryption\n_IN('1.3.14.3.2.29', 'sha1WithRSASignature');\n_IN('2.16.840.1.101.3.4.2.1', 'sha256');\n_IN('2.16.840.1.101.3.4.2.2', 'sha384');\n_IN('2.16.840.1.101.3.4.2.3', 'sha512');\n_IN('2.16.840.1.101.3.4.2.4', 'sha224');\n_IN('2.16.840.1.101.3.4.2.5', 'sha512-224');\n_IN('2.16.840.1.101.3.4.2.6', 'sha512-256');\n_IN('1.2.840.113549.2.2', 'md2');\n_IN('1.2.840.113549.2.5', 'md5');\n\n// pkcs#7 content types\n_IN('1.2.840.113549.1.7.1', 'data');\n_IN('1.2.840.113549.1.7.2', 'signedData');\n_IN('1.2.840.113549.1.7.3', 'envelopedData');\n_IN('1.2.840.113549.1.7.4', 'signedAndEnvelopedData');\n_IN('1.2.840.113549.1.7.5', 'digestedData');\n_IN('1.2.840.113549.1.7.6', 'encryptedData');\n\n// pkcs#9 oids\n_IN('1.2.840.113549.1.9.1', 'emailAddress');\n_IN('1.2.840.113549.1.9.2', 'unstructuredName');\n_IN('1.2.840.113549.1.9.3', 'contentType');\n_IN('1.2.840.113549.1.9.4', 'messageDigest');\n_IN('1.2.840.113549.1.9.5', 'signingTime');\n_IN('1.2.840.113549.1.9.6', 'counterSignature');\n_IN('1.2.840.113549.1.9.7', 'challengePassword');\n_IN('1.2.840.113549.1.9.8', 'unstructuredAddress');\n_IN('1.2.840.113549.1.9.14', 'extensionRequest');\n\n_IN('1.2.840.113549.1.9.20', 'friendlyName');\n_IN('1.2.840.113549.1.9.21', 'localKeyId');\n_IN('1.2.840.113549.1.9.22.1', 'x509Certificate');\n\n// pkcs#12 safe bags\n_IN('1.2.840.113549.1.12.10.1.1', 'keyBag');\n_IN('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag');\n_IN('1.2.840.113549.1.12.10.1.3', 'certBag');\n_IN('1.2.840.113549.1.12.10.1.4', 'crlBag');\n_IN('1.2.840.113549.1.12.10.1.5', 'secretBag');\n_IN('1.2.840.113549.1.12.10.1.6', 'safeContentsBag');\n\n// password-based-encryption for pkcs#12\n_IN('1.2.840.113549.1.5.13', 'pkcs5PBES2');\n_IN('1.2.840.113549.1.5.12', 'pkcs5PBKDF2');\n\n_IN('1.2.840.113549.1.12.1.1', 'pbeWithSHAAnd128BitRC4');\n_IN('1.2.840.113549.1.12.1.2', 'pbeWithSHAAnd40BitRC4');\n_IN('1.2.840.113549.1.12.1.3', 'pbeWithSHAAnd3-KeyTripleDES-CBC');\n_IN('1.2.840.113549.1.12.1.4', 'pbeWithSHAAnd2-KeyTripleDES-CBC');\n_IN('1.2.840.113549.1.12.1.5', 'pbeWithSHAAnd128BitRC2-CBC');\n_IN('1.2.840.113549.1.12.1.6', 'pbewithSHAAnd40BitRC2-CBC');\n\n// hmac OIDs\n_IN('1.2.840.113549.2.7', 'hmacWithSHA1');\n_IN('1.2.840.113549.2.8', 'hmacWithSHA224');\n_IN('1.2.840.113549.2.9', 'hmacWithSHA256');\n_IN('1.2.840.113549.2.10', 'hmacWithSHA384');\n_IN('1.2.840.113549.2.11', 'hmacWithSHA512');\n\n// symmetric key algorithm oids\n_IN('1.2.840.113549.3.7', 'des-EDE3-CBC');\n_IN('2.16.840.1.101.3.4.1.2', 'aes128-CBC');\n_IN('2.16.840.1.101.3.4.1.22', 'aes192-CBC');\n_IN('2.16.840.1.101.3.4.1.42', 'aes256-CBC');\n\n// certificate issuer/subject OIDs\n_IN('2.5.4.3', 'commonName');\n_IN('2.5.4.4', 'surname');\n_IN('2.5.4.5', 'serialNumber');\n_IN('2.5.4.6', 'countryName');\n_IN('2.5.4.7', 'localityName');\n_IN('2.5.4.8', 'stateOrProvinceName');\n_IN('2.5.4.9', 'streetAddress');\n_IN('2.5.4.10', 'organizationName');\n_IN('2.5.4.11', 'organizationalUnitName');\n_IN('2.5.4.12', 'title');\n_IN('2.5.4.13', 'description');\n_IN('2.5.4.15', 'businessCategory');\n_IN('2.5.4.17', 'postalCode');\n_IN('2.5.4.42', 'givenName');\n_IN('1.3.6.1.4.1.311.60.2.1.2', 'jurisdictionOfIncorporationStateOrProvinceName');\n_IN('1.3.6.1.4.1.311.60.2.1.3', 'jurisdictionOfIncorporationCountryName');\n\n// X.509 extension OIDs\n_IN('2.16.840.1.113730.1.1', 'nsCertType');\n_IN('2.16.840.1.113730.1.13', 'nsComment'); // deprecated in theory; still widely used\n_I_('2.5.29.1', 'authorityKeyIdentifier'); // deprecated, use .35\n_I_('2.5.29.2', 'keyAttributes'); // obsolete use .37 or .15\n_I_('2.5.29.3', 'certificatePolicies'); // deprecated, use .32\n_I_('2.5.29.4', 'keyUsageRestriction'); // obsolete use .37 or .15\n_I_('2.5.29.5', 'policyMapping'); // deprecated use .33\n_I_('2.5.29.6', 'subtreesConstraint'); // obsolete use .30\n_I_('2.5.29.7', 'subjectAltName'); // deprecated use .17\n_I_('2.5.29.8', 'issuerAltName'); // deprecated use .18\n_I_('2.5.29.9', 'subjectDirectoryAttributes');\n_I_('2.5.29.10', 'basicConstraints'); // deprecated use .19\n_I_('2.5.29.11', 'nameConstraints'); // deprecated use .30\n_I_('2.5.29.12', 'policyConstraints'); // deprecated use .36\n_I_('2.5.29.13', 'basicConstraints'); // deprecated use .19\n_IN('2.5.29.14', 'subjectKeyIdentifier');\n_IN('2.5.29.15', 'keyUsage');\n_I_('2.5.29.16', 'privateKeyUsagePeriod');\n_IN('2.5.29.17', 'subjectAltName');\n_IN('2.5.29.18', 'issuerAltName');\n_IN('2.5.29.19', 'basicConstraints');\n_I_('2.5.29.20', 'cRLNumber');\n_I_('2.5.29.21', 'cRLReason');\n_I_('2.5.29.22', 'expirationDate');\n_I_('2.5.29.23', 'instructionCode');\n_I_('2.5.29.24', 'invalidityDate');\n_I_('2.5.29.25', 'cRLDistributionPoints'); // deprecated use .31\n_I_('2.5.29.26', 'issuingDistributionPoint'); // deprecated use .28\n_I_('2.5.29.27', 'deltaCRLIndicator');\n_I_('2.5.29.28', 'issuingDistributionPoint');\n_I_('2.5.29.29', 'certificateIssuer');\n_I_('2.5.29.30', 'nameConstraints');\n_IN('2.5.29.31', 'cRLDistributionPoints');\n_IN('2.5.29.32', 'certificatePolicies');\n_I_('2.5.29.33', 'policyMappings');\n_I_('2.5.29.34', 'policyConstraints'); // deprecated use .36\n_IN('2.5.29.35', 'authorityKeyIdentifier');\n_I_('2.5.29.36', 'policyConstraints');\n_IN('2.5.29.37', 'extKeyUsage');\n_I_('2.5.29.46', 'freshestCRL');\n_I_('2.5.29.54', 'inhibitAnyPolicy');\n\n// extKeyUsage purposes\n_IN('1.3.6.1.4.1.11129.2.4.2', 'timestampList');\n_IN('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess');\n_IN('1.3.6.1.5.5.7.3.1', 'serverAuth');\n_IN('1.3.6.1.5.5.7.3.2', 'clientAuth');\n_IN('1.3.6.1.5.5.7.3.3', 'codeSigning');\n_IN('1.3.6.1.5.5.7.3.4', 'emailProtection');\n_IN('1.3.6.1.5.5.7.3.8', 'timeStamping');\n","/**\n * Password-based encryption functions.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * An EncryptedPrivateKeyInfo:\n *\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n *   encryptedData        EncryptedData }\n *\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedData ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./md');\nrequire('./oids');\nrequire('./pbkdf2');\nrequire('./pem');\nrequire('./random');\nrequire('./rc2');\nrequire('./rsa');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Password-based encryption implementation. */\nvar pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids;\n\n// validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\nvar encryptedPrivateKeyValidator = {\n  name: 'EncryptedPrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encryptionOid'\n    }, {\n      name: 'AlgorithmIdentifier.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'encryptionParams'\n    }]\n  }, {\n    // encryptedData\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encryptedData'\n  }]\n};\n\n// validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\nvar PBES2AlgorithmsValidator = {\n  name: 'PBES2Algorithms',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PBES2Algorithms.keyDerivationFunc',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'kdfOid'\n    }, {\n      name: 'PBES2Algorithms.params',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'PBES2Algorithms.params.salt',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'kdfSalt'\n      }, {\n        name: 'PBES2Algorithms.params.iterationCount',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'kdfIterationCount'\n      }, {\n        name: 'PBES2Algorithms.params.keyLength',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        optional: true,\n        capture: 'keyLength'\n      }, {\n        // prf\n        name: 'PBES2Algorithms.params.prf',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        optional: true,\n        value: [{\n          name: 'PBES2Algorithms.params.prf.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'prfOid'\n        }]\n      }]\n    }]\n  }, {\n    name: 'PBES2Algorithms.encryptionScheme',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.encryptionScheme.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encOid'\n    }, {\n      name: 'PBES2Algorithms.encryptionScheme.iv',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'encIv'\n    }]\n  }]\n};\n\nvar pkcs12PbeParamsValidator = {\n  name: 'pkcs-12PbeParams',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'pkcs-12PbeParams.salt',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'salt'\n  }, {\n    name: 'pkcs-12PbeParams.iterations',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'iterations'\n  }]\n};\n\n/**\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\n *\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\n *\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n *\n * PBES2-params ::= SEQUENCE {\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\n * }\n *\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n *\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\n *\n * PBKDF2-params ::= SEQUENCE {\n *   salt CHOICE {\n *     specified OCTET STRING,\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n *   },\n *   iterationCount INTEGER (1..MAX),\n *   keyLength INTEGER (1..MAX) OPTIONAL,\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n * }\n *\n * @param obj the ASN.1 PrivateKeyInfo object.\n * @param password the password to encrypt with.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          prfAlgorithm the PRF message digest algorithm to use\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptPrivateKeyInfo = function(obj, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || 'aes128';\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1';\n\n  // generate PBE params\n  var salt = forge.random.getBytesSync(options.saltSize);\n  var count = options.count;\n  var countBytes = asn1.integerToDer(count);\n  var dkLen;\n  var encryptionAlgorithm;\n  var encryptedData;\n  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\n    // do PBES2\n    var ivLen, encOid, cipherFn;\n    switch(options.algorithm) {\n    case 'aes128':\n      dkLen = 16;\n      ivLen = 16;\n      encOid = oids['aes128-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes192':\n      dkLen = 24;\n      ivLen = 16;\n      encOid = oids['aes192-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes256':\n      dkLen = 32;\n      ivLen = 16;\n      encOid = oids['aes256-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'des':\n      dkLen = 8;\n      ivLen = 8;\n      encOid = oids['desCBC'];\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n    default:\n      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n      error.algorithm = options.algorithm;\n      throw error;\n    }\n\n    // get PRF message digest\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n\n    // encrypt private key using pbe SHA-1 and AES/DES\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = forge.random.getBytesSync(ivLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    // get PBKDF2-params\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // keyDerivationFunc\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),\n          // PBKDF2-params\n          params\n        ]),\n        // encryptionScheme\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(encOid).getBytes()),\n          // iv\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)\n        ])\n      ])\n    ]);\n  } else if(options.algorithm === '3des') {\n    // Do PKCS12 PBE\n    dkLen = 24;\n\n    var saltBytes = new forge.util.ByteBuffer(salt);\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n    var cipher = forge.des.createEncryptionCipher(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),\n      // pkcs-12PbeParams\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // salt\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n        // iteration count\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n          countBytes.getBytes())\n      ])\n    ]);\n  } else {\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // EncryptedPrivateKeyInfo\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // encryptionAlgorithm\n    encryptionAlgorithm,\n    // encryptedData\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)\n  ]);\n  return rval;\n};\n\n/**\n * Decrypts a ASN.1 PrivateKeyInfo object.\n *\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\n * @param password the password to decrypt with.\n *\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\n */\npki.decryptPrivateKeyInfo = function(obj, password) {\n  var rval = null;\n\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get cipher\n  var oid = asn1.derToOid(capture.encryptionOid);\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\n\n  // get encrypted data\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\n\n  cipher.update(encrypted);\n  if(cipher.finish()) {\n    rval = asn1.fromDer(cipher.output);\n  }\n\n  return rval;\n};\n\n/**\n * Converts a EncryptedPrivateKeyInfo to PEM format.\n *\n * @param epki the EncryptedPrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted encrypted private key.\n */\npki.encryptedPrivateKeyToPem = function(epki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'ENCRYPTED PRIVATE KEY',\n    body: asn1.toDer(epki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\n * is not performed.\n *\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptedPrivateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {\n    var error = new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  return asn1.fromDer(msg.body);\n};\n\n/**\n * Encrypts an RSA private key. By default, the key will be wrapped in\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\n * This is the standard, preferred way to encrypt a private key.\n *\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\n * private key encryption), set the 'legacy' option to true. Note: Using this\n * option will cause the iteration count to be forced to 1.\n *\n * Note: The 'des' algorithm is supported, but it is not considered to be\n * secure because it only uses a single 56-bit key. If possible, it is highly\n * recommended that a different algorithm be used.\n *\n * @param rsaKey the RSA key to encrypt.\n * @param password the password to use.\n * @param options:\n *          algorithm: the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\n *          count: the iteration count to use.\n *          saltSize: the salt size to use.\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\n *            headers (DEK-Info) private key.\n *\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptRsaPrivateKey = function(rsaKey, password, options) {\n  // standard PKCS#8\n  options = options || {};\n  if(!options.legacy) {\n    // encrypt PrivateKeyInfo\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\n    return pki.encryptedPrivateKeyToPem(rval);\n  }\n\n  // legacy non-PKCS#8\n  var algorithm;\n  var iv;\n  var dkLen;\n  var cipherFn;\n  switch(options.algorithm) {\n  case 'aes128':\n    algorithm = 'AES-128-CBC';\n    dkLen = 16;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes192':\n    algorithm = 'AES-192-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes256':\n    algorithm = 'AES-256-CBC';\n    dkLen = 32;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case '3des':\n    algorithm = 'DES-EDE3-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  case 'des':\n    algorithm = 'DES-CBC';\n    dkLen = 8;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  default:\n    var error = new Error('Could not encrypt RSA private key; unsupported ' +\n      'encryption algorithm \"' + options.algorithm + '\".');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // encrypt private key using OpenSSL legacy key derivation\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n  cipher.finish();\n\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    procType: {\n      version: '4',\n      type: 'ENCRYPTED'\n    },\n    dekInfo: {\n      algorithm: algorithm,\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\n    },\n    body: cipher.output.getBytes()\n  };\n  return forge.pem.encode(msg);\n};\n\n/**\n * Decrypts an RSA private key.\n *\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\n * @param password the password to use.\n *\n * @return the RSA key on success, null on failure.\n */\npki.decryptRsaPrivateKey = function(pem, password) {\n  var rval = null;\n\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&\n    msg.type !== 'PRIVATE KEY' &&\n    msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM header type ' +\n      'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n    error.headerType = error;\n    throw error;\n  }\n\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    var dkLen;\n    var cipherFn;\n    switch(msg.dekInfo.algorithm) {\n    case 'DES-CBC':\n      dkLen = 8;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'DES-EDE3-CBC':\n      dkLen = 24;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'AES-128-CBC':\n      dkLen = 16;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-192-CBC':\n      dkLen = 24;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-256-CBC':\n      dkLen = 32;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'RC2-40-CBC':\n      dkLen = 5;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 40);\n      };\n      break;\n    case 'RC2-64-CBC':\n      dkLen = 8;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 64);\n      };\n      break;\n    case 'RC2-128-CBC':\n      dkLen = 16;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 128);\n      };\n      break;\n    default:\n      var error = new Error('Could not decrypt private key; unsupported ' +\n        'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n      error.algorithm = msg.dekInfo.algorithm;\n      throw error;\n    }\n\n    // use OpenSSL legacy key derivation\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(forge.util.createBuffer(msg.body));\n    if(cipher.finish()) {\n      rval = cipher.output.getBytes();\n    } else {\n      return rval;\n    }\n  } else {\n    rval = msg.body;\n  }\n\n  if(msg.type === 'ENCRYPTED PRIVATE KEY') {\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n  } else {\n    // decryption already performed above\n    rval = asn1.fromDer(rval);\n  }\n\n  if(rval !== null) {\n    rval = pki.privateKeyFromAsn1(rval);\n  }\n\n  return rval;\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\npki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\n  var j, l;\n\n  if(typeof md === 'undefined' || md === null) {\n    if(!('sha1' in forge.md)) {\n      throw new Error('\"sha1\" hash algorithm unavailable.');\n    }\n    md = forge.md.sha1.create();\n  }\n\n  var u = md.digestLength;\n  var v = md.blockLength;\n  var result = new forge.util.ByteBuffer();\n\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\n  var passBuf = new forge.util.ByteBuffer();\n  if(password !== null && password !== undefined) {\n    for(l = 0; l < password.length; l++) {\n      passBuf.putInt16(password.charCodeAt(l));\n    }\n    passBuf.putInt16(0);\n  }\n\n  /* Length of salt and password in BYTES. */\n  var p = passBuf.length();\n  var s = salt.length();\n\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\n        v copies of ID. */\n  var D = new forge.util.ByteBuffer();\n  D.fillWithByte(id, v);\n\n  /* 2. Concatenate copies of the salt together to create a string S of length\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\n        to create S).\n        Note that if the salt is the empty string, then so is S. */\n  var Slen = v * Math.ceil(s / v);\n  var S = new forge.util.ByteBuffer();\n  for(l = 0; l < Slen; l++) {\n    S.putByte(salt.at(l % s));\n  }\n\n  /* 3. Concatenate copies of the password together to create a string P of\n        length v * ceil(p / v) bytes (the final copy of the password may be\n        truncated to create P).\n        Note that if the password is the empty string, then so is P. */\n  var Plen = v * Math.ceil(p / v);\n  var P = new forge.util.ByteBuffer();\n  for(l = 0; l < Plen; l++) {\n    P.putByte(passBuf.at(l % p));\n  }\n\n  /* 4. Set I=S||P to be the concatenation of S and P. */\n  var I = S;\n  I.putBuffer(P);\n\n  /* 5. Set c=ceil(n / u). */\n  var c = Math.ceil(n / u);\n\n  /* 6. For i=1, 2, ..., c, do the following: */\n  for(var i = 1; i <= c; i++) {\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\n    var buf = new forge.util.ByteBuffer();\n    buf.putBytes(D.bytes());\n    buf.putBytes(I.bytes());\n    for(var round = 0; round < iter; round++) {\n      md.start();\n      md.update(buf.getBytes());\n      buf = md.digest();\n    }\n\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\n          final copy of Ai may be truncated to create B). */\n    var B = new forge.util.ByteBuffer();\n    for(l = 0; l < v; l++) {\n      B.putByte(buf.at(l % u));\n    }\n\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\n          Ij=(Ij+B+1) mod 2v for each j.  */\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\n    var Inew = new forge.util.ByteBuffer();\n    for(j = 0; j < k; j++) {\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n      var x = 0x1ff;\n      for(l = B.length() - 1; l >= 0; l--) {\n        x = x >> 8;\n        x += B.at(l) + chunk.at(l);\n        chunk.setAt(l, x & 0xff);\n      }\n      Inew.putBuffer(chunk);\n    }\n    I = Inew;\n\n    /* Add Ai to A. */\n    result.putBuffer(buf);\n  }\n\n  result.truncate(result.length() - n);\n  return result;\n};\n\n/**\n * Get new Forge cipher object instance.\n *\n * @param oid the OID (in string notation).\n * @param params the ASN.1 params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipher = function(oid, params, password) {\n  switch(oid) {\n  case pki.oids['pkcs5PBES2']:\n    return pki.pbe.getCipherForPBES2(oid, params, password);\n\n  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n\n  default:\n    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'pkcs5PBES2',\n      'pbeWithSHAAnd3-KeyTripleDES-CBC',\n      'pbewithSHAAnd40BitRC2-CBC'\n    ];\n    throw error;\n  }\n};\n\n/**\n * Get new Forge cipher object instance according to PBES2 params block.\n *\n * The returned cipher instance is already started using the IV\n * from PBES2 parameter block.\n *\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\n * @param params the ASN.1 PBES2-params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipherForPBES2 = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // check oids\n  oid = asn1.derToOid(capture.kdfOid);\n  if(oid !== pki.oids['pkcs5PBKDF2']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported key derivation function OID.');\n    error.oid = oid;\n    error.supportedOids = ['pkcs5PBKDF2'];\n    throw error;\n  }\n  oid = asn1.derToOid(capture.encOid);\n  if(oid !== pki.oids['aes128-CBC'] &&\n    oid !== pki.oids['aes192-CBC'] &&\n    oid !== pki.oids['aes256-CBC'] &&\n    oid !== pki.oids['des-EDE3-CBC'] &&\n    oid !== pki.oids['desCBC']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported encryption scheme OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\n    throw error;\n  }\n\n  // set PBE params\n  var salt = capture.kdfSalt;\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\n  count = count.getInt(count.length() << 3);\n  var dkLen;\n  var cipherFn;\n  switch(pki.oids[oid]) {\n  case 'aes128-CBC':\n    dkLen = 16;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes192-CBC':\n    dkLen = 24;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes256-CBC':\n    dkLen = 32;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'des-EDE3-CBC':\n    dkLen = 24;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  case 'desCBC':\n    dkLen = 8;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n\n  // decrypt private key using pbe with chosen PRF and AES/DES\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n  var iv = capture.encIv;\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n\n  return cipher;\n};\n\n/**\n * Get new Forge cipher object instance for PKCS#12 PBE.\n *\n * The returned cipher instance is already started using the key & IV\n * derived from the provided password and PKCS#12 PBE salt.\n *\n * @param oid The PKCS#12 PBE OID (in string notation).\n * @param params The ASN.1 PKCS#12 PBE-params object.\n * @param password The password to decrypt with.\n *\n * @return the new cipher object instance.\n */\npki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var salt = forge.util.createBuffer(capture.salt);\n  var count = forge.util.createBuffer(capture.iterations);\n  count = count.getInt(count.length() << 3);\n\n  var dkLen, dIvLen, cipherFn;\n  switch(oid) {\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n      dkLen = 24;\n      dIvLen = 8;\n      cipherFn = forge.des.startDecrypting;\n      break;\n\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      dkLen = 5;\n      dIvLen = 8;\n      cipherFn = function(key, iv) {\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\n        cipher.start(iv, null);\n        return cipher;\n      };\n      break;\n\n    default:\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\n      error.oid = oid;\n      throw error;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n  md.start();\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n\n  return cipherFn(key, iv);\n};\n\n/**\n * OpenSSL's legacy key derivation function.\n *\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\n *\n * @param password the password to derive the key from.\n * @param salt the salt to use, null for none.\n * @param dkLen the number of bytes needed for the derived key.\n * @param [options] the options to use:\n *          [md] an optional message digest object to use.\n */\npki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\n  if(typeof md === 'undefined' || md === null) {\n    if(!('md5' in forge.md)) {\n      throw new Error('\"md5\" hash algorithm unavailable.');\n    }\n    md = forge.md.md5.create();\n  }\n  if(salt === null) {\n    salt = '';\n  }\n  var digests = [hash(md, password + salt)];\n  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n    digests.push(hash(md, digests[i - 1] + password + salt));\n  }\n  return digests.join('').substr(0, dkLen);\n};\n\nfunction hash(md, bytes) {\n  return md.start().update(bytes).digest().getBytes();\n}\n\nfunction prfOidToMessageDigest(prfOid) {\n  // get PRF algorithm, default to SHA-1\n  var prfAlgorithm;\n  if(!prfOid) {\n    prfAlgorithm = 'hmacWithSHA1';\n  } else {\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n    if(!prfAlgorithm) {\n      var error = new Error('Unsupported PRF OID.');\n      error.oid = prfOid;\n      error.supported = [\n        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n        'hmacWithSHA512'];\n      throw error;\n    }\n  }\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\n\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n  var factory = forge.md;\n  switch(prfAlgorithm) {\n  case 'hmacWithSHA224':\n    factory = forge.md.sha512;\n  case 'hmacWithSHA1':\n  case 'hmacWithSHA256':\n  case 'hmacWithSHA384':\n  case 'hmacWithSHA512':\n    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n    break;\n  default:\n    var error = new Error('Unsupported PRF algorithm.');\n    error.algorithm = prfAlgorithm;\n    error.supported = [\n      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n      'hmacWithSHA512'];\n    throw error;\n  }\n  if(!factory || !(prfAlgorithm in factory)) {\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\n  }\n  return factory[prfAlgorithm].create();\n}\n\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // salt\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n    // iteration count\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      countBytes.getBytes())\n  ]);\n  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n  if(prfAlgorithm !== 'hmacWithSHA1') {\n    params.value.push(\n      // key length\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        forge.util.hexToBytes(dkLen.toString(16))),\n      // AlgorithmIdentifier\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // algorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\n        // parameters (null)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n      ]));\n  }\n  return params;\n}\n","/**\n * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.\n *\n * See: RFC 1421.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n *\n * A Forge PEM object has the following fields:\n *\n * type: identifies the type of message (eg: \"RSA PRIVATE KEY\").\n *\n * procType: identifies the type of processing performed on the message,\n *   it has two subfields: version and type, eg: 4,ENCRYPTED.\n *\n * contentDomain: identifies the type of content in the message, typically\n *   only uses the value: \"RFC822\".\n *\n * dekInfo: identifies the message encryption algorithm and mode and includes\n *   any parameters for the algorithm, it has two subfields: algorithm and\n *   parameters, eg: DES-CBC,F8143EDE5960C597.\n *\n * headers: contains all other PEM encapsulated headers -- where order is\n *   significant (for pairing data like recipient ID + key info).\n *\n * body: the binary-encoded body.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n// shortcut for pem API\nvar pem = module.exports = forge.pem = forge.pem || {};\n\n/**\n * Encodes (serializes) the given PEM object.\n *\n * @param msg the PEM message object to encode.\n * @param options the options to use:\n *          maxline the maximum characters per line for the body, (default: 64).\n *\n * @return the PEM-formatted string.\n */\npem.encode = function(msg, options) {\n  options = options || {};\n  var rval = '-----BEGIN ' + msg.type + '-----\\r\\n';\n\n  // encode special headers\n  var header;\n  if(msg.procType) {\n    header = {\n      name: 'Proc-Type',\n      values: [String(msg.procType.version), msg.procType.type]\n    };\n    rval += foldHeader(header);\n  }\n  if(msg.contentDomain) {\n    header = {name: 'Content-Domain', values: [msg.contentDomain]};\n    rval += foldHeader(header);\n  }\n  if(msg.dekInfo) {\n    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};\n    if(msg.dekInfo.parameters) {\n      header.values.push(msg.dekInfo.parameters);\n    }\n    rval += foldHeader(header);\n  }\n\n  if(msg.headers) {\n    // encode all other headers\n    for(var i = 0; i < msg.headers.length; ++i) {\n      rval += foldHeader(msg.headers[i]);\n    }\n  }\n\n  // terminate header\n  if(msg.procType) {\n    rval += '\\r\\n';\n  }\n\n  // add body\n  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\\r\\n';\n\n  rval += '-----END ' + msg.type + '-----\\r\\n';\n  return rval;\n};\n\n/**\n * Decodes (deserializes) all PEM messages found in the given string.\n *\n * @param str the PEM-formatted string to decode.\n *\n * @return the PEM message objects in an array.\n */\npem.decode = function(str) {\n  var rval = [];\n\n  // split string into PEM messages (be lenient w/EOF on BEGIN line)\n  var rMessage = /\\s*-----BEGIN ([A-Z0-9- ]+)-----\\r?\\n?([\\x21-\\x7e\\s]+?(?:\\r?\\n\\r?\\n))?([:A-Za-z0-9+\\/=\\s]+?)-----END \\1-----/g;\n  var rHeader = /([\\x21-\\x7e]+):\\s*([\\x21-\\x7e\\s^:]+)/;\n  var rCRLF = /\\r?\\n/;\n  var match;\n  while(true) {\n    match = rMessage.exec(str);\n    if(!match) {\n      break;\n    }\n\n    // accept \"NEW CERTIFICATE REQUEST\" as \"CERTIFICATE REQUEST\"\n    // https://datatracker.ietf.org/doc/html/rfc7468#section-7\n    var type = match[1];\n    if(type === 'NEW CERTIFICATE REQUEST') {\n      type = 'CERTIFICATE REQUEST';\n    }\n\n    var msg = {\n      type: type,\n      procType: null,\n      contentDomain: null,\n      dekInfo: null,\n      headers: [],\n      body: forge.util.decode64(match[3])\n    };\n    rval.push(msg);\n\n    // no headers\n    if(!match[2]) {\n      continue;\n    }\n\n    // parse headers\n    var lines = match[2].split(rCRLF);\n    var li = 0;\n    while(match && li < lines.length) {\n      // get line, trim any rhs whitespace\n      var line = lines[li].replace(/\\s+$/, '');\n\n      // RFC2822 unfold any following folded lines\n      for(var nl = li + 1; nl < lines.length; ++nl) {\n        var next = lines[nl];\n        if(!/\\s/.test(next[0])) {\n          break;\n        }\n        line += next;\n        li = nl;\n      }\n\n      // parse header\n      match = line.match(rHeader);\n      if(match) {\n        var header = {name: match[1], values: []};\n        var values = match[2].split(',');\n        for(var vi = 0; vi < values.length; ++vi) {\n          header.values.push(ltrim(values[vi]));\n        }\n\n        // Proc-Type must be the first header\n        if(!msg.procType) {\n          if(header.name !== 'Proc-Type') {\n            throw new Error('Invalid PEM formatted message. The first ' +\n              'encapsulated header must be \"Proc-Type\".');\n          } else if(header.values.length !== 2) {\n            throw new Error('Invalid PEM formatted message. The \"Proc-Type\" ' +\n              'header must have two subfields.');\n          }\n          msg.procType = {version: values[0], type: values[1]};\n        } else if(!msg.contentDomain && header.name === 'Content-Domain') {\n          // special-case Content-Domain\n          msg.contentDomain = values[0] || '';\n        } else if(!msg.dekInfo && header.name === 'DEK-Info') {\n          // special-case DEK-Info\n          if(header.values.length === 0) {\n            throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n              'header must have at least one subfield.');\n          }\n          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};\n        } else {\n          msg.headers.push(header);\n        }\n      }\n\n      ++li;\n    }\n\n    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {\n      throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n        'header must be present if \"Proc-Type\" is \"ENCRYPTED\".');\n    }\n  }\n\n  if(rval.length === 0) {\n    throw new Error('Invalid PEM formatted message.');\n  }\n\n  return rval;\n};\n\nfunction foldHeader(header) {\n  var rval = header.name + ': ';\n\n  // ensure values with CRLF are folded\n  var values = [];\n  var insertSpace = function(match, $1) {\n    return ' ' + $1;\n  };\n  for(var i = 0; i < header.values.length; ++i) {\n    values.push(header.values[i].replace(/^(\\S+\\r\\n)/, insertSpace));\n  }\n  rval += values.join(',') + '\\r\\n';\n\n  // do folding\n  var length = 0;\n  var candidate = -1;\n  for(var i = 0; i < rval.length; ++i, ++length) {\n    if(length > 65 && candidate !== -1) {\n      var insert = rval[candidate];\n      if(insert === ',') {\n        ++candidate;\n        rval = rval.substr(0, candidate) + '\\r\\n ' + rval.substr(candidate);\n      } else {\n        rval = rval.substr(0, candidate) +\n          '\\r\\n' + insert + rval.substr(candidate + 1);\n      }\n      length = (i - candidate - 1);\n      candidate = -1;\n      ++i;\n    } else if(rval[i] === ' ' || rval[i] === '\\t' || rval[i] === ',') {\n      candidate = i;\n    }\n  }\n\n  return rval;\n}\n\nfunction ltrim(str) {\n  return str.replace(/^\\s+/, '');\n}\n","/**\n * Node.js module for Forge mask generation functions.\n *\n * @author Stefan Siegl\n *\n * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>\n */\nvar forge = require('./forge');\nrequire('./mgf1');\n\nmodule.exports = forge.mgf = forge.mgf || {};\nforge.mgf.mgf1 = forge.mgf1;\n","/**\n * Cross-browser support for logging in a web application.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n/* LOG API */\nmodule.exports = forge.log = forge.log || {};\n\n/**\n * Application logging system.\n *\n * Each logger level available as it's own function of the form:\n *   forge.log.level(category, args...)\n * The category is an arbitrary string, and the args are the same as\n * Firebug's console.log API. By default the call will be output as:\n *   'LEVEL [category] <args[0]>, args[1], ...'\n * This enables proper % formatting via the first argument.\n * Each category is enabled by default but can be enabled or disabled with\n * the setCategoryEnabled() function.\n */\n// list of known levels\nforge.log.levels = [\n  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];\n// info on the levels indexed by name:\n//   index: level index\n//   name: uppercased display name\nvar sLevelInfo = {};\n// list of loggers\nvar sLoggers = [];\n/**\n * Standard console logger. If no console support is enabled this will\n * remain null. Check before using.\n */\nvar sConsoleLogger = null;\n\n// logger flags\n/**\n * Lock the level at the current value. Used in cases where user config may\n * set the level such that only critical messages are seen but more verbose\n * messages are needed for debugging or other purposes.\n */\nforge.log.LEVEL_LOCKED = (1 << 1);\n/**\n * Always call log function. By default, the logging system will check the\n * message level against logger.level before calling the log function. This\n * flag allows the function to do its own check.\n */\nforge.log.NO_LEVEL_CHECK = (1 << 2);\n/**\n * Perform message interpolation with the passed arguments. \"%\" style\n * fields in log messages will be replaced by arguments as needed. Some\n * loggers, such as Firebug, may do this automatically. The original log\n * message will be available as 'message' and the interpolated version will\n * be available as 'fullMessage'.\n */\nforge.log.INTERPOLATE = (1 << 3);\n\n// setup each log level\nfor(var i = 0; i < forge.log.levels.length; ++i) {\n  var level = forge.log.levels[i];\n  sLevelInfo[level] = {\n    index: i,\n    name: level.toUpperCase()\n  };\n}\n\n/**\n * Message logger. Will dispatch a message to registered loggers as needed.\n *\n * @param message message object\n */\nforge.log.logMessage = function(message) {\n  var messageLevelIndex = sLevelInfo[message.level].index;\n  for(var i = 0; i < sLoggers.length; ++i) {\n    var logger = sLoggers[i];\n    if(logger.flags & forge.log.NO_LEVEL_CHECK) {\n      logger.f(message);\n    } else {\n      // get logger level\n      var loggerLevelIndex = sLevelInfo[logger.level].index;\n      // check level\n      if(messageLevelIndex <= loggerLevelIndex) {\n        // message critical enough, call logger\n        logger.f(logger, message);\n      }\n    }\n  }\n};\n\n/**\n * Sets the 'standard' key on a message object to:\n * \"LEVEL [category] \" + message\n *\n * @param message a message log object\n */\nforge.log.prepareStandard = function(message) {\n  if(!('standard' in message)) {\n    message.standard =\n      sLevelInfo[message.level].name +\n      //' ' + +message.timestamp +\n      ' [' + message.category + '] ' +\n      message.message;\n  }\n};\n\n/**\n * Sets the 'full' key on a message object to the original message\n * interpolated via % formatting with the message arguments.\n *\n * @param message a message log object.\n */\nforge.log.prepareFull = function(message) {\n  if(!('full' in message)) {\n    // copy args and insert message at the front\n    var args = [message.message];\n    args = args.concat([] || message['arguments']);\n    // format the message\n    message.full = forge.util.format.apply(this, args);\n  }\n};\n\n/**\n * Applies both preparseStandard() and prepareFull() to a message object and\n * store result in 'standardFull'.\n *\n * @param message a message log object.\n */\nforge.log.prepareStandardFull = function(message) {\n  if(!('standardFull' in message)) {\n    // FIXME implement 'standardFull' logging\n    forge.log.prepareStandard(message);\n    message.standardFull = message.standard;\n  }\n};\n\n// create log level functions\nif(true) {\n  // levels for which we want functions\n  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];\n  for(var i = 0; i < levels.length; ++i) {\n    // wrap in a function to ensure proper level var is passed\n    (function(level) {\n      // create function for this level\n      forge.log[level] = function(category, message/*, args...*/) {\n        // convert arguments to real array, remove category and message\n        var args = Array.prototype.slice.call(arguments).slice(2);\n        // create message object\n        // Note: interpolation and standard formatting is done lazily\n        var msg = {\n          timestamp: new Date(),\n          level: level,\n          category: category,\n          message: message,\n          'arguments': args\n          /*standard*/\n          /*full*/\n          /*fullMessage*/\n        };\n        // process this message\n        forge.log.logMessage(msg);\n      };\n    })(levels[i]);\n  }\n}\n\n/**\n * Creates a new logger with specified custom logging function.\n *\n * The logging function has a signature of:\n *   function(logger, message)\n * logger: current logger\n * message: object:\n *   level: level id\n *   category: category\n *   message: string message\n *   arguments: Array of extra arguments\n *   fullMessage: interpolated message and arguments if INTERPOLATE flag set\n *\n * @param logFunction a logging function which takes a log message object\n *          as a parameter.\n *\n * @return a logger object.\n */\nforge.log.makeLogger = function(logFunction) {\n  var logger = {\n    flags: 0,\n    f: logFunction\n  };\n  forge.log.setLevel(logger, 'none');\n  return logger;\n};\n\n/**\n * Sets the current log level on a logger.\n *\n * @param logger the target logger.\n * @param level the new maximum log level as a string.\n *\n * @return true if set, false if not.\n */\nforge.log.setLevel = function(logger, level) {\n  var rval = false;\n  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {\n    for(var i = 0; i < forge.log.levels.length; ++i) {\n      var aValidLevel = forge.log.levels[i];\n      if(level == aValidLevel) {\n        // set level\n        logger.level = level;\n        rval = true;\n        break;\n      }\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Locks the log level at its current value.\n *\n * @param logger the target logger.\n * @param lock boolean lock value, default to true.\n */\nforge.log.lock = function(logger, lock) {\n  if(typeof lock === 'undefined' || lock) {\n    logger.flags |= forge.log.LEVEL_LOCKED;\n  } else {\n    logger.flags &= ~forge.log.LEVEL_LOCKED;\n  }\n};\n\n/**\n * Adds a logger.\n *\n * @param logger the logger object.\n */\nforge.log.addLogger = function(logger) {\n  sLoggers.push(logger);\n};\n\n// setup the console logger if possible, else create fake console.log\nif(typeof(console) !== 'undefined' && 'log' in console) {\n  var logger;\n  if(console.error && console.warn && console.info && console.debug) {\n    // looks like Firebug-style logging is available\n    // level handlers map\n    var levelHandlers = {\n      error: console.error,\n      warning: console.warn,\n      info: console.info,\n      debug: console.debug,\n      verbose: console.debug\n    };\n    var f = function(logger, message) {\n      forge.log.prepareStandard(message);\n      var handler = levelHandlers[message.level];\n      // prepend standard message and concat args\n      var args = [message.standard];\n      args = args.concat(message['arguments'].slice());\n      // apply to low-level console function\n      handler.apply(console, args);\n    };\n    logger = forge.log.makeLogger(f);\n  } else {\n    // only appear to have basic console.log\n    var f = function(logger, message) {\n      forge.log.prepareStandardFull(message);\n      console.log(message.standardFull);\n    };\n    logger = forge.log.makeLogger(f);\n  }\n  forge.log.setLevel(logger, 'debug');\n  forge.log.addLogger(logger);\n  sConsoleLogger = logger;\n} else {\n  // define fake console.log to avoid potential script errors on\n  // browsers that do not have console logging\n  console = {\n    log: function() {}\n  };\n}\n\n/*\n * Check for logging control query vars in current URL.\n *\n * console.level=<level-name>\n * Set's the console log level by name.  Useful to override defaults and\n * allow more verbose logging before a user config is loaded.\n *\n * console.lock=<true|false>\n * Lock the console log level at whatever level it is set at.  This is run\n * after console.level is processed.  Useful to force a level of verbosity\n * that could otherwise be limited by a user config.\n */\nif(sConsoleLogger !== null &&\n  typeof window !== 'undefined' && window.location\n) {\n  var query = new URL(window.location.href).searchParams;\n  if(query.has('console.level')) {\n    // set with last value\n    forge.log.setLevel(\n      sConsoleLogger, query.get('console.level').slice(-1)[0]);\n  }\n  if(query.has('console.lock')) {\n    // set with last value\n    var lock = query.get('console.lock').slice(-1)[0];\n    if(lock == 'true') {\n      forge.log.lock(sConsoleLogger);\n    }\n  }\n}\n\n// provide public access to console logger\nforge.log.consoleLogger = sConsoleLogger;\n","/**\n * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\nvar md5 = module.exports = forge.md5 = forge.md5 || {};\nforge.md.md5 = forge.md.algorithms.md5 = md5;\n\n/**\n * Creates an MD5 message digest object.\n *\n * @return a message digest object.\n */\nmd5.create = function() {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  // MD5 state contains four 32-bit integers\n  var _state = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for word storage\n  var _w = new Array(16);\n\n  // message digest object\n  var md = {\n    algorithm: 'md5',\n    blockLength: 64,\n    digestLength: 16,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 8\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength64 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength64 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _state = {\n      h0: 0x67452301,\n      h1: 0xEFCDAB89,\n      h2: 0x98BADCFE,\n      h3: 0x10325476\n    };\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = (len[1] / 0x100000000) >>> 0;\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_state, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate MD5 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in little-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry\n    var bits, carry = 0;\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      bits = md.fullMessageLength[i] * 8 + carry;\n      carry = (bits / 0x100000000) >>> 0;\n      finalBlock.putInt32Le(bits >>> 0);\n    }\n\n    var s2 = {\n      h0: _state.h0,\n      h1: _state.h1,\n      h2: _state.h2,\n      h3: _state.h3\n    };\n    _update(s2, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    rval.putInt32Le(s2.h0);\n    rval.putInt32Le(s2.h1);\n    rval.putInt32Le(s2.h2);\n    rval.putInt32Le(s2.h3);\n    return rval;\n  };\n\n  return md;\n};\n\n// padding, constant tables for calculating md5\nvar _padding = null;\nvar _g = null;\nvar _r = null;\nvar _k = null;\nvar _initialized = false;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n\n  // g values\n  _g = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12,\n    5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2,\n    0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9];\n\n  // rounds table\n  _r = [\n    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,\n    5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,\n    4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,\n    6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21];\n\n  // get the result of abs(sin(i + 1)) as a 32-bit integer\n  _k = new Array(64);\n  for(var i = 0; i < 64; ++i) {\n    _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);\n  }\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates an MD5 state with the given byte buffer.\n *\n * @param s the MD5 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (64 byte) chunks\n  var t, a, b, c, d, f, r, i;\n  var len = bytes.length();\n  while(len >= 64) {\n    // initialize hash value for this chunk\n    a = s.h0;\n    b = s.h1;\n    c = s.h2;\n    d = s.h3;\n\n    // round 1\n    for(i = 0; i < 16; ++i) {\n      w[i] = bytes.getInt32Le();\n      f = d ^ (b & (c ^ d));\n      t = (a + f + _k[i] + w[i]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n    // round 2\n    for(; i < 32; ++i) {\n      f = c ^ (d & (b ^ c));\n      t = (a + f + _k[i] + w[_g[i]]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n    // round 3\n    for(; i < 48; ++i) {\n      f = b ^ c ^ d;\n      t = (a + f + _k[i] + w[_g[i]]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n    // round 4\n    for(; i < 64; ++i) {\n      f = c ^ (b | ~d);\n      t = (a + f + _k[i] + w[_g[i]]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n\n    // update hash state\n    s.h0 = (s.h0 + a) | 0;\n    s.h1 = (s.h1 + b) | 0;\n    s.h2 = (s.h2 + c) | 0;\n    s.h3 = (s.h3 + d) | 0;\n\n    len -= 64;\n  }\n}\n","/**\n * Node.js module for all known Forge message digests.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2017 Digital Bazaar, Inc.\n */\nmodule.exports = require('./md');\n\nrequire('./md5');\nrequire('./sha1');\nrequire('./sha256');\nrequire('./sha512');\n","/**\n * Javascript implementation of RSA-KEM.\n *\n * @author Lautaro Cozzani Rodriguez\n * @author Dave Longley\n *\n * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./jsbn');\n\nmodule.exports = forge.kem = forge.kem || {};\n\nvar BigInteger = forge.jsbn.BigInteger;\n\n/**\n * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.\n */\nforge.kem.rsa = {};\n\n/**\n * Creates an RSA KEM API object for generating a secret asymmetric key.\n *\n * The symmetric key may be generated via a call to 'encrypt', which will\n * produce a ciphertext to be transmitted to the recipient and a key to be\n * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which\n * will produce the same secret key for the recipient to use to decrypt a\n * message that was encrypted with the secret key.\n *\n * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).\n * @param options the options to use.\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n */\nforge.kem.rsa.create = function(kdf, options) {\n  options = options || {};\n  var prng = options.prng || forge.random;\n\n  var kem = {};\n\n  /**\n   * Generates a secret key and its encapsulation.\n   *\n   * @param publicKey the RSA public key to encrypt with.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return an object with:\n   *   encapsulation: the ciphertext for generating the secret key, as a\n   *     binary-encoded string of bytes.\n   *   key: the secret key to use for encrypting a message.\n   */\n  kem.encrypt = function(publicKey, keyLength) {\n    // generate a random r where 1 < r < n\n    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);\n    var r;\n    do {\n      r = new BigInteger(\n        forge.util.bytesToHex(prng.getBytesSync(byteLength)),\n        16).mod(publicKey.n);\n    } while(r.compareTo(BigInteger.ONE) <= 0);\n\n    // prepend r with zeros\n    r = forge.util.hexToBytes(r.toString(16));\n    var zeros = byteLength - r.length;\n    if(zeros > 0) {\n      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;\n    }\n\n    // encrypt the random\n    var encapsulation = publicKey.encrypt(r, 'NONE');\n\n    // generate the secret key\n    var key = kdf.generate(r, keyLength);\n\n    return {encapsulation: encapsulation, key: key};\n  };\n\n  /**\n   * Decrypts an encapsulated secret key.\n   *\n   * @param privateKey the RSA private key to decrypt with.\n   * @param encapsulation the ciphertext for generating the secret key, as\n   *          a binary-encoded string of bytes.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return the secret key as a binary-encoded string of bytes.\n   */\n  kem.decrypt = function(privateKey, encapsulation, keyLength) {\n    // decrypt the encapsulation and generate the secret key\n    var r = privateKey.decrypt(encapsulation, 'NONE');\n    return kdf.generate(r, keyLength);\n  };\n\n  return kem;\n};\n\n// TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?\n\n/**\n * Creates a key derivation API object that implements KDF1 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF1 API object.\n */\nforge.kem.kdf1 = function(md, digestLength) {\n  _createKDF(this, md, 0, digestLength || md.digestLength);\n};\n\n/**\n * Creates a key derivation API object that implements KDF2 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF2 API object.\n */\nforge.kem.kdf2 = function(md, digestLength) {\n  _createKDF(this, md, 1, digestLength || md.digestLength);\n};\n\n/**\n * Creates a KDF1 or KDF2 API object.\n *\n * @param md the hash API to use.\n * @param counterStart the starting index for the counter.\n * @param digestLength the digest length to use.\n *\n * @return the KDF API object.\n */\nfunction _createKDF(kdf, md, counterStart, digestLength) {\n  /**\n   * Generate a key of the specified length.\n   *\n   * @param x the binary-encoded byte string to generate a key from.\n   * @param length the number of bytes to generate (the size of the key).\n   *\n   * @return the key as a binary-encoded string.\n   */\n  kdf.generate = function(x, length) {\n    var key = new forge.util.ByteBuffer();\n\n    // run counter from counterStart to ceil(length / Hash.len)\n    var k = Math.ceil(length / digestLength) + counterStart;\n\n    var c = new forge.util.ByteBuffer();\n    for(var i = counterStart; i < k; ++i) {\n      // I2OSP(i, 4): convert counter to an octet string of 4 octets\n      c.putInt32(i);\n\n      // digest 'x' and the counter and add the result to the key\n      md.start();\n      md.update(x + c.getBytes());\n      var hash = md.digest();\n      key.putBytes(hash.getBytes(digestLength));\n    }\n\n    // truncate to the correct key length\n    key.truncate(key.length() - length);\n    return key.getBytes();\n  };\n}\n","/**\n * Node.js module for Forge message digests.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2017 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nmodule.exports = forge.md = forge.md || {};\nforge.md.algorithms = forge.md.algorithms || {};\n"],"sourceRoot":""}